var search_data = {"index":{"searchIndex":["actioncontroller","base","caching","actions","actioncachepath","classmethods","configmethods","fragments","pages","classmethods","sweeping","compatibility","conditionalget","cookies","datastreaming","flash","forcessl","classmethods","head","helpers","classmethods","hideactions","classmethods","httpauthentication","basic","controllermethods","classmethods","digest","controllermethods","token","controllermethods","implicitrender","instrumentation","classmethods","logsubscriber","metal","middleware","actionmiddleware","mimeresponds","classmethods","paramswrapper","classmethods","rackdelegation","railtie","railties","paths","recordidentifier","redirecting","renderers","all","classmethods","rendering","requestforgeryprotection","classmethods","rescue","responder","sessionmanagement","classmethods","streaming","classmethods","templateassertions","testcase","behavior","classmethods","raiseactionexceptions","testresponse","testing","classmethods","urlfor","actionmailer","base","actionview","actionview","actionview","base","base","context","filesystemresolver","fixtureresolver","helpers","activemodelhelper","activemodelinstancetag","assetpaths","assettaghelper","assetincludetag","javascriptincludetag","javascripttaghelpers","classmethods","stylesheetincludetag","stylesheettaghelpers","classmethods","atomfeedhelper","atombuilder","atomfeedbuilder","cachehelper","capturehelper","csrfhelper","datehelper","debughelper","formbuilder","formhelper","formoptionshelper","formtaghelper","instancetag","javascripthelper","numberhelper","invalidnumbererror","outputsafetyhelper","recordtaghelper","renderinghelper","sanitizehelper","taghelper","texthelper","translationhelper","urlhelper","logsubscriber","lookupcontext","details","viewpaths","nullresolver","railtie","renderer","resolver","path","template","actionview","template","template","handler","handlers","builder","compilable","classmethods","erb","erubis","testcase","behavior","classmethods","locals","testcontroller","activemodel","attributemethods","classmethods","attributemethodmatcher","blockvalidator","callbacks","conversion","dirty","eachvalidator","errors","lint","tests","massassignmentsecurity","blacklist","classmethods","permissionset","sanitizer","whitelist","missingattributeerror","name","naming","observer","observerarray","observing","classmethods","securepassword","classmethods","instancemethodsonactivation","serialization","serializers","json","xml","translation","validations","acceptancevalidator","callbacks","classmethods","classmethods","confirmationvalidator","exclusionvalidator","formatvalidator","helpermethods","inclusionvalidator","lengthvalidator","numericalityvalidator","presencevalidator","withvalidator","validator","activerecord","activerecorderror","adapternotfound","adapternotspecified","aggregations","classmethods","associationtypemismatch","associations","classmethods","attributeassignmenterror","attributemethods","beforetypecast","classmethods","dirty","primarykey","classmethods","query","read","classmethods","timezoneconversion","classmethods","write","classmethods","autosaveassociation","classmethods","base","batches","calculations","callbacks","coders","yamlcolumn","configurationerror","connectionadapters","abstractadapter","column","format","connectionhandler","connectionmanagement","connectionpool","databaselimits","databasestatements","mysql2adapter","mysql2column","mysqladapter","postgresqladapter","tabledefinition","postgresqlcolumn","querycache","quoting","sqliteadapter","version","schemastatements","table","tabledefinition","connectionnotestablished","connectiontimeouterror","countercache","dangerousattributeerror","dynamicfindermatch","dynamicscopematch","findermethods","fixtures","hasmanythroughnestedassociationsarereadonly","identitymap","middleware","invalidforeignkey","irreversiblemigration","locking","optimistic","classmethods","pessimistic","logsubscriber","migration","commandrecorder","migrationproxy","multiparameterassignmenterrors","namedscope","classmethods","nestedattributes","classmethods","toomanyrecords","observer","persistence","preparedstatementinvalid","querycache","classmethods","querymethods","railtie","railties","controllerruntime","classmethods","readonlyrecord","recordinvalid","recordnotfound","recordnotsaved","recordnotunique","reflection","classmethods","macroreflection","relation","result","rollback","schema","serialization","serializationtypemismatch","sessionstore","session","sqlbypass","spawnmethods","staleobjecterror","statementinvalid","testfixtures","classmethods","throwresult","timestamp","transactions","classmethods","unknownattributeerror","validations","associatedvalidator","classmethods","uniquenessvalidator","wrappeddatabaseexception","activeresource","badrequest","base","clienterror","connection","custommethods","classmethods","instancemethods","errors","forbiddenaccess","formats","jsonformat","xmlformat","httpmock","invalidrequesterror","logsubscriber","missingprefixparam","observing","railtie","request","resourceconflict","resourcegone","resourcenotfound","response","sslerror","servererror","timeouterror","unauthorizedaccess","validations","activesupport","autoload","backtracecleaner","base64","basicobject","benchmarkable","bufferedlogger","severity","cache","compressedmemcachestore","entry","filestore","memcachestore","memorystore","store","strategy","localcache","localstore","synchronizedmemorystore","callbacks","classmethods","concern","configurable","classmethods","configuration","dependencies","classcache","watchstack","deprecation","descendantstracker","duration","fileupdatechecker","filewatcher","backend","gzip","stream","hashwithindifferentaccess","inflector","inflections","inheritableoptions","json","encoding","circularreferenceerror","encoder","variable","logsubscriber","testhelper","mocklogger","memoizable","instancemethods","messageencryptor","invalidmessage","messageverifier","invalidsignature","multibyte","chars","encodingerror","unicode","codepoint","unicodedatabase","notifications","event","fanout","instrumenter","orderedoptions","railtie","rescuable","classmethods","safebuffer","safeconcaterror","stringinquirer","testcase","testing","assertions","declarative","isolation","forking","minitest","subprocess","testunit","pending","performance","benchmarker","forclassictestunit","forminitest","metrics","amount","base","cputime","digitalinformationunit","gcruns","gctime","memory","objects","processtime","time","usertime","walltime","performer","profiler","proxytestresult","remoteerror","setupandteardown","classmethods","forclassictestunit","forminitest","timewithzone","timezone","xmlmini","xmlmini_libxmlsax","hashbuilder","xmlmini_nokogirisax","hashbuilder","arjdbcmysql","error","array","benchmark","bigdecimal","class","date","datetime","erb","util","enumerable","falseclass","file","fixturesfilenotfound","float","html","fullsanitizer","linksanitizer","sanitizer","selector","tag","whitelistsanitizer","hash","i18n","exceptionhandler","railtie","integer","kernel","loaderror","logger","simpleformatter","module","mysql","result","stmt","time","nameerror","nilclass","numeric","object","hashwithindifferentaccess","missingsourcefile","process","rails","range","regexp","string","struct","symbol","test","unit","collector","objectspace","time","trueclass","uri","+()","+()","+()","+()","+()","-()","-()","-()","<<()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","==()","==()","==()","==()","==()","==()","==()","==()","===()","===()","===()","=~()","=~()",">>()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","__replay__()","_dasherize()","_dump()","_dump_without_utc_flag()","_dump_without_zone()","_get()","_handle_method_missing()","_handle_render_options()","_layout_for()","_layout_for()","_load()","_load_without_utc_flag()","_load_without_zone()","_normalize_options()","_original_to_s()","_parse_file()","_prepare_context()","_read_attribute()","_routes_context()","_run_class_setup()","_save_fragment()","_set_detail()","_set_wrapper_defaults()","_validates_default_keys()","abstract_class?()","accepts_nested_attributes_for()","accessible_attributes()","action()","action_methods()","active?()","active?()","active?()","active?()","active_authorizer()","active_authorizers()","active_connection?()","active_connections?()","acts_like?()","acts_like_date?()","acts_like_date?()","acts_like_string?()","acts_like_string?()","acts_like_time?()","acts_like_time?()","acts_like_time?()","adapter_name()","adapter_name()","adapter_name()","add()","add()","add()","add()","add_column()","add_column()","add_column()","add_column()","add_column_position!()","add_column_position!()","add_column_sql()","add_error()","add_expr_escaped()","add_expr_literal()","add_filter()","add_index()","add_index_options()","add_index_sql()","add_limit_offset!()","add_limit_offset!()","add_observer()","add_observer!()","add_on_blank()","add_on_empty()","add_postamble()","add_preamble()","add_renderer()","add_silencer()","add_text()","add_timestamps()","add_timestamps_sql()","add_to_transaction()","add_transaction_record()","add_whiner()","advance()","advance()","advance()","advance()","after_commit()","after_rollback()","after_validation()","aggregate_mapping()","ago()","ago()","ago()","ago()","ago()","ago()","alias_attribute()","alias_attribute()","alias_method_chain()","all()","all()","all()","all_helpers_from_path()","announce()","anonymous?()","any?()","api_behavior()","api_location()","append_features()","application()","application=()","apply_finder_options()","apply_join_dependency()","arel()","arel_engine()","arel_table()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","assert_blank()","assert_difference()","assert_no_difference()","assert_present()","assert_template()","assert_valid_keys()","asset_name()","asset_name()","asset_name()","asset_tag()","asset_tag()","asset_tag()","assign_attributes()","assign_shortcuts()","assume_migrated_upto_version()","at()","at()","at_beginning_of_day()","at_beginning_of_day()","at_beginning_of_day()","at_beginning_of_month()","at_beginning_of_month()","at_beginning_of_quarter()","at_beginning_of_quarter()","at_beginning_of_week()","at_beginning_of_week()","at_beginning_of_year()","at_beginning_of_year()","at_end_of_month()","at_end_of_month()","at_end_of_quarter()","at_end_of_quarter()","at_end_of_week()","at_end_of_week()","at_end_of_year()","at_end_of_year()","at_midnight()","at_midnight()","at_midnight()","atom_feed()","atomic_write()","attach_to()","attachments()","attr_accessible()","attr_accessor_with_default()","attr_internal()","attr_internal_accessor()","attr_internal_reader()","attr_internal_writer()","attr_protected()","attr_readonly()","attribute_for_inspect()","attribute_match()","attribute_method?()","attribute_method?()","attribute_method?()","attribute_method_affix()","attribute_method_prefix()","attribute_method_suffix()","attribute_methods_generated?()","attribute_names()","attribute_names()","attribute_present?()","attributes()","attributes=()","attributes_before_type_cast()","attributes_protected_by_default()","attributes_protected_by_default()","audio_path()","audio_tag()","auth_type()","auth_type=()","auth_type=()","authenticate()","authenticate()","authenticate()","authenticate()","authenticate_or_request_with_http_basic()","authenticate_or_request_with_http_digest()","authenticate_or_request_with_http_token()","authenticate_with_http_basic()","authenticate_with_http_digest()","authenticate_with_http_token()","authentication_header()","authentication_request()","authentication_request()","authentication_request()","auto_discovery_link_tag()","auto_flush()","auto_flushing=()","autoload()","autoload_at()","autoload_under()","autoloads()","average()","backend()","backend=()","backend=()","backtrace_cleaner()","bang?()","base_class()","basename()","becomes()","before_filters()","before_validation()","begin_db_transaction()","begin_db_transaction()","begin_db_transaction()","beginning_of_day()","beginning_of_day()","beginning_of_day()","beginning_of_month()","beginning_of_month()","beginning_of_quarter()","beginning_of_quarter()","beginning_of_week()","beginning_of_week()","beginning_of_year()","beginning_of_year()","behavior()","behavior=()","belongs_to()","belongs_to()","belongs_to()","benchmark()","benchmark()","between?()","bind()","blank?()","blank?()","blank?()","blank?()","blank?()","blank?()","breakpoint()","buffer()","build()","build()","build()","build()","build_arel()","build_mem_cache()","button_tag()","button_to()","button_to_function()","byte()","bytes()","cache()","cache()","cache()","cache()","cache()","cache_attribute?()","cache_attributes()","cache_fixtures()","cache_for_connection()","cache_key()","cache_page()","cache_page()","cache_store()","cache_store=()","cache_template_loading()","cache_template_loading=()","cached_attributes()","cached_fixtures()","caches_action()","caches_page()","caching_allowed?()","calculate()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","camelcase()","camelize()","camelize()","capitalize()","capture()","capture()","case_sensitive_equality_operator()","case_sensitive_equality_operator()","case_sensitive_equality_operator()","case_sensitive_modifier()","case_sensitive_modifier()","case_sensitive_modifier()","cattr_accessor()","cattr_reader()","cattr_writer()","cdata_block()","cdata_section()","center()","change()","change()","change()","change()","change_column()","change_column()","change_column()","change_column_default()","change_column_default()","change_column_default()","change_column_null()","change_column_null()","change_column_null()","change_column_null()","change_column_sql()","change_default()","change_table()","changed()","changed?()","changed_attributes()","changed_for_autosave?()","changes()","characters()","charset()","charset()","check_box()","check_box()","check_box_checked?()","check_box_tag()","check_validity!()","check_validity!()","check_validity!()","check_validity!()","check_validity!()","check_validity!()","checkin()","checkout()","civil_from_format()","class_attribute()","class_eval()","class_name()","class_of_active_record_descendant()","classify()","classify()","clean()","cleanup()","cleanup()","cleanup()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear!()","clear_active_connections!()","clear_active_connections!()","clear_all_connections!()","clear_buffer()","clear_cache()","clear_cache!()","clear_cache!()","clear_cache!()","clear_cache!()","clear_cache!()","clear_query_cache()","clear_reloadable_connections!()","clear_reloadable_connections!()","clear_respond_to()","clear_stale_cached_connections!()","clear_table_cache!()","clear_transaction_record_state()","client_encoding()","client_min_messages()","client_min_messages=()","clone()","clone_attribute_value()","clone_attributes()","close()","close()","collation()","collation()","collection_name()","collection_path()","collection_path()","collection_select()","collection_select()","color()","column()","column()","column_defaults()","column_exists?()","column_exists?()","column_for_attribute()","column_name_length()","column_names()","columns()","columns()","columns()","columns()","columns_for_remove()","columns_hash()","columns_per_multicolumn_index()","columns_per_table()","commit_db_transaction()","commit_db_transaction()","commit_db_transaction()","commit_transaction_records()","comparable_time()","compare_with_coercion()","compare_without_coercion()","compile()","compile_methods!()","compile_methods!()","compose()","compose_codepoints()","composed_of()","compress()","compressed?()","compute_type()","concat()","concat()","config()","config()","config()","config_accessor()","configuration()","configurations()","configure()","connected?()","connected?()","connected?()","connection()","connection()","connection()","connection()","connection()","connection()","connection()","connection_config()","connection_handler()","connection_pool()","connection_pool()","constantize()","constantize()","construct_join_dependency_for_association_find()","construct_limited_ids_condition()","construct_relation_for_association_calculations()","construct_relation_for_association_find()","consumes?()","contains_bad_protocols?()","content_columns()","content_for()","content_for?()","content_tag()","content_tag_for()","content_type()","content_type=()","controller_class()","controller_class=()","controller_name()","controller_name()","controller_path()","controller_path=()","convert_key()","convert_key()","convert_to_model()","convert_value()","convert_value()","copy()","count()","count()","count_by_sql()","count_observers()","create()","create()","create()","create()","create()","create()","create()","create!()","create!()","create_database()","create_database()","create_database()","create_fixtures()","create_path_and_open_file()","create_reflection()","create_savepoint()","create_savepoint()","create_savepoint()","create_savepoint()","create_savepoint()","create_table()","create_table()","create_with()","creator?()","csrf_meta_tag()","csrf_meta_tags()","current()","current()","current()","current_cycle()","current_database()","current_database()","current_database()","current_hash()","current_hash()","current_page?()","current_savepoint_name()","custom_dir()","custom_dir()","custom_dir()","custom_method_collection_url()","cycle()","daemon()","dasherize()","dasherize()","data()","data()","data_column()","data_column_name()","data_column_name()","data_column_size_limit()","date_select()","date_select()","datetime_select()","datetime_select()","day()","days()","days_in_month()","debug()","debug_protected_attribute_removal()","debugger()","decode()","decode()","decode()","decode64()","decode_credentials()","decode_credentials()","decode_credentials_header()","decompose()","decompose_codepoints()","decompress()","decrement()","decrement()","decrement()","decrement()","decrement!()","decrement_counter()","decrement_open_transactions()","decrypt()","decrypt_and_verify()","deep_dup()","deep_merge()","deep_merge!()","default()","default()","default()","default_action()","default_inspect()","default_inspect()","default_primary_key_type()","default_render()","default_render()","default_scope()","default_sequence_name()","default_timezone()","define()","define_attr_method()","define_attribute_method()","define_attribute_methods()","define_attribute_methods()","define_callbacks()","define_callbacks()","define_method_attribute()","define_method_attribute()","define_method_attribute=()","define_method_attribute=()","define_model_callbacks()","defined_activerecord_methods()","delegate()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete_all()","delete_entry()","delete_entry()","delete_matched()","delete_matched()","delete_matched()","delete_responses_to_replace()","delete_sql()","demodulize()","demodulize()","deny?()","deny?()","deprecate()","deprecate_methods()","deprecated_method_warning()","descendants()","descendants()","descends_from_active_record?()","describe()","destroy()","destroy()","destroy()","destroy()","destroy_all()","destroyed?()","determine_default_controller_class()","determine_default_helper_class()","diff()","direct_descendants()","direct_descendants()","dirname()","dirties_query_cache()","dirty?()","disable()","disable_cache()","disable_query_cache!()","disable_referential_integrity()","disabled_for?()","disabled_for?()","disabled_observer_stack()","disabled_observers()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","dispatch()","display()","display_errors()","distance_of_time_in_words()","distance_of_time_in_words_to_now()","distinct()","div_for()","dom_class()","dom_id()","down()","downcase()","drop_table()","drop_table()","drop_table()","dst?()","dup()","dup()","dup()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","each()","each()","each()","each_subclass_array()","each_with_object()","eager_autoload()","eager_autoload!()","eager_load()","eager_loading?()","element_name()","element_path()","element_path()","email_field()","email_field_tag()","emitted_hidden_id?()","empty?()","empty?()","empty?()","empty_insert_statement_value()","empty_insert_statement_value()","empty_json_resource()","empty_resource()","emulate_booleans()","enable()","enable_query_cache!()","enable_warnings()","enabled()","enabled=()","enabled?()","encode()","encode()","encode()","encode()","encode()","encode64()","encode64s()","encode_credentials()","encode_credentials()","encode_credentials()","encode_json()","encode_json()","encode_json()","encode_json()","encode_with()","encode_with()","encode_with()","encode_with()","encoding()","encoding_aware?()","encrypt()","encrypt_and_sign()","end_document()","end_element()","end_of_day()","end_of_day()","end_of_day()","end_of_month()","end_of_month()","end_of_quarter()","end_of_quarter()","end_of_week()","end_of_week()","end_of_year()","end_of_year()","end_transaction()","engine()","engine=()","entry()","env()","env()","env=()","environment()","eql?()","eql?()","eql?()","eql?()","error()","error_message()","error_wrapping()","errors()","errors()","escape()","escape_bytea()","escape_javascript()","escape_once()","establish_connection()","establish_connection()","evaluate_default_scope()","exabyte()","exabytes()","except()","except()","except!()","excerpt()","exclude?()","exclude?()","exec_delete()","exec_delete()","exec_delete()","exec_delete()","exec_delete()","exec_insert()","exec_insert()","exec_query()","exec_query()","exec_query()","exec_query()","exec_update()","exec_update()","exec_update()","exec_update()","exec_update()","execute()","execute()","execute()","execute_hook()","execute_if_updated()","exist?()","exists?()","exists?()","exists?()","exists?()","expand_cache_key()","expand_hash_conditions_for_aggregates()","expected_response()","expire_action()","expire_fragment()","expire_page()","expire_page()","expired?()","expires_at()","expires_at=()","expires_in()","expires_now()","extended()","extended()","extended()","extending()","extension()","extension()","extension()","extension()","extension()","extract!()","extract_default()","extract_options!()","extract_schema_and_table()","extractable_options?()","extractable_options?()","extractable_options?()","favicon_link_tag()","fetch()","fetch()","fetch()","field_set_tag()","fields_for()","fields_for()","fifth()","file_field()","file_field()","file_field_tag()","filename()","filtered_options()","find()","find()","find()","find_all()","find_all()","find_by_attributes()","find_by_session_id()","find_by_session_id()","find_by_sql()","find_each()","find_first()","find_in_batches()","find_last()","find_one()","find_or_instantiator_by_attributes()","find_some()","find_template()","find_tzinfo()","find_with_associations()","find_with_ids()","find_zone()","find_zone!()","finder?()","first()","first()","first()","first!()","fixture_is_cached?()","fixtures()","flush()","flush()","flush_all!()","flush_cache()","flushable_loggers()","for_class()","for_id()","for_tag()","force_ssl()","foreign_key()","foreign_key()","forking_env?()","form_authenticity_param()","form_authenticity_token()","form_for()","form_tag()","format()","format()","format()","format()","format=()","formats=()","formatted_offset()","formatted_offset()","formatted_offset()","formatted_offset()","fortnight()","fortnights()","forty_two()","fourth()","fragment_cache_key()","fragment_exist?()","freeze()","freeze()","freeze_with_memoizable()","fresh_when()","from()","from()","from()","from_array()","from_json()","from_json()","from_now()","from_now()","from_rails_root()","from_xml()","from_xml()","from_xml()","frozen?()","full_messages()","full_profile_options()","full_test_name()","future?()","future?()","future?()","future?()","g_length()","g_pack()","g_unpack()","generate()","generate_message()","get()","get()","get()","get()","get()","get()","get()","getgm()","getlocal()","getutc()","getutc()","gigabyte()","gigabytes()","gmt?()","gmt_offset()","gmtime()","gmtoff()","group()","group_by()","grouped_collection_select()","grouped_collection_select()","grouped_options_for_select()","groups()","h()","ha1()","handle_unverified_request()","handler_for_rescue()","handles_encoding?()","has_and_belongs_to_many()","has_attribute?()","has_default?()","has_empty_resource_definition?()","has_errors?()","has_key?()","has_key?()","has_many()","has_one()","has_secure_password()","hash()","hash()","hash()","having()","head()","head()","head()","headers()","headers()","headers=()","helper_attr()","helper_class()","helper_method()","helpers()","hidden_field()","hidden_field()","hidden_field_tag()","hide_action()","highlight()","hour()","hours()","html_escape()","html_safe()","html_safe?()","html_safe?()","html_safe?()","http_basic_authenticate_with()","httpdate()","human()","human()","human_attribute_name()","humanize()","humanize()","i18n_scope()","id()","id()","id=()","id_from_response()","identify()","identity()","image_alt()","image_path()","image_submit_tag()","image_tag()","in()","in()","in()","in?()","in_char_class?()","in_clause_length()","in_groups()","in_groups_of()","in_time_zone()","in_time_zone()","in_time_zone()","include?()","include?()","include?()","include?()","include?()","include?()","include_fallbacks_module()","include_tag()","include_with_range?()","included()","included()","included()","included()","included()","included()","includes()","increment()","increment()","increment()","increment()","increment!()","increment_counter()","increment_open_transactions()","index()","index()","index()","index_by()","index_exists?()","index_exists?()","index_name_exists?()","index_name_for_remove()","index_name_length()","index_name_length()","indexes()","indexes()","indexes_per_table()","inflections()","inheritable_copy()","inheritance_column()","inheritance_column=()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","init_fallbacks()","init_with()","initialize!()","initialize_copy()","initialize_copy()","initialize_dup()","initialize_i18n()","initialize_schema_migrations_table()","initialize_template_class()","initialized=()","initialized?()","inquiry()","insert()","insert()","insert()","insert_fixture()","insert_sql()","insert_sql()","insert_sql()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","instance()","instance_method_already_implemented?()","instance_method_already_implemented?()","instance_method_names()","instance_variable_names()","instantiate()","instantiate_all_loaded_fixtures()","instantiate_fixtures()","instantiate_observers()","instantiator?()","instrument()","instrument()","instrument()","instrument=()","instrument_fragment_cache()","instrumenter()","invalid?()","inverse()","irregular()","is_a?()","is_missing?()","is_missing?()","is_utf8?()","isdst()","iso8601()","iso8601()","j()","j()","javascript_include_tag()","javascript_path()","javascript_tag()","joined_includes_values()","joins()","joins_per_query()","json_escape()","key?()","key?()","key?()","key_matcher()","keys()","kilobyte()","kilobytes()","kind()","kind()","kind_of?()","klass()","known_attributes()","known_attributes()","l()","label()","label()","label_tag()","last()","last()","last()","last!()","last_inserted_id()","last_inserted_id()","last_inserted_id()","last_inserted_id()","limit()","limit()","limited_update_conditions()","limited_update_conditions()","limited_update_conditions()","link_to()","link_to_function()","link_to_if()","link_to_unless()","link_to_unless_current()","listeners_for()","listening?()","ljust()","load()","load()","load_attributes_from_response()","loaded?()","loaded?()","local()","local_constant_names()","local_constants()","local_offset()","local_time()","local_to_utc()","locale()","locale=()","localize()","locals()","localtime()","location()","location=()","lock()","lock!()","locking_column()","locking_enabled?()","log()","log_process_action()","log_subscribers()","logged()","logger()","logger()","logger()","logger()","logger()","logger()","logger()","logger()","logger=()","lookup_ancestors()","lookup_store()","lstrip()","mail()","mail_to()","mailer_name()","mailer_name()","many?()","many?()","mark_for_destruction()","marked_for_destruction?()","marshal_dump()","marshal_load()","mass_assignment_authorizer()","mass_assignment_options()","mass_assignment_role()","match()","match()","match()","match()","mattr_accessor()","mattr_reader()","mattr_writer()","maximum()","mb_chars()","measure()","measure()","measure()","measure()","measure()","measure()","measure()","measure()","measure()","measure_mode()","megabyte()","megabytes()","member?()","member?()","memoize()","memoize_all()","memoized_ivar_for()","merge()","merge()","merge()","merge!()","merge!()","method_for_action()","method_for_action()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_name()","method_names()","middleware()","middleware()","midnight()","midnight()","midnight()","migrate()","migrate()","migrations_paths()","mime_type()","mime_type()","mime_type()","minimum()","minus_with_coercion()","minus_without_coercion()","minus_without_duration()","minute()","minutes()","missing_name()","missing_name?()","model_name()","model_name()","modules_for_helpers()","monday()","monday()","month()","months()","months_ago()","months_ago()","months_since()","months_since()","ms()","multipart=()","multiple_of?()","mute()","mysql2_connection()","name()","name()","native_database_types()","native_database_types()","navigation_behavior()","navigation_location()","nested_under_indifferent_access()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new?()","new_constants()","new_element_path()","new_element_path()","new_from_hash_copying_default()","new_from_hash_copying_default()","new_record?()","new_record?()","next_element()","next_migration_number()","next_month()","next_month()","next_selector()","next_week()","next_week()","next_year()","next_year()","nonce()","normalize()","normalize()","notify_observers()","now()","nth_child()","number_field()","number_field_tag()","number_to_currency()","number_to_human()","number_to_human_size()","number_to_percentage()","number_to_phone()","number_with_delimiter()","number_with_precision()","object()","observe()","observed_class()","observed_classes()","observed_classes()","observer_class_for()","observer_instances()","observers()","observers=()","odd?()","offset()","on_cdata_block()","on_characters()","on_end_document()","on_end_element()","on_load()","on_start_document()","on_start_element()","only()","only_child()","opaque()","open_log()","open_transactions()","option_groups_from_collection_for_select()","options_for()","options_for_select()","options_from_collection_for_select()","options_include_default?()","ord()","ord()","order()","ordinalize()","ordinalize()","orig_delete()","original_concat()","output_filename()","output_filename()","output_filename()","outside_transaction?()","outside_transaction?()","overlaps?()","param_key()","parameterize()","parameterize()","paramify_values()","params()","params=()","parent()","parent_name()","parent_of?()","parents()","parse()","parse()","parse()","parse_error()","parse_raw_value_as_a_number()","parse_raw_value_as_an_integer()","parser()","password()","password=()","password=()","password=()","password_field()","password_field_tag()","past?()","past?()","past?()","past?()","path()","path()","path_to_audio()","path_to_image()","path_to_javascript()","path_to_stylesheet()","path_to_video()","pending()","perform_validations()","performed?()","period()","period_for_local()","period_for_utc()","persisted?()","persisted?()","petabyte()","petabytes()","phone_field()","phone_field_tag()","pk_and_sequence_for()","plural()","plural()","pluralize()","pluralize()","pluralize()","pluralize_table_names()","pop_modules()","post()","post()","post()","post()","postgresql_version()","precisionless_round()","prefetch_primary_key?()","prefix()","prefix=()","prefix_source()","preload()","prepare_controller_class()","presence()","present?()","prev_month()","prev_month()","prev_week()","prev_week()","prev_year()","prev_year()","previous_changes()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key=()","primary_key_prefix_type()","prime_cache()","process()","process()","process()","process_action()","process_action()","process_action()","process_attributes_for()","process_node()","process_node()","process_node()","process_node()","process_view_paths()","process_with_new_base_test()","profile()","protect_against_forgery?()","protect_from_forgery()","protected_attributes()","provide()","proxy()","proxy=()","proxy=()","proxy_class()","proxy_class=()","prune()","pruning?()","public_path()","publish()","publish()","put()","put()","put()","put()","query()","query_attribute()","quietly()","quote()","quote()","quote()","quote_column_name()","quote_string()","quote_string()","quote_table_name()","quote_table_name()","quote_table_name()","quoted_columns_for_index()","quoted_columns_for_index()","quoted_columns_for_index()","quoted_date()","quoted_false()","quoted_false()","quoted_false()","quoted_locking_column()","quoted_primary_key()","quoted_table_name()","quoted_true()","quoted_true()","quoted_true()","radio_button()","radio_button()","radio_button_checked?()","radio_button_tag()","raise()","range_field()","range_field_tag()","raw()","raw_connection()","raw_value()","raw_write_attribute()","read()","read_attribute()","read_attribute_before_type_cast()","read_entry()","read_entry()","read_fragment()","read_multi()","read_multi()","readable_inspect()","readable_inspect()","readonly()","readonly!()","readonly?()","readonly_attributes()","receive()","reconnect!()","reconnect!()","reconnect!()","reconnect!()","record()","record()","record()","record_key_for_dom_id()","recreate_database()","recycle!()","recycle!()","redefine_method()","redirect_to()","redirect_to()","redirect_to()","redirect_to()","references()","references()","reflect_on_aggregation()","reflect_on_all_aggregations()","reflect_on_all_associations()","reflect_on_all_autosave_associations()","reflect_on_association()","refresh()","register_interceptor()","register_interceptors()","register_javascript_expansion()","register_observer()","register_observers()","register_stylesheet_expansion()","regular_update()","regular_update()","regular_writer()","regular_writer()","reinit_with()","release_connection()","release_savepoint()","release_savepoint()","release_savepoint()","release_savepoint()","release_savepoint()","reload()","reload()","reload()","reload()","reloader()","remember_transaction_record_state()","remove()","remove()","remove_belongs_to()","remove_by_id()","remove_column()","remove_column_sql()","remove_columns()","remove_connection()","remove_connection()","remove_filters!()","remove_index()","remove_index()","remove_index_sql()","remove_multiparameter_id()","remove_possible_method()","remove_references()","remove_root()","remove_silencers!()","remove_timestamps()","remove_timestamps()","remove_timestamps_sql()","rename()","rename_column()","rename_column()","rename_column()","rename_column_sql()","rename_index()","rename_index()","rename_key()","rename_table()","rename_table()","rename_table()","rename_table()","rename_table()","render()","render()","render()","render()","render()","render()","render()","render_body()","render_collection()","render_partial()","render_template()","render_to_body()","render_to_body()","render_to_string()","reorder()","reorder_characters()","report()","repository()","request()","request_http_basic_authentication()","request_http_digest_authentication()","request_http_token_authentication()","requests()","requests()","require_fixture_classes()","require_library_or_gem()","require_tzinfo()","requires_reloading?()","requires_reloading?()","requires_reloading?()","rescue_action()","rescue_action_in_public!()","rescue_action_without_handler()","rescue_from()","rescue_with_handler()","rescue_with_handler()","reset()","reset!()","reset!()","reset!()","reset!()","reset!()","reset_cache()","reset_callbacks()","reset_column_information()","reset_counters()","reset_cycle()","reset_locking_column()","reset_runtime()","reset_sequence!()","reset_session()","resource_location()","resourceful?()","respond()","respond_to()","respond_to()","respond_to()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to_without_attributes?()","respond_to_without_attributes?()","respond_with()","response_body=()","response_body=()","responses()","restore_transaction_record_state()","retrieve_autoindex()","retrieve_connection()","retrieve_connection_pool()","retrieve_object()","reverse()","reverse_merge()","reverse_merge()","reverse_merge()","reverse_merge!()","reverse_merge!()","reverse_merge!()","reverse_order()","reverse_update()","rfc2822()","rfc3339()","rfc822()","rindex()","rjust()","rollback_active_record_state!()","rollback_db_transaction()","rollback_db_transaction()","rollback_db_transaction()","rollback_to_savepoint()","rollback_to_savepoint()","rollback_to_savepoint()","rollback_to_savepoint()","rollback_to_savepoint()","rollback_transaction_records()","root()","round()","route_key()","rstrip()","run()","run()","run()","run()","run()","run()","run()","run()","run_callbacks()","run_gc()","run_in_isolation()","run_in_isolation()","run_in_transaction?()","run_load_hooks()","run_profile()","run_test()","run_test()","run_validations!()","run_validations!()","run_warmup()","runtime()","runtime=()","safe_concat()","safe_concat()","safe_join()","sample()","sanitize()","sanitize()","sanitize()","sanitize()","sanitize_conditions()","sanitize_css()","sanitize_css()","sanitize_dom_id()","sanitize_for_mass_assignment()","sanitize_limit()","sanitize_sql()","sanitize_sql_array()","sanitize_sql_for_assignment()","sanitize_sql_for_conditions()","sanitize_sql_hash()","sanitize_sql_hash_for_assignment()","sanitize_sql_hash_for_conditions()","sanitizeable?()","sanitizeable?()","save()","save()","save()","save()","save!()","save!()","save!()","save_with_validation()","say()","say_with_time()","schema()","schema()","schema=()","schema_format()","schema_search_path()","schema_search_path=()","scope()","scope_for_create()","scoped()","scoping()","search_field()","search_field_tag()","second()","second()","seconds()","seconds_since_midnight()","seconds_since_midnight()","seconds_to_utc_offset()","secret_token()","select()","select()","select()","select()","select()","select()","select_all()","select_all()","select_date()","select_datetime()","select_day()","select_first()","select_hour()","select_minute()","select_month()","select_one()","select_rows()","select_rows()","select_rows()","select_rows()","select_rows()","select_second()","select_tag()","select_time()","select_value()","select_values()","select_year()","selector()","send_action()","send_data()","send_data()","send_data()","send_file()","send_file()","send_file()","sequence_name=()","serial_sequence()","serializable_hash()","serializable_hash()","serialize()","session_auth=()","session_id_column()","set()","set_callback()","set_content_type()","set_enablement()","set_fixture_class()","set_inheritance_column()","set_locking_column()","set_logger()","set_prefix()","set_primary_key()","set_sequence_name()","set_standard_conforming_strings()","set_table_name()","setup()","setup()","setup()","setup()","setup()","setup_controller_request_and_response()","setup_fixture_accessors()","setup_fixtures()","setup_subscriptions()","setup_with_controller()","show_variable()","show_variable()","silence()","silence()","silence()","silence()","silence!()","silence_stream()","silence_warnings()","silencer()","simple_format()","simple_selector()","since()","since()","since()","since()","since()","since()","singleton_class()","singular()","singular()","singularize()","singularize()","site()","site=()","site=()","size()","size()","size()","size()","size()","skip_callback()","skip_default_locale!()","slice()","slice()","slice!()","split()","split()","sql()","sql_for_insert()","sql_for_insert()","sql_query_length()","sqlite_version()","squish()","squish!()","ssl_options()","ssl_options=()","ssl_options=()","stale?()","start_document()","start_element()","start_processing()","start_transaction()","stats()","status()","status=()","step_with_blockless()","sti_name()","store()","store()","store()","stream()","strftime()","stringify_keys()","stringify_keys()","stringify_keys()","stringify_keys!()","stringify_keys!()","stringify_keys!()","strip()","strip_heredoc()","strip_links()","strip_tags()","structure_dump()","structure_dump()","stylesheet_link_tag()","stylesheet_path()","submit()","submit_tag()","subscribe()","subscribe()","substitute_at()","substitute_at()","substitute_at()","success?()","sum()","sum()","sunday()","superclass_delegating_accessor()","supports_add_column?()","supports_bulk_alter?()","supports_count_distinct?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_insert_with_returning?()","supports_migrations?()","supports_migrations?()","supports_migrations?()","supports_primary_key?()","supports_primary_key?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_statement_cache?()","supports_statement_cache?()","supports_statement_cache?()","supports_statement_cache?()","supports_streaming?()","supports_streaming?()","suppress()","suppress_messages()","symbolize_keys()","symbolize_keys()","symbolize_keys()","symbolize_keys!()","symbolized_base_class()","symbolized_sti_name()","synchronize()","t()","table_alias_for()","table_alias_length()","table_alias_length()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_name()","table_name()","table_name=()","table_name_length()","table_name_prefix()","table_name_suffix()","table_rows()","table_structure()","tableize()","tableize()","tables()","tag()","tag()","teardown()","teardown()","teardown_fixtures()","teardown_subscriptions()","telephone_field()","telephone_field_tag()","template_exists?()","terabyte()","terabytes()","test()","test_errors_aref()","test_errors_full_messages()","test_model_naming()","test_persisted?()","test_to_key()","test_to_param()","test_valid?()","tests()","tests()","text_area()","text_area_tag()","text_field()","text_field_tag()","third()","tidy_bytes()","tidy_bytes()","time()","time_ago_in_words()","time_select()","time_select()","time_tag()","time_with_block()","time_with_datetime_fallback()","time_zone_options_for_select()","time_zone_select()","time_zone_select()","timeout()","timeout=()","timeout=()","timestamped_migrations()","timestamps()","timestamps()","titlecase()","titlecase()","titleize()","titleize()","titleize()","to()","to()","to_a()","to_a()","to_a()","to_boolean_select_tag()","to_check_box_tag()","to_content_tag()","to_d()","to_date()","to_date()","to_date()","to_date()","to_datetime()","to_datetime()","to_datetime()","to_datetime()","to_default_s()","to_default_s()","to_default_s()","to_default_s()","to_default_s()","to_f()","to_f()","to_format()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_hash()","to_hash()","to_hash()","to_hash()","to_html()","to_i()","to_i()","to_input_field_tag()","to_js()","to_json()","to_key()","to_key()","to_label_tag()","to_model()","to_model()","to_number_field_tag()","to_options()","to_options!()","to_options!()","to_options!()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_path()","to_query()","to_query()","to_query()","to_radio_button_tag()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_sentence()","to_sql()","to_sql()","to_sql()","to_tag()","to_text_area_tag()","to_time()","to_time()","to_time()","to_time()","to_time()","to_time_in_current_zone()","to_xml()","to_xml()","to_xml()","to_xml()","to_xml()","to_xml()","to_yaml()","to_yaml()","to_yaml()","today()","today?()","today?()","today?()","toggle()","toggle!()","token_and_options()","tokenize()","tokenize()","tomorrow()","tomorrow()","tomorrow()","touch()","transaction()","transaction()","transaction()","transaction()","transaction_include_action?()","transaction_joinable=()","transaction_record_state()","translate()","translate_exception()","translate_exception()","translate_exception()","translate_exception()","translate_exception()","transliterate()","trigger()","trigger()","truncate()","truncate()","try()","try()","try_to_load_dependency()","tsvector()","tv_sec()","type_cast()","type_cast()","type_cast()","type_to_sql()","type_to_sql()","type_to_sql()","u_unpack()","uncached()","uncached()","uncountable()","uncountable?()","undefine_attribute_methods()","undefine_attribute_methods()","underscore()","underscore()","unescape()","unescape_bytea()","uniq_by()","uniq_by!()","unmemoize_all()","unserializable_attribute?()","unserialize_attribute()","unsubscribe()","unsubscribe()","until()","until()","up()","upcase()","update()","update()","update()","update()","update()","update_all()","update_attribute()","update_attribute()","update_attributes()","update_attributes()","update_attributes!()","update_column()","update_counters()","update_counters()","update_details()","update_sql()","update_sql()","update_sql()","updated()","updated_at()","url_field()","url_field_tag()","url_for()","url_for()","url_options()","url_options()","us_zones()","use()","use()","use_renderer()","use_renderers()","use_zone()","usec()","user()","user=()","user=()","user_name_and_password()","uses_transaction()","uses_transaction?()","using_limitable_reflections?()","utc()","utc()","utc?()","utc?()","utc_offset()","utc_offset()","utc_offset()","utc_time()","utc_to_local()","valid?()","valid?()","valid?()","valid_alter_table_options()","valid_scope_name?()","validate()","validate()","validate()","validate()","validate_digest_response()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_fallbacks()","validate_nonce()","validates()","validates_acceptance_of()","validates_associated()","validates_confirmation_of()","validates_each()","validates_exclusion_of()","validates_format_of()","validates_inclusion_of()","validates_length_of()","validates_numericality_of()","validates_presence_of()","validates_size_of()","validates_uniqueness_of()","validates_with()","validates_with()","validators()","validators_on()","value()","value()","value()","value_before_type_cast()","value_before_type_cast()","values()","values_at()","values_at()","verified_request?()","verify()","verify!()","verify_authenticity_token()","version()","video_path()","video_tag()","view_paths=()","visible_action?()","wait()","wait()","wants?()","warn()","warn!()","watch()","watch_namespaces()","week()","weeks()","weeks_ago()","weeks_ago()","where()","where_values_hash()","with()","with_backend()","with_backend()","with_connection()","with_exclusive_scope()","with_fallbacks()","with_gc_stats()","with_indifferent_access()","with_indifferent_access()","with_indifferent_access()","with_layout_format()","with_local_cache()","with_options()","with_output_file()","with_scope()","with_transaction_returning_status()","with_warnings()","without()","without_modules()","word_wrap()","wrap()","wrap_parameters()","write()","write()","write_attribute()","write_entry()","write_entry()","write_fragment()","xhr()","xml()","xml()","xml_http_request()","xmlschema()","xmlschema()","xmlschema()","year()","years()","years_ago()","years_ago()","years_since()","years_since()","yesterday()","yesterday()","yesterday()","zone()","zone()","zone=()","zones_map()","changelog","mit-license","readme","changelog","mit-license","readme","changelog","mit-license","readme","changelog","readme","changelog","readme","changelog","readme","changelog","readme","readme"],"longSearchIndex":["actioncontroller","actioncontroller::base","actioncontroller::caching","actioncontroller::caching::actions","actioncontroller::caching::actions::actioncachepath","actioncontroller::caching::actions::classmethods","actioncontroller::caching::configmethods","actioncontroller::caching::fragments","actioncontroller::caching::pages","actioncontroller::caching::pages::classmethods","actioncontroller::caching::sweeping","actioncontroller::compatibility","actioncontroller::conditionalget","actioncontroller::cookies","actioncontroller::datastreaming","actioncontroller::flash","actioncontroller::forcessl","actioncontroller::forcessl::classmethods","actioncontroller::head","actioncontroller::helpers","actioncontroller::helpers::classmethods","actioncontroller::hideactions","actioncontroller::hideactions::classmethods","actioncontroller::httpauthentication","actioncontroller::httpauthentication::basic","actioncontroller::httpauthentication::basic::controllermethods","actioncontroller::httpauthentication::basic::controllermethods::classmethods","actioncontroller::httpauthentication::digest","actioncontroller::httpauthentication::digest::controllermethods","actioncontroller::httpauthentication::token","actioncontroller::httpauthentication::token::controllermethods","actioncontroller::implicitrender","actioncontroller::instrumentation","actioncontroller::instrumentation::classmethods","actioncontroller::logsubscriber","actioncontroller::metal","actioncontroller::middleware","actioncontroller::middleware::actionmiddleware","actioncontroller::mimeresponds","actioncontroller::mimeresponds::classmethods","actioncontroller::paramswrapper","actioncontroller::paramswrapper::classmethods","actioncontroller::rackdelegation","actioncontroller::railtie","actioncontroller::railties","actioncontroller::railties::paths","actioncontroller::recordidentifier","actioncontroller::redirecting","actioncontroller::renderers","actioncontroller::renderers::all","actioncontroller::renderers::classmethods","actioncontroller::rendering","actioncontroller::requestforgeryprotection","actioncontroller::requestforgeryprotection::classmethods","actioncontroller::rescue","actioncontroller::responder","actioncontroller::sessionmanagement","actioncontroller::sessionmanagement::classmethods","actioncontroller::streaming","actioncontroller::streaming::classmethods","actioncontroller::templateassertions","actioncontroller::testcase","actioncontroller::testcase::behavior","actioncontroller::testcase::behavior::classmethods","actioncontroller::testcase::raiseactionexceptions","actioncontroller::testresponse","actioncontroller::testing","actioncontroller::testing::classmethods","actioncontroller::urlfor","actionmailer","actionmailer::base","actionview","actionview::actionview","actionview::actionview::actionview","actionview::actionview::actionview::base","actionview::base","actionview::context","actionview::filesystemresolver","actionview::fixtureresolver","actionview::helpers","actionview::helpers::activemodelhelper","actionview::helpers::activemodelinstancetag","actionview::helpers::assetpaths","actionview::helpers::assettaghelper","actionview::helpers::assettaghelper::assetincludetag","actionview::helpers::assettaghelper::javascriptincludetag","actionview::helpers::assettaghelper::javascripttaghelpers","actionview::helpers::assettaghelper::javascripttaghelpers::classmethods","actionview::helpers::assettaghelper::stylesheetincludetag","actionview::helpers::assettaghelper::stylesheettaghelpers","actionview::helpers::assettaghelper::stylesheettaghelpers::classmethods","actionview::helpers::atomfeedhelper","actionview::helpers::atomfeedhelper::atombuilder","actionview::helpers::atomfeedhelper::atomfeedbuilder","actionview::helpers::cachehelper","actionview::helpers::capturehelper","actionview::helpers::csrfhelper","actionview::helpers::datehelper","actionview::helpers::debughelper","actionview::helpers::formbuilder","actionview::helpers::formhelper","actionview::helpers::formoptionshelper","actionview::helpers::formtaghelper","actionview::helpers::instancetag","actionview::helpers::javascripthelper","actionview::helpers::numberhelper","actionview::helpers::numberhelper::invalidnumbererror","actionview::helpers::outputsafetyhelper","actionview::helpers::recordtaghelper","actionview::helpers::renderinghelper","actionview::helpers::sanitizehelper","actionview::helpers::taghelper","actionview::helpers::texthelper","actionview::helpers::translationhelper","actionview::helpers::urlhelper","actionview::logsubscriber","actionview::lookupcontext","actionview::lookupcontext::details","actionview::lookupcontext::viewpaths","actionview::nullresolver","actionview::railtie","actionview::renderer","actionview::resolver","actionview::resolver::path","actionview::template","actionview::template::actionview","actionview::template::actionview::template","actionview::template::actionview::template::template","actionview::template::actionview::template::template::handler","actionview::template::handlers","actionview::template::handlers::builder","actionview::template::handlers::compilable","actionview::template::handlers::compilable::classmethods","actionview::template::handlers::erb","actionview::template::handlers::erubis","actionview::testcase","actionview::testcase::behavior","actionview::testcase::behavior::classmethods","actionview::testcase::behavior::locals","actionview::testcase::testcontroller","activemodel","activemodel::attributemethods","activemodel::attributemethods::classmethods","activemodel::attributemethods::classmethods::attributemethodmatcher","activemodel::blockvalidator","activemodel::callbacks","activemodel::conversion","activemodel::dirty","activemodel::eachvalidator","activemodel::errors","activemodel::lint","activemodel::lint::tests","activemodel::massassignmentsecurity","activemodel::massassignmentsecurity::blacklist","activemodel::massassignmentsecurity::classmethods","activemodel::massassignmentsecurity::permissionset","activemodel::massassignmentsecurity::sanitizer","activemodel::massassignmentsecurity::whitelist","activemodel::missingattributeerror","activemodel::name","activemodel::naming","activemodel::observer","activemodel::observerarray","activemodel::observing","activemodel::observing::classmethods","activemodel::securepassword","activemodel::securepassword::classmethods","activemodel::securepassword::instancemethodsonactivation","activemodel::serialization","activemodel::serializers","activemodel::serializers::json","activemodel::serializers::xml","activemodel::translation","activemodel::validations","activemodel::validations::acceptancevalidator","activemodel::validations::callbacks","activemodel::validations::callbacks::classmethods","activemodel::validations::classmethods","activemodel::validations::confirmationvalidator","activemodel::validations::exclusionvalidator","activemodel::validations::formatvalidator","activemodel::validations::helpermethods","activemodel::validations::inclusionvalidator","activemodel::validations::lengthvalidator","activemodel::validations::numericalityvalidator","activemodel::validations::presencevalidator","activemodel::validations::withvalidator","activemodel::validator","activerecord","activerecord::activerecorderror","activerecord::adapternotfound","activerecord::adapternotspecified","activerecord::aggregations","activerecord::aggregations::classmethods","activerecord::associationtypemismatch","activerecord::associations","activerecord::associations::classmethods","activerecord::attributeassignmenterror","activerecord::attributemethods","activerecord::attributemethods::beforetypecast","activerecord::attributemethods::classmethods","activerecord::attributemethods::dirty","activerecord::attributemethods::primarykey","activerecord::attributemethods::primarykey::classmethods","activerecord::attributemethods::query","activerecord::attributemethods::read","activerecord::attributemethods::read::classmethods","activerecord::attributemethods::timezoneconversion","activerecord::attributemethods::timezoneconversion::classmethods","activerecord::attributemethods::write","activerecord::attributemethods::write::classmethods","activerecord::autosaveassociation","activerecord::autosaveassociation::classmethods","activerecord::base","activerecord::batches","activerecord::calculations","activerecord::callbacks","activerecord::coders","activerecord::coders::yamlcolumn","activerecord::configurationerror","activerecord::connectionadapters","activerecord::connectionadapters::abstractadapter","activerecord::connectionadapters::column","activerecord::connectionadapters::column::format","activerecord::connectionadapters::connectionhandler","activerecord::connectionadapters::connectionmanagement","activerecord::connectionadapters::connectionpool","activerecord::connectionadapters::databaselimits","activerecord::connectionadapters::databasestatements","activerecord::connectionadapters::mysql2adapter","activerecord::connectionadapters::mysql2column","activerecord::connectionadapters::mysqladapter","activerecord::connectionadapters::postgresqladapter","activerecord::connectionadapters::postgresqladapter::tabledefinition","activerecord::connectionadapters::postgresqlcolumn","activerecord::connectionadapters::querycache","activerecord::connectionadapters::quoting","activerecord::connectionadapters::sqliteadapter","activerecord::connectionadapters::sqliteadapter::version","activerecord::connectionadapters::schemastatements","activerecord::connectionadapters::table","activerecord::connectionadapters::tabledefinition","activerecord::connectionnotestablished","activerecord::connectiontimeouterror","activerecord::countercache","activerecord::dangerousattributeerror","activerecord::dynamicfindermatch","activerecord::dynamicscopematch","activerecord::findermethods","activerecord::fixtures","activerecord::hasmanythroughnestedassociationsarereadonly","activerecord::identitymap","activerecord::identitymap::middleware","activerecord::invalidforeignkey","activerecord::irreversiblemigration","activerecord::locking","activerecord::locking::optimistic","activerecord::locking::optimistic::classmethods","activerecord::locking::pessimistic","activerecord::logsubscriber","activerecord::migration","activerecord::migration::commandrecorder","activerecord::migrationproxy","activerecord::multiparameterassignmenterrors","activerecord::namedscope","activerecord::namedscope::classmethods","activerecord::nestedattributes","activerecord::nestedattributes::classmethods","activerecord::nestedattributes::toomanyrecords","activerecord::observer","activerecord::persistence","activerecord::preparedstatementinvalid","activerecord::querycache","activerecord::querycache::classmethods","activerecord::querymethods","activerecord::railtie","activerecord::railties","activerecord::railties::controllerruntime","activerecord::railties::controllerruntime::classmethods","activerecord::readonlyrecord","activerecord::recordinvalid","activerecord::recordnotfound","activerecord::recordnotsaved","activerecord::recordnotunique","activerecord::reflection","activerecord::reflection::classmethods","activerecord::reflection::macroreflection","activerecord::relation","activerecord::result","activerecord::rollback","activerecord::schema","activerecord::serialization","activerecord::serializationtypemismatch","activerecord::sessionstore","activerecord::sessionstore::session","activerecord::sessionstore::sqlbypass","activerecord::spawnmethods","activerecord::staleobjecterror","activerecord::statementinvalid","activerecord::testfixtures","activerecord::testfixtures::classmethods","activerecord::throwresult","activerecord::timestamp","activerecord::transactions","activerecord::transactions::classmethods","activerecord::unknownattributeerror","activerecord::validations","activerecord::validations::associatedvalidator","activerecord::validations::classmethods","activerecord::validations::uniquenessvalidator","activerecord::wrappeddatabaseexception","activeresource","activeresource::badrequest","activeresource::base","activeresource::clienterror","activeresource::connection","activeresource::custommethods","activeresource::custommethods::classmethods","activeresource::custommethods::instancemethods","activeresource::errors","activeresource::forbiddenaccess","activeresource::formats","activeresource::formats::jsonformat","activeresource::formats::xmlformat","activeresource::httpmock","activeresource::invalidrequesterror","activeresource::logsubscriber","activeresource::missingprefixparam","activeresource::observing","activeresource::railtie","activeresource::request","activeresource::resourceconflict","activeresource::resourcegone","activeresource::resourcenotfound","activeresource::response","activeresource::sslerror","activeresource::servererror","activeresource::timeouterror","activeresource::unauthorizedaccess","activeresource::validations","activesupport","activesupport::autoload","activesupport::backtracecleaner","activesupport::base64","activesupport::basicobject","activesupport::benchmarkable","activesupport::bufferedlogger","activesupport::bufferedlogger::severity","activesupport::cache","activesupport::cache::compressedmemcachestore","activesupport::cache::entry","activesupport::cache::filestore","activesupport::cache::memcachestore","activesupport::cache::memorystore","activesupport::cache::store","activesupport::cache::strategy","activesupport::cache::strategy::localcache","activesupport::cache::strategy::localcache::localstore","activesupport::cache::synchronizedmemorystore","activesupport::callbacks","activesupport::callbacks::classmethods","activesupport::concern","activesupport::configurable","activesupport::configurable::classmethods","activesupport::configurable::configuration","activesupport::dependencies","activesupport::dependencies::classcache","activesupport::dependencies::watchstack","activesupport::deprecation","activesupport::descendantstracker","activesupport::duration","activesupport::fileupdatechecker","activesupport::filewatcher","activesupport::filewatcher::backend","activesupport::gzip","activesupport::gzip::stream","activesupport::hashwithindifferentaccess","activesupport::inflector","activesupport::inflector::inflections","activesupport::inheritableoptions","activesupport::json","activesupport::json::encoding","activesupport::json::encoding::circularreferenceerror","activesupport::json::encoding::encoder","activesupport::json::variable","activesupport::logsubscriber","activesupport::logsubscriber::testhelper","activesupport::logsubscriber::testhelper::mocklogger","activesupport::memoizable","activesupport::memoizable::instancemethods","activesupport::messageencryptor","activesupport::messageencryptor::invalidmessage","activesupport::messageverifier","activesupport::messageverifier::invalidsignature","activesupport::multibyte","activesupport::multibyte::chars","activesupport::multibyte::encodingerror","activesupport::multibyte::unicode","activesupport::multibyte::unicode::codepoint","activesupport::multibyte::unicode::unicodedatabase","activesupport::notifications","activesupport::notifications::event","activesupport::notifications::fanout","activesupport::notifications::instrumenter","activesupport::orderedoptions","activesupport::railtie","activesupport::rescuable","activesupport::rescuable::classmethods","activesupport::safebuffer","activesupport::safebuffer::safeconcaterror","activesupport::stringinquirer","activesupport::testcase","activesupport::testing","activesupport::testing::assertions","activesupport::testing::declarative","activesupport::testing::isolation","activesupport::testing::isolation::forking","activesupport::testing::isolation::minitest","activesupport::testing::isolation::subprocess","activesupport::testing::isolation::testunit","activesupport::testing::pending","activesupport::testing::performance","activesupport::testing::performance::benchmarker","activesupport::testing::performance::forclassictestunit","activesupport::testing::performance::forminitest","activesupport::testing::performance::metrics","activesupport::testing::performance::metrics::amount","activesupport::testing::performance::metrics::base","activesupport::testing::performance::metrics::cputime","activesupport::testing::performance::metrics::digitalinformationunit","activesupport::testing::performance::metrics::gcruns","activesupport::testing::performance::metrics::gctime","activesupport::testing::performance::metrics::memory","activesupport::testing::performance::metrics::objects","activesupport::testing::performance::metrics::processtime","activesupport::testing::performance::metrics::time","activesupport::testing::performance::metrics::usertime","activesupport::testing::performance::metrics::walltime","activesupport::testing::performance::performer","activesupport::testing::performance::profiler","activesupport::testing::proxytestresult","activesupport::testing::remoteerror","activesupport::testing::setupandteardown","activesupport::testing::setupandteardown::classmethods","activesupport::testing::setupandteardown::forclassictestunit","activesupport::testing::setupandteardown::forminitest","activesupport::timewithzone","activesupport::timezone","activesupport::xmlmini","activesupport::xmlmini_libxmlsax","activesupport::xmlmini_libxmlsax::hashbuilder","activesupport::xmlmini_nokogirisax","activesupport::xmlmini_nokogirisax::hashbuilder","arjdbcmysql","arjdbcmysql::error","array","benchmark","bigdecimal","class","date","datetime","erb","erb::util","enumerable","falseclass","file","fixturesfilenotfound","float","html","html::fullsanitizer","html::linksanitizer","html::sanitizer","html::selector","html::tag","html::whitelistsanitizer","hash","i18n","i18n::exceptionhandler","i18n::railtie","integer","kernel","loaderror","logger","logger::simpleformatter","module","mysql","mysql::result","mysql::stmt","mysql::time","nameerror","nilclass","numeric","object","object::hashwithindifferentaccess","object::missingsourcefile","process","rails","range","regexp","string","struct","symbol","test","test::unit","test::unit::collector","test::unit::collector::objectspace","time","trueclass","uri","activemodel::massassignmentsecurity::permissionset#+()","activesupport::duration#+()","activesupport::multibyte::chars#+()","activesupport::safebuffer#+()","activesupport::timewithzone#+()","activesupport::duration#-()","activesupport::timewithzone#-()","time#-()","activesupport::safebuffer#<<()","activerecord::base#<=>()","activerecord::connectionadapters::sqliteadapter::version#<=>()","activesupport::multibyte::chars#<=>()","activesupport::timewithzone#<=>()","activesupport::timezone#<=>()","datetime#<=>()","time#<=>()","actionview::filesystemresolver#==()","activerecord::base#==()","activerecord::reflection::macroreflection#==()","activerecord::relation#==()","activeresource::base#==()","activeresource::request#==()","activeresource::response#==()","activesupport::duration#==()","activerecord::base::===()","activesupport::multibyte::unicode::unicodedatabase#===()","time::===()","activesupport::multibyte::chars#=~()","activesupport::timezone#=~()","date#>>()","activemodel::errors#[]()","activerecord::connectionadapters::tabledefinition#[]()","activerecord::fixtures#[]()","activeresource::formats::[]()","activeresource::response#[]()","activesupport::dependencies::classcache#[]()","activesupport::multibyte::chars#[]()","activesupport::orderedoptions#[]()","activesupport::testing::performance::metrics::[]()","activesupport::timezone::[]()","activemodel::errors#[]=()","activerecord::fixtures#[]=()","activeresource::response#[]=()","activesupport::dependencies::classcache#[]=()","activesupport::hashwithindifferentaccess#[]=()","activesupport::hashwithindifferentaccess#[]=()","activesupport::multibyte::chars#[]=()","activesupport::orderedoptions#[]=()","activesupport::testing::proxytestresult#__replay__()","activesupport::xmlmini#_dasherize()","time#_dump()","time#_dump_without_utc_flag()","time#_dump_without_zone()","activesupport::orderedoptions#_get()","actioncontroller::compatibility#_handle_method_missing()","actioncontroller::renderers#_handle_render_options()","actionview::context#_layout_for()","actionview::helpers::renderinghelper#_layout_for()","time::_load()","time::_load_without_utc_flag()","time::_load_without_zone()","actioncontroller::compatibility#_normalize_options()","bigdecimal#_original_to_s()","activesupport::xmlmini#_parse_file()","actionview::context#_prepare_context()","activerecord::attributemethods::read#_read_attribute()","actionview::helpers::urlhelper#_routes_context()","activesupport::testing::isolation#_run_class_setup()","actioncontroller::caching::actions#_save_fragment()","actionview::lookupcontext::details#_set_detail()","actioncontroller::paramswrapper::classmethods#_set_wrapper_defaults()","activemodel::validations::classmethods#_validates_default_keys()","activerecord::base::abstract_class?()","activerecord::nestedattributes::classmethods#accepts_nested_attributes_for()","activemodel::massassignmentsecurity::classmethods#accessible_attributes()","actioncontroller::metal::action()","actioncontroller::hideactions::classmethods#action_methods()","activerecord::connectionadapters::abstractadapter#active?()","activerecord::connectionadapters::mysql2adapter#active?()","activerecord::connectionadapters::mysqladapter#active?()","activerecord::connectionadapters::postgresqladapter#active?()","activemodel::massassignmentsecurity::classmethods#active_authorizer()","activemodel::massassignmentsecurity::classmethods#active_authorizers()","activerecord::connectionadapters::connectionpool#active_connection?()","activerecord::connectionadapters::connectionhandler#active_connections?()","object#acts_like?()","date#acts_like_date?()","datetime#acts_like_date?()","activesupport::multibyte::chars#acts_like_string?()","string#acts_like_string?()","activesupport::timewithzone#acts_like_time?()","datetime#acts_like_time?()","time#acts_like_time?()","activerecord::connectionadapters::abstractadapter#adapter_name()","activerecord::connectionadapters::mysql2adapter#adapter_name()","activerecord::connectionadapters::postgresqladapter#adapter_name()","actioncontroller::renderers::add()","activemodel::errors#add()","activerecord::identitymap::add()","activesupport::bufferedlogger#add()","activerecord::connectionadapters::mysql2adapter#add_column()","activerecord::connectionadapters::mysqladapter#add_column()","activerecord::connectionadapters::postgresqladapter#add_column()","activerecord::connectionadapters::schemastatements#add_column()","activerecord::connectionadapters::mysql2adapter#add_column_position!()","activerecord::connectionadapters::mysqladapter#add_column_position!()","activerecord::connectionadapters::mysqladapter#add_column_sql()","activesupport::testing::proxytestresult#add_error()","actionview::template::handlers::erubis#add_expr_escaped()","actionview::template::handlers::erubis#add_expr_literal()","activesupport::backtracecleaner#add_filter()","activerecord::connectionadapters::schemastatements#add_index()","activerecord::connectionadapters::schemastatements#add_index_options()","activerecord::connectionadapters::mysqladapter#add_index_sql()","activerecord::connectionadapters::databasestatements#add_limit_offset!()","activerecord::connectionadapters::mysql2adapter#add_limit_offset!()","activemodel::observing::classmethods#add_observer()","activerecord::observer#add_observer!()","activemodel::errors#add_on_blank()","activemodel::errors#add_on_empty()","actionview::template::handlers::erubis#add_postamble()","actionview::template::handlers::erubis#add_preamble()","actioncontroller::add_renderer()","activesupport::backtracecleaner#add_silencer()","actionview::template::handlers::erubis#add_text()","activerecord::connectionadapters::schemastatements#add_timestamps()","activerecord::connectionadapters::mysqladapter#add_timestamps_sql()","activerecord::transactions#add_to_transaction()","activerecord::connectionadapters::databasestatements#add_transaction_record()","nilclass::add_whiner()","activesupport::timewithzone#advance()","date#advance()","datetime#advance()","time#advance()","activerecord::transactions::classmethods#after_commit()","activerecord::transactions::classmethods#after_rollback()","activemodel::validations::callbacks::classmethods#after_validation()","activerecord::base::aggregate_mapping()","activesupport::duration#ago()","activesupport::timewithzone#ago()","date#ago()","datetime#ago()","numeric#ago()","time#ago()","activemodel::attributemethods::classmethods#alias_attribute()","module#alias_attribute()","module#alias_method_chain()","activerecord::findermethods#all()","activeresource::base::all()","activesupport::timezone::all()","actioncontroller::helpers::classmethods#all_helpers_from_path()","activerecord::migration#announce()","module#anonymous?()","activerecord::relation#any?()","actioncontroller::responder#api_behavior()","actioncontroller::responder#api_location()","activesupport::concern#append_features()","rails::application()","rails::application=()","activerecord::spawnmethods#apply_finder_options()","activerecord::findermethods#apply_join_dependency()","activerecord::querymethods#arel()","activerecord::base::arel_engine()","activerecord::base::arel_table()","activemodel::errors#as_json()","activemodel::serializers::json#as_json()","activesupport::json::encoding::encoder#as_json()","activesupport::json::variable#as_json()","activesupport::timewithzone#as_json()","bigdecimal#as_json()","falseclass#as_json()","nilclass#as_json()","numeric#as_json()","regexp#as_json()","string#as_json()","symbol#as_json()","trueclass#as_json()","activesupport::testing::assertions#assert_blank()","activesupport::testing::assertions#assert_difference()","activesupport::testing::assertions#assert_no_difference()","activesupport::testing::assertions#assert_present()","actioncontroller::templateassertions#assert_template()","hash#assert_valid_keys()","actionview::helpers::assettaghelper::assetincludetag#asset_name()","actionview::helpers::assettaghelper::javascriptincludetag#asset_name()","actionview::helpers::assettaghelper::stylesheetincludetag#asset_name()","actionview::helpers::assettaghelper::assetincludetag#asset_tag()","actionview::helpers::assettaghelper::javascriptincludetag#asset_tag()","actionview::helpers::assettaghelper::stylesheetincludetag#asset_tag()","activerecord::base#assign_attributes()","actioncontroller::compatibility#assign_shortcuts()","activerecord::connectionadapters::schemastatements#assume_migrated_upto_version()","activesupport::timezone#at()","string#at()","date#at_beginning_of_day()","datetime#at_beginning_of_day()","time#at_beginning_of_day()","date#at_beginning_of_month()","time#at_beginning_of_month()","date#at_beginning_of_quarter()","time#at_beginning_of_quarter()","date#at_beginning_of_week()","time#at_beginning_of_week()","date#at_beginning_of_year()","time#at_beginning_of_year()","date#at_end_of_month()","time#at_end_of_month()","date#at_end_of_quarter()","time#at_end_of_quarter()","date#at_end_of_week()","time#at_end_of_week()","date#at_end_of_year()","time#at_end_of_year()","date#at_midnight()","datetime#at_midnight()","time#at_midnight()","actionview::helpers::atomfeedhelper#atom_feed()","file::atomic_write()","activesupport::logsubscriber::attach_to()","actionmailer::base#attachments()","activemodel::massassignmentsecurity::classmethods#attr_accessible()","module#attr_accessor_with_default()","module#attr_internal()","module#attr_internal_accessor()","module#attr_internal_reader()","module#attr_internal_writer()","activemodel::massassignmentsecurity::classmethods#attr_protected()","activerecord::base::attr_readonly()","activerecord::base#attribute_for_inspect()","html::selector#attribute_match()","activemodel::attributemethods#attribute_method?()","activemodel::validations::classmethods#attribute_method?()","activerecord::base::attribute_method?()","activemodel::attributemethods::classmethods#attribute_method_affix()","activemodel::attributemethods::classmethods#attribute_method_prefix()","activemodel::attributemethods::classmethods#attribute_method_suffix()","activerecord::attributemethods::classmethods#attribute_methods_generated?()","activerecord::base::attribute_names()","activerecord::base#attribute_names()","activerecord::base#attribute_present?()","activerecord::base#attributes()","activerecord::base#attributes=()","activerecord::attributemethods::beforetypecast#attributes_before_type_cast()","activemodel::massassignmentsecurity::classmethods#attributes_protected_by_default()","activemodel::securepassword::classmethods::attributes_protected_by_default()","actionview::helpers::assettaghelper#audio_path()","actionview::helpers::assettaghelper#audio_tag()","activeresource::base::auth_type()","activeresource::base::auth_type=()","activeresource::connection#auth_type=()","actioncontroller::httpauthentication::basic#authenticate()","actioncontroller::httpauthentication::digest#authenticate()","actioncontroller::httpauthentication::token#authenticate()","activemodel::securepassword::instancemethodsonactivation#authenticate()","actioncontroller::httpauthentication::basic::controllermethods#authenticate_or_request_with_http_basic()","actioncontroller::httpauthentication::digest::controllermethods#authenticate_or_request_with_http_digest()","actioncontroller::httpauthentication::token::controllermethods#authenticate_or_request_with_http_token()","actioncontroller::httpauthentication::basic::controllermethods#authenticate_with_http_basic()","actioncontroller::httpauthentication::digest::controllermethods#authenticate_with_http_digest()","actioncontroller::httpauthentication::token::controllermethods#authenticate_with_http_token()","actioncontroller::httpauthentication::digest#authentication_header()","actioncontroller::httpauthentication::basic#authentication_request()","actioncontroller::httpauthentication::digest#authentication_request()","actioncontroller::httpauthentication::token#authentication_request()","actionview::helpers::assettaghelper#auto_discovery_link_tag()","activesupport::bufferedlogger#auto_flush()","activesupport::bufferedlogger#auto_flushing=()","activesupport::autoload#autoload()","activesupport::autoload#autoload_at()","activesupport::autoload#autoload_under()","activesupport::autoload#autoloads()","activerecord::calculations#average()","activesupport::json::backend()","activesupport::json::backend=()","activesupport::xmlmini#backend=()","rails::backtrace_cleaner()","activerecord::dynamicfindermatch#bang?()","activerecord::base::base_class()","activerecord::migrationproxy#basename()","activerecord::persistence#becomes()","actioncontroller::testing::classmethods#before_filters()","activemodel::validations::callbacks::classmethods#before_validation()","activerecord::connectionadapters::databasestatements#begin_db_transaction()","activerecord::connectionadapters::mysql2adapter#begin_db_transaction()","activerecord::connectionadapters::postgresqladapter#begin_db_transaction()","date#beginning_of_day()","datetime#beginning_of_day()","time#beginning_of_day()","date#beginning_of_month()","time#beginning_of_month()","date#beginning_of_quarter()","time#beginning_of_quarter()","date#beginning_of_week()","time#beginning_of_week()","date#beginning_of_year()","time#beginning_of_year()","activesupport::deprecation::behavior()","activesupport::deprecation::behavior=()","activerecord::associations::classmethods#belongs_to()","activerecord::connectionadapters::table#belongs_to()","activerecord::connectionadapters::tabledefinition#belongs_to()","activesupport::benchmarkable#benchmark()","activesupport::testing::performance::metrics::base#benchmark()","activesupport::timewithzone#between?()","activerecord::querymethods#bind()","activemodel::errors#blank?()","falseclass#blank?()","nilclass#blank?()","object#blank?()","string#blank?()","trueclass#blank?()","kernel#breakpoint()","activesupport::bufferedlogger#buffer()","actioncontroller::middleware::build()","actionview::resolver::path::build()","activerecord::relation#build()","activeresource::base::build()","activerecord::querymethods#build_arel()","activesupport::cache::memcachestore::build_mem_cache()","actionview::helpers::formtaghelper#button_tag()","actionview::helpers::urlhelper#button_to()","actionview::helpers::javascripthelper#button_to_function()","numeric#byte()","numeric#bytes()","actioncontroller::caching#cache()","actionview::helpers::cachehelper#cache()","activerecord::connectionadapters::querycache#cache()","activerecord::querycache::classmethods#cache()","rails::cache()","activerecord::attributemethods::read::classmethods#cache_attribute?()","activerecord::attributemethods::read::classmethods#cache_attributes()","activerecord::fixtures::cache_fixtures()","activerecord::fixtures::cache_for_connection()","activerecord::base#cache_key()","actioncontroller::caching::pages#cache_page()","actioncontroller::caching::pages::classmethods#cache_page()","actioncontroller::caching::configmethods#cache_store()","actioncontroller::caching::configmethods#cache_store=()","actionview::base::cache_template_loading()","actionview::base::cache_template_loading=()","activerecord::attributemethods::read::classmethods#cached_attributes()","activerecord::fixtures::cached_fixtures()","actioncontroller::caching::actions::classmethods#caches_action()","actioncontroller::caching::pages::classmethods#caches_page()","actioncontroller::caching#caching_allowed?()","activerecord::calculations#calculate()","actioncontroller::metal::call()","actioncontroller::middleware::actionmiddleware#call()","actioncontroller::responder::call()","actionview::template::actionview::template::template::handler::call()","actionview::template::handlers::builder#call()","actionview::template::handlers::compilable::classmethods#call()","actionview::template::handlers::erb#call()","actionview::template::handlers::erb::call()","activerecord::connectionadapters::connectionmanagement#call()","activerecord::identitymap::middleware#call()","activerecord::querycache#call()","activesupport::logsubscriber#call()","i18n::exceptionhandler#call()","logger::simpleformatter#call()","string#camelcase()","activesupport::inflector#camelize()","string#camelize()","activesupport::multibyte::chars#capitalize()","actionview::helpers::capturehelper#capture()","kernel#capture()","activerecord::connectionadapters::databasestatements#case_sensitive_equality_operator()","activerecord::connectionadapters::mysql2adapter#case_sensitive_equality_operator()","activerecord::connectionadapters::mysqladapter#case_sensitive_equality_operator()","activerecord::connectionadapters::abstractadapter#case_sensitive_modifier()","activerecord::connectionadapters::mysql2adapter#case_sensitive_modifier()","activerecord::connectionadapters::mysqladapter#case_sensitive_modifier()","class#cattr_accessor()","class#cattr_reader()","class#cattr_writer()","activesupport::xmlmini_nokogirisax::hashbuilder#cdata_block()","actionview::helpers::taghelper#cdata_section()","activesupport::multibyte::chars#center()","activerecord::connectionadapters::table#change()","date#change()","datetime#change()","time#change()","activerecord::connectionadapters::mysql2adapter#change_column()","activerecord::connectionadapters::postgresqladapter#change_column()","activerecord::connectionadapters::schemastatements#change_column()","activerecord::connectionadapters::mysql2adapter#change_column_default()","activerecord::connectionadapters::postgresqladapter#change_column_default()","activerecord::connectionadapters::schemastatements#change_column_default()","activerecord::connectionadapters::mysql2adapter#change_column_null()","activerecord::connectionadapters::mysqladapter#change_column_null()","activerecord::connectionadapters::postgresqladapter#change_column_null()","activerecord::connectionadapters::sqliteadapter#change_column_null()","activerecord::connectionadapters::mysqladapter#change_column_sql()","activerecord::connectionadapters::table#change_default()","activerecord::connectionadapters::schemastatements#change_table()","activemodel::dirty#changed()","activemodel::dirty#changed?()","activemodel::dirty#changed_attributes()","activerecord::autosaveassociation#changed_for_autosave?()","activemodel::dirty#changes()","activesupport::xmlmini_nokogirisax::hashbuilder#characters()","activerecord::connectionadapters::mysql2adapter#charset()","activerecord::connectionadapters::mysqladapter#charset()","actionview::helpers::formbuilder#check_box()","actionview::helpers::formhelper#check_box()","actionview::helpers::instancetag::check_box_checked?()","actionview::helpers::formtaghelper#check_box_tag()","activemodel::eachvalidator#check_validity!()","activemodel::validations::exclusionvalidator#check_validity!()","activemodel::validations::formatvalidator#check_validity!()","activemodel::validations::inclusionvalidator#check_validity!()","activemodel::validations::lengthvalidator#check_validity!()","activemodel::validations::numericalityvalidator#check_validity!()","activerecord::connectionadapters::connectionpool#checkin()","activerecord::connectionadapters::connectionpool#checkout()","datetime::civil_from_format()","class#class_attribute()","kernel#class_eval()","activerecord::reflection::macroreflection#class_name()","activerecord::base::class_of_active_record_descendant()","activesupport::inflector#classify()","string#classify()","activesupport::backtracecleaner#clean()","activesupport::cache::filestore#cleanup()","activesupport::cache::memorystore#cleanup()","activesupport::cache::store#cleanup()","activemodel::errors#clear()","activerecord::identitymap::clear()","activesupport::cache::filestore#clear()","activesupport::cache::memcachestore#clear()","activesupport::cache::memorystore#clear()","activesupport::cache::store#clear()","activesupport::cache::strategy::localcache::localstore#clear()","activesupport::descendantstracker::clear()","activesupport::inflector::inflections#clear()","activesupport::dependencies::classcache#clear!()","activerecord::base::clear_active_connections!()","activerecord::connectionadapters::connectionhandler#clear_active_connections!()","activerecord::connectionadapters::connectionhandler#clear_all_connections!()","activesupport::bufferedlogger#clear_buffer()","actionview::resolver#clear_cache()","activerecord::connectionadapters::abstractadapter#clear_cache!()","activerecord::connectionadapters::connectionpool#clear_cache!()","activerecord::connectionadapters::mysqladapter#clear_cache!()","activerecord::connectionadapters::postgresqladapter#clear_cache!()","activerecord::connectionadapters::sqliteadapter#clear_cache!()","activerecord::connectionadapters::querycache#clear_query_cache()","activerecord::connectionadapters::connectionhandler#clear_reloadable_connections!()","activerecord::connectionadapters::connectionpool#clear_reloadable_connections!()","actioncontroller::mimeresponds::classmethods#clear_respond_to()","activerecord::connectionadapters::connectionpool#clear_stale_cached_connections!()","activerecord::connectionadapters::connectionpool#clear_table_cache!()","activerecord::transactions#clear_transaction_record_state()","activerecord::connectionadapters::mysqladapter#client_encoding()","activerecord::connectionadapters::postgresqladapter#client_min_messages()","activerecord::connectionadapters::postgresqladapter#client_min_messages=()","activeresource::base#clone()","activerecord::base#clone_attribute_value()","activerecord::base#clone_attributes()","activesupport::bufferedlogger#close()","activesupport::gzip::stream#close()","activerecord::connectionadapters::mysql2adapter#collation()","activerecord::connectionadapters::mysqladapter#collation()","activeresource::base::collection_name()","activeresource::base::collection_path()","activeresource::base#collection_path()","actionview::helpers::formbuilder#collection_select()","actionview::helpers::formoptionshelper#collection_select()","activesupport::logsubscriber#color()","activerecord::connectionadapters::table#column()","activerecord::connectionadapters::tabledefinition#column()","activerecord::base::column_defaults()","activerecord::connectionadapters::schemastatements#column_exists?()","activerecord::connectionadapters::table#column_exists?()","activerecord::base#column_for_attribute()","activerecord::connectionadapters::databaselimits#column_name_length()","activerecord::base::column_names()","activerecord::base::columns()","activerecord::connectionadapters::mysql2adapter#columns()","activerecord::connectionadapters::postgresqladapter#columns()","activerecord::connectionadapters::schemastatements#columns()","activerecord::connectionadapters::schemastatements#columns_for_remove()","activerecord::base::columns_hash()","activerecord::connectionadapters::databaselimits#columns_per_multicolumn_index()","activerecord::connectionadapters::databaselimits#columns_per_table()","activerecord::connectionadapters::databasestatements#commit_db_transaction()","activerecord::connectionadapters::mysql2adapter#commit_db_transaction()","activerecord::connectionadapters::postgresqladapter#commit_db_transaction()","activerecord::connectionadapters::databasestatements#commit_transaction_records()","activesupport::timewithzone#comparable_time()","time#compare_with_coercion()","time#compare_without_coercion()","actionview::template::handlers::compilable#compile()","activesupport::configurable::configuration::compile_methods!()","activesupport::configurable::configuration#compile_methods!()","activesupport::multibyte::chars#compose()","activesupport::multibyte::unicode#compose_codepoints()","activerecord::aggregations::classmethods#composed_of()","activesupport::gzip::compress()","activesupport::cache::entry#compressed?()","activerecord::base::compute_type()","actionview::helpers::texthelper#concat()","activesupport::safebuffer#concat()","actionview::testcase::behavior#config()","activesupport::configurable#config()","activesupport::configurable::classmethods#config()","activesupport::configurable::classmethods#config_accessor()","rails::configuration()","activerecord::base::configurations()","activesupport::configurable::classmethods#configure()","activerecord::base::connected?()","activerecord::connectionadapters::connectionhandler#connected?()","activerecord::connectionadapters::connectionpool#connected?()","activerecord::base#connection()","activerecord::base::connection()","activerecord::connectionadapters::connectionpool#connection()","activerecord::migration#connection()","activerecord::sessionstore::sqlbypass::connection()","activeresource::base#connection()","activeresource::base::connection()","activerecord::base::connection_config()","activerecord::base::connection_handler()","activerecord::base::connection_pool()","activerecord::sessionstore::sqlbypass::connection_pool()","activesupport::inflector#constantize()","string#constantize()","activerecord::findermethods#construct_join_dependency_for_association_find()","activerecord::findermethods#construct_limited_ids_condition()","activerecord::findermethods#construct_relation_for_association_calculations()","activerecord::findermethods#construct_relation_for_association_find()","activesupport::multibyte::chars::consumes?()","html::whitelistsanitizer#contains_bad_protocols?()","activerecord::base::content_columns()","actionview::helpers::capturehelper#content_for()","actionview::helpers::capturehelper#content_for?()","actionview::helpers::taghelper#content_tag()","actionview::helpers::recordtaghelper#content_tag_for()","actioncontroller::metal#content_type()","actioncontroller::metal#content_type=()","actioncontroller::testcase::behavior::classmethods#controller_class()","actioncontroller::testcase::behavior::classmethods#controller_class=()","actioncontroller::metal::controller_name()","actioncontroller::metal#controller_name()","actionmailer::base::controller_path()","actionview::testcase::testcontroller#controller_path=()","activesupport::hashwithindifferentaccess#convert_key()","activesupport::hashwithindifferentaccess#convert_key()","actionview::helpers::formhelper#convert_to_model()","activesupport::hashwithindifferentaccess#convert_value()","activesupport::hashwithindifferentaccess#convert_value()","activerecord::migration#copy()","activemodel::errors#count()","activerecord::calculations#count()","activerecord::base::count_by_sql()","activemodel::observing::classmethods#count_observers()","activerecord::base::create()","activerecord::connectionadapters::mysql2adapter#create()","activerecord::relation#create()","activeresource::base#create()","activeresource::base::create()","activesupport::cache::entry::create()","activesupport::timezone::create()","activerecord::relation#create!()","activerecord::validations::classmethods#create!()","activerecord::connectionadapters::mysql2adapter#create_database()","activerecord::connectionadapters::mysqladapter#create_database()","activerecord::connectionadapters::postgresqladapter#create_database()","activerecord::fixtures::create_fixtures()","activesupport::testing::performance::profiler#create_path_and_open_file()","activerecord::reflection::classmethods#create_reflection()","activerecord::connectionadapters::abstractadapter#create_savepoint()","activerecord::connectionadapters::mysql2adapter#create_savepoint()","activerecord::connectionadapters::mysqladapter#create_savepoint()","activerecord::connectionadapters::postgresqladapter#create_savepoint()","activerecord::connectionadapters::sqliteadapter#create_savepoint()","activerecord::connectionadapters::mysql2adapter#create_table()","activerecord::connectionadapters::schemastatements#create_table()","activerecord::querymethods#create_with()","activerecord::dynamicfindermatch#creator?()","actionview::helpers::csrfhelper#csrf_meta_tag()","actionview::helpers::csrfhelper#csrf_meta_tags()","date::current()","datetime::current()","time::current()","actionview::helpers::texthelper#current_cycle()","activerecord::connectionadapters::mysql2adapter#current_database()","activerecord::connectionadapters::mysqladapter#current_database()","activerecord::connectionadapters::postgresqladapter#current_database()","activesupport::xmlmini_libxmlsax::hashbuilder#current_hash()","activesupport::xmlmini_nokogirisax::hashbuilder#current_hash()","actionview::helpers::urlhelper#current_page?()","activerecord::connectionadapters::abstractadapter#current_savepoint_name()","actionview::helpers::assettaghelper::assetincludetag#custom_dir()","actionview::helpers::assettaghelper::javascriptincludetag#custom_dir()","actionview::helpers::assettaghelper::stylesheetincludetag#custom_dir()","activeresource::custommethods::classmethods#custom_method_collection_url()","actionview::helpers::texthelper#cycle()","process::daemon()","activesupport::inflector#dasherize()","string#dasherize()","activerecord::sessionstore::session#data()","activerecord::sessionstore::sqlbypass#data()","activerecord::sessionstore::sqlbypass::data_column()","activerecord::sessionstore::session::data_column_name()","activerecord::sessionstore::sqlbypass::data_column_name()","activerecord::sessionstore::session::data_column_size_limit()","actionview::helpers::datehelper#date_select()","actionview::helpers::formbuilder#date_select()","actionview::helpers::datehelper#datetime_select()","actionview::helpers::formbuilder#datetime_select()","numeric#day()","numeric#days()","time::days_in_month()","actionview::helpers::debughelper#debug()","activemodel::massassignmentsecurity::sanitizer#debug_protected_attribute_removal()","kernel#debugger()","activeresource::formats::jsonformat#decode()","activeresource::formats::xmlformat#decode()","activesupport::json::decode()","activesupport::base64::decode64()","actioncontroller::httpauthentication::basic#decode_credentials()","actioncontroller::httpauthentication::digest#decode_credentials()","actioncontroller::httpauthentication::digest#decode_credentials_header()","activesupport::multibyte::chars#decompose()","activesupport::multibyte::unicode#decompose_codepoints()","activesupport::gzip::decompress()","activerecord::persistence#decrement()","activesupport::cache::filestore#decrement()","activesupport::cache::memorystore#decrement()","activesupport::cache::store#decrement()","activerecord::persistence#decrement!()","activerecord::countercache#decrement_counter()","activerecord::connectionadapters::abstractadapter#decrement_open_transactions()","activesupport::messageencryptor#decrypt()","activesupport::messageencryptor#decrypt_and_verify()","hash#deep_dup()","hash#deep_merge()","hash#deep_merge!()","actionmailer::base::default()","activesupport::hashwithindifferentaccess#default()","activesupport::hashwithindifferentaccess#default()","actioncontroller::responder#default_action()","date#default_inspect()","datetime#default_inspect()","activerecord::connectionadapters::sqliteadapter#default_primary_key_type()","actioncontroller::implicitrender#default_render()","actioncontroller::responder#default_render()","activerecord::base::default_scope()","activerecord::connectionadapters::databasestatements#default_sequence_name()","activerecord::base::default_timezone()","activerecord::schema::define()","activemodel::attributemethods::classmethods#define_attr_method()","activemodel::attributemethods::classmethods#define_attribute_method()","activemodel::attributemethods::classmethods#define_attribute_methods()","activerecord::attributemethods::classmethods#define_attribute_methods()","activerecord::observer#define_callbacks()","activesupport::callbacks::classmethods#define_callbacks()","activerecord::attributemethods::read::classmethods#define_method_attribute()","activerecord::attributemethods::timezoneconversion::classmethods#define_method_attribute()","activerecord::attributemethods::timezoneconversion::classmethods#define_method_attribute=()","activerecord::attributemethods::write::classmethods#define_method_attribute=()","activemodel::callbacks#define_model_callbacks()","activerecord::attributemethods::classmethods#defined_activerecord_methods()","module#delegate()","actioncontroller::testcase::behavior#delete()","activerecord::connectionadapters::databasestatements#delete()","activerecord::persistence#delete()","activerecord::relation#delete()","activeresource::base::delete()","activeresource::connection#delete()","activeresource::custommethods::delete()","activeresource::custommethods::instancemethods#delete()","activesupport::cache::store#delete()","activesupport::hashwithindifferentaccess#delete()","activesupport::hashwithindifferentaccess#delete()","activerecord::relation#delete_all()","activesupport::cache::filestore#delete_entry()","activesupport::cache::strategy::localcache::localstore#delete_entry()","activesupport::cache::filestore#delete_matched()","activesupport::cache::memorystore#delete_matched()","activesupport::cache::store#delete_matched()","activeresource::httpmock::delete_responses_to_replace()","activerecord::connectionadapters::databasestatements#delete_sql()","activesupport::inflector#demodulize()","string#demodulize()","activemodel::massassignmentsecurity::blacklist#deny?()","activemodel::massassignmentsecurity::whitelist#deny?()","module#deprecate()","activesupport::deprecation::deprecate_methods()","activesupport::deprecation::deprecated_method_warning()","activesupport::descendantstracker#descendants()","activesupport::descendantstracker::descendants()","activerecord::base::descends_from_active_record?()","activesupport::testing::declarative::describe()","activerecord::persistence#destroy()","activerecord::relation#destroy()","activerecord::sessionstore::sqlbypass#destroy()","activeresource::base#destroy()","activerecord::relation#destroy_all()","activerecord::persistence#destroyed?()","actioncontroller::testcase::behavior::classmethods#determine_default_controller_class()","actionview::testcase::behavior::classmethods#determine_default_helper_class()","hash#diff()","activesupport::descendantstracker::direct_descendants()","activesupport::descendantstracker#direct_descendants()","activesupport::multibyte::unicode::unicodedatabase::dirname()","activerecord::connectionadapters::querycache::dirties_query_cache()","activesupport::safebuffer#dirty?()","activemodel::observerarray#disable()","actionview::lookupcontext::details#disable_cache()","activerecord::connectionadapters::querycache#disable_query_cache!()","activerecord::connectionadapters::abstractadapter#disable_referential_integrity()","activemodel::observer#disabled_for?()","activemodel::observerarray#disabled_for?()","activemodel::observerarray#disabled_observer_stack()","activemodel::observerarray#disabled_observers()","activerecord::connectionadapters::abstractadapter#disconnect!()","activerecord::connectionadapters::connectionpool#disconnect!()","activerecord::connectionadapters::mysql2adapter#disconnect!()","activerecord::connectionadapters::mysqladapter#disconnect!()","activerecord::connectionadapters::postgresqladapter#disconnect!()","activerecord::connectionadapters::sqliteadapter#disconnect!()","actioncontroller::rackdelegation#dispatch()","actioncontroller::responder#display()","actioncontroller::responder#display_errors()","actionview::helpers::datehelper#distance_of_time_in_words()","actionview::helpers::datehelper#distance_of_time_in_words_to_now()","activerecord::connectionadapters::schemastatements#distinct()","actionview::helpers::recordtaghelper#div_for()","actioncontroller::recordidentifier#dom_class()","actioncontroller::recordidentifier#dom_id()","activerecord::migration#down()","activesupport::multibyte::chars#downcase()","activerecord::connectionadapters::mysql2adapter#drop_table()","activerecord::connectionadapters::mysqladapter#drop_table()","activerecord::connectionadapters::schemastatements#drop_table()","activesupport::timewithzone#dst?()","activeresource::base#dup()","activesupport::hashwithindifferentaccess#dup()","activesupport::hashwithindifferentaccess#dup()","class#duplicable?()","falseclass#duplicable?()","module#duplicable?()","nilclass#duplicable?()","numeric#duplicable?()","object#duplicable?()","symbol#duplicable?()","trueclass#duplicable?()","activemodel::errors#each()","activerecord::fixtures#each()","activerecord::result#each()","activemodel::observerarray#each_subclass_array()","enumerable#each_with_object()","activesupport::autoload#eager_autoload()","activesupport::autoload::eager_autoload!()","activerecord::querymethods#eager_load()","activerecord::relation#eager_loading?()","activeresource::base::element_name()","activeresource::base#element_path()","activeresource::base::element_path()","actionview::helpers::formhelper#email_field()","actionview::helpers::formtaghelper#email_field_tag()","actionview::helpers::formbuilder#emitted_hidden_id?()","activemodel::errors#empty?()","activerecord::relation#empty?()","activesupport::dependencies::classcache#empty?()","activerecord::connectionadapters::databasestatements#empty_insert_statement_value()","activerecord::connectionadapters::sqliteadapter#empty_insert_statement_value()","actioncontroller::responder#empty_json_resource()","actioncontroller::responder#empty_resource()","activerecord::connectionadapters::mysqladapter::emulate_booleans()","activemodel::observerarray#enable()","activerecord::connectionadapters::querycache#enable_query_cache!()","kernel#enable_warnings()","activerecord::identitymap::enabled()","activerecord::identitymap::enabled=()","activerecord::identitymap::enabled?()","activeresource::base#encode()","activeresource::formats::jsonformat#encode()","activeresource::formats::xmlformat#encode()","activesupport::json::encode()","activesupport::json::encoding::encoder#encode()","activesupport::base64::encode64()","activesupport::base64::encode64s()","actioncontroller::httpauthentication::basic#encode_credentials()","actioncontroller::httpauthentication::digest#encode_credentials()","actioncontroller::httpauthentication::token#encode_credentials()","activesupport::json::variable#encode_json()","hash#encode_json()","numeric#encode_json()","string#encode_json()","activerecord::base#encode_with()","activesupport::safebuffer#encode_with()","activesupport::timewithzone#encode_with()","bigdecimal#encode_with()","activerecord::connectionadapters::postgresqladapter#encoding()","string#encoding_aware?()","activesupport::messageencryptor#encrypt()","activesupport::messageencryptor#encrypt_and_sign()","activesupport::xmlmini_nokogirisax::hashbuilder#end_document()","activesupport::xmlmini_nokogirisax::hashbuilder#end_element()","date#end_of_day()","datetime#end_of_day()","time#end_of_day()","date#end_of_month()","time#end_of_month()","date#end_of_quarter()","time#end_of_quarter()","date#end_of_week()","time#end_of_week()","date#end_of_year()","time#end_of_year()","activemodel::observerarray#end_transaction()","activesupport::json::engine()","activesupport::json::engine=()","actionview::helpers::atomfeedhelper::atomfeedbuilder#entry()","actioncontroller::metal#env()","rails::env()","rails::env=()","activesupport::testing::performance::benchmarker#environment()","actionview::filesystemresolver#eql?()","activerecord::base#eql?()","activeresource::base#eql?()","activesupport::timewithzone#eql?()","activesupport::xmlmini_nokogirisax::hashbuilder#error()","actionview::helpers::activemodelinstancetag#error_message()","actionview::helpers::activemodelinstancetag#error_wrapping()","activemodel::validations#errors()","activeresource::validations#errors()","activesupport::json::encoding::encoder#escape()","activerecord::connectionadapters::postgresqladapter#escape_bytea()","actionview::helpers::javascripthelper#escape_javascript()","actionview::helpers::taghelper#escape_once()","activerecord::base::establish_connection()","activerecord::connectionadapters::connectionhandler#establish_connection()","activerecord::base::evaluate_default_scope()","numeric#exabyte()","numeric#exabytes()","activerecord::spawnmethods#except()","hash#except()","hash#except!()","actionview::helpers::texthelper#excerpt()","enumerable#exclude?()","string#exclude?()","activerecord::connectionadapters::databasestatements#exec_delete()","activerecord::connectionadapters::mysql2adapter#exec_delete()","activerecord::connectionadapters::mysqladapter#exec_delete()","activerecord::connectionadapters::postgresqladapter#exec_delete()","activerecord::connectionadapters::sqliteadapter#exec_delete()","activerecord::connectionadapters::databasestatements#exec_insert()","activerecord::connectionadapters::mysql2adapter#exec_insert()","activerecord::connectionadapters::databasestatements#exec_query()","activerecord::connectionadapters::mysqladapter#exec_query()","activerecord::connectionadapters::postgresqladapter#exec_query()","activerecord::connectionadapters::sqliteadapter#exec_query()","activerecord::connectionadapters::databasestatements#exec_update()","activerecord::connectionadapters::mysql2adapter#exec_update()","activerecord::connectionadapters::mysqladapter#exec_update()","activerecord::connectionadapters::postgresqladapter#exec_update()","activerecord::connectionadapters::sqliteadapter#exec_update()","activerecord::connectionadapters::databasestatements#execute()","activerecord::connectionadapters::mysql2adapter#execute()","activerecord::connectionadapters::postgresqladapter#execute()","activesupport::execute_hook()","activesupport::fileupdatechecker#execute_if_updated()","activesupport::cache::store#exist?()","actionview::lookupcontext::viewpaths#exists?()","activerecord::findermethods#exists?()","activeresource::base::exists?()","activeresource::base#exists?()","activesupport::cache::expand_cache_key()","activerecord::base::expand_hash_conditions_for_aggregates()","actioncontroller::httpauthentication::digest#expected_response()","actioncontroller::caching::actions#expire_action()","actioncontroller::caching::fragments#expire_fragment()","actioncontroller::caching::pages#expire_page()","actioncontroller::caching::pages::classmethods#expire_page()","activesupport::cache::entry#expired?()","activesupport::cache::entry#expires_at()","activesupport::cache::entry#expires_at=()","actioncontroller::conditionalget#expires_in()","actioncontroller::conditionalget#expires_now()","activemodel::callbacks::extended()","activesupport::concern::extended()","activesupport::testing::declarative::extended()","activerecord::querymethods#extending()","actionview::helpers::assettaghelper::assetincludetag#extension()","actionview::helpers::assettaghelper::javascriptincludetag#extension()","actionview::helpers::assettaghelper::stylesheetincludetag#extension()","activeresource::formats::jsonformat#extension()","activeresource::formats::xmlformat#extension()","hash#extract!()","activerecord::connectionadapters::mysql2column#extract_default()","array#extract_options!()","activerecord::connectionadapters::postgresqladapter#extract_schema_and_table()","activesupport::hashwithindifferentaccess#extractable_options?()","activesupport::hashwithindifferentaccess#extractable_options?()","hash#extractable_options?()","actionview::helpers::assettaghelper#favicon_link_tag()","activesupport::cache::store#fetch()","activesupport::hashwithindifferentaccess#fetch()","activesupport::hashwithindifferentaccess#fetch()","actionview::helpers::formtaghelper#field_set_tag()","actionview::helpers::formbuilder#fields_for()","actionview::helpers::formhelper#fields_for()","array#fifth()","actionview::helpers::formbuilder#file_field()","actionview::helpers::formhelper#file_field()","actionview::helpers::formtaghelper#file_field_tag()","activesupport::multibyte::unicode::unicodedatabase::filename()","activemodel::validations::numericalityvalidator#filtered_options()","actionview::lookupcontext::viewpaths#find()","activerecord::findermethods#find()","activeresource::base::find()","actionview::lookupcontext::viewpaths#find_all()","actionview::resolver#find_all()","activerecord::findermethods#find_by_attributes()","activerecord::sessionstore::session::find_by_session_id()","activerecord::sessionstore::sqlbypass::find_by_session_id()","activerecord::base::find_by_sql()","activerecord::batches#find_each()","activerecord::findermethods#find_first()","activerecord::batches#find_in_batches()","activerecord::findermethods#find_last()","activerecord::findermethods#find_one()","activerecord::findermethods#find_or_instantiator_by_attributes()","activerecord::findermethods#find_some()","actionview::lookupcontext::viewpaths#find_template()","activesupport::timezone::find_tzinfo()","activerecord::findermethods#find_with_associations()","activerecord::findermethods#find_with_ids()","time::find_zone()","time::find_zone!()","activerecord::dynamicfindermatch#finder?()","activerecord::findermethods#first()","activeresource::base::first()","string#first()","activerecord::findermethods#first!()","activerecord::fixtures::fixture_is_cached?()","activerecord::testfixtures::classmethods#fixtures()","activesupport::bufferedlogger#flush()","activesupport::logsubscriber::testhelper::mocklogger#flush()","activesupport::logsubscriber::flush_all!()","activesupport::memoizable::instancemethods#flush_cache()","activesupport::logsubscriber::flushable_loggers()","html::selector::for_class()","html::selector::for_id()","activesupport::testcase::for_tag()","actioncontroller::forcessl::classmethods#force_ssl()","activesupport::inflector#foreign_key()","string#foreign_key()","activesupport::testing::isolation::forking_env?()","actioncontroller::requestforgeryprotection#form_authenticity_param()","actioncontroller::requestforgeryprotection#form_authenticity_token()","actionview::helpers::formhelper#form_for()","actionview::helpers::formtaghelper#form_tag()","activeresource::base::format()","activesupport::testing::performance::metrics::amount#format()","activesupport::testing::performance::metrics::digitalinformationunit#format()","activesupport::testing::performance::metrics::time#format()","activeresource::base::format=()","actionview::lookupcontext::details#formats=()","activesupport::timewithzone#formatted_offset()","activesupport::timezone#formatted_offset()","datetime#formatted_offset()","time#formatted_offset()","numeric#fortnight()","numeric#fortnights()","array#forty_two()","array#fourth()","actioncontroller::caching::fragments#fragment_cache_key()","actioncontroller::caching::fragments#fragment_exist?()","activerecord::base#freeze()","activesupport::timewithzone#freeze()","activesupport::memoizable::instancemethods#freeze_with_memoizable()","actioncontroller::conditionalget#fresh_when()","activerecord::querymethods#from()","array#from()","string#from()","activeresource::errors#from_array()","activemodel::serializers::json#from_json()","activeresource::errors#from_json()","activesupport::duration#from_now()","numeric#from_now()","actionview::logsubscriber#from_rails_root()","activemodel::serializers::xml#from_xml()","activeresource::errors#from_xml()","hash::from_xml()","activerecord::base#frozen?()","activemodel::errors#full_messages()","activesupport::testing::performance#full_profile_options()","activesupport::testing::performance#full_test_name()","activesupport::timewithzone#future?()","date#future?()","datetime#future?()","time#future?()","activesupport::multibyte::chars#g_length()","activesupport::multibyte::unicode#g_pack()","activesupport::multibyte::unicode#g_unpack()","activesupport::messageverifier#generate()","activemodel::errors#generate_message()","actioncontroller::testcase::behavior#get()","activemodel::errors#get()","activerecord::identitymap::get()","activeresource::connection#get()","activeresource::custommethods::get()","activeresource::custommethods::instancemethods#get()","activesupport::dependencies::classcache#get()","activesupport::timewithzone#getgm()","activesupport::timewithzone#getlocal()","activesupport::timewithzone#getutc()","datetime#getutc()","numeric#gigabyte()","numeric#gigabytes()","activesupport::timewithzone#gmt?()","activesupport::timewithzone#gmt_offset()","activesupport::timewithzone#gmtime()","activesupport::timewithzone#gmtoff()","activerecord::querymethods#group()","enumerable#group_by()","actionview::helpers::formbuilder#grouped_collection_select()","actionview::helpers::formoptionshelper#grouped_collection_select()","actionview::helpers::formoptionshelper#grouped_options_for_select()","rails::groups()","erb::util::h()","actioncontroller::httpauthentication::digest#ha1()","actioncontroller::requestforgeryprotection#handle_unverified_request()","activesupport::rescuable#handler_for_rescue()","actionview::template::handlers::erb#handles_encoding?()","activerecord::associations::classmethods#has_and_belongs_to_many()","activerecord::base#has_attribute?()","activerecord::connectionadapters::mysql2column#has_default?()","actioncontroller::responder#has_empty_resource_definition?()","actioncontroller::responder#has_errors?()","activesupport::hashwithindifferentaccess#has_key?()","activesupport::hashwithindifferentaccess#has_key?()","activerecord::associations::classmethods#has_many()","activerecord::associations::classmethods#has_one()","activemodel::securepassword::classmethods#has_secure_password()","activerecord::base#hash()","activeresource::base#hash()","activesupport::timewithzone#hash()","activerecord::querymethods#having()","actioncontroller::head#head()","actioncontroller::testcase::behavior#head()","activeresource::connection#head()","actionmailer::base#headers()","activeresource::base::headers()","actioncontroller::testing#headers=()","actioncontroller::helpers::classmethods#helper_attr()","actionview::testcase::behavior::classmethods#helper_class()","actionview::testcase::behavior::classmethods#helper_method()","actioncontroller::helpers::classmethods#helpers()","actionview::helpers::formbuilder#hidden_field()","actionview::helpers::formhelper#hidden_field()","actionview::helpers::formtaghelper#hidden_field_tag()","actioncontroller::hideactions::classmethods#hide_action()","actionview::helpers::texthelper#highlight()","numeric#hour()","numeric#hours()","erb::util::html_escape()","string#html_safe()","activesupport::safebuffer#html_safe?()","numeric#html_safe?()","object#html_safe?()","actioncontroller::httpauthentication::basic::controllermethods::classmethods#http_basic_authenticate_with()","activesupport::timewithzone#httpdate()","activemodel::name#human()","activesupport::inflector::inflections#human()","activemodel::translation#human_attribute_name()","activesupport::inflector#humanize()","string#humanize()","activemodel::translation#i18n_scope()","activeresource::base#id()","nilclass#id()","activeresource::base#id=()","activeresource::base#id_from_response()","activerecord::fixtures::identify()","activerecord::logsubscriber#identity()","actionview::helpers::assettaghelper#image_alt()","actionview::helpers::assettaghelper#image_path()","actionview::helpers::formtaghelper#image_submit_tag()","actionview::helpers::assettaghelper#image_tag()","date#in()","datetime#in()","time#in()","object#in?()","activesupport::multibyte::unicode#in_char_class?()","activerecord::connectionadapters::databaselimits#in_clause_length()","array#in_groups()","array#in_groups_of()","activesupport::timewithzone#in_time_zone()","datetime#in_time_zone()","time#in_time_zone()","activemodel::errors#include?()","activemodel::massassignmentsecurity::permissionset#include?()","activesupport::hashwithindifferentaccess#include?()","activesupport::hashwithindifferentaccess#include?()","activesupport::multibyte::chars#include?()","test::unit::collector::objectspace#include?()","i18n::railtie::include_fallbacks_module()","actionview::helpers::assettaghelper::assetincludetag#include_tag()","range#include_with_range?()","actioncontroller::testcase::raiseactionexceptions::included()","actionview::template::handlers::compilable::included()","activerecord::connectionadapters::querycache::included()","activesupport::concern#included()","activesupport::memoizable::instancemethods::included()","activesupport::testing::isolation::included()","activerecord::querymethods#includes()","activerecord::persistence#increment()","activesupport::cache::filestore#increment()","activesupport::cache::memorystore#increment()","activesupport::cache::store#increment()","activerecord::persistence#increment!()","activerecord::countercache#increment_counter()","activerecord::connectionadapters::abstractadapter#increment_open_transactions()","actioncontroller::middleware#index()","activerecord::connectionadapters::table#index()","activesupport::multibyte::chars#index()","enumerable#index_by()","activerecord::connectionadapters::schemastatements#index_exists?()","activerecord::connectionadapters::table#index_exists?()","activerecord::connectionadapters::schemastatements#index_name_exists?()","activerecord::connectionadapters::schemastatements#index_name_for_remove()","activerecord::connectionadapters::databaselimits#index_name_length()","activerecord::connectionadapters::postgresqladapter#index_name_length()","activerecord::connectionadapters::mysql2adapter#indexes()","activerecord::connectionadapters::postgresqladapter#indexes()","activerecord::connectionadapters::databaselimits#indexes_per_table()","activesupport::inflector#inflections()","activesupport::inheritableoptions#inheritable_copy()","activerecord::base::inheritance_column()","activerecord::base::inheritance_column=()","actioncontroller::hideactions::classmethods#inherited()","actioncontroller::paramswrapper::classmethods#inherited()","actionview::helpers::assettaghelper::assetincludetag::inherited()","actionview::template::actionview::template::template::handler::inherited()","activemodel::observing::classmethods#inherited()","activemodel::validations::classmethods#inherited()","activesupport::descendantstracker#inherited()","i18n::railtie::init_fallbacks()","activerecord::base#init_with()","rails::initialize!()","activerecord::relation#initialize_copy()","activesupport::safebuffer#initialize_copy()","activerecord::base#initialize_dup()","i18n::railtie::initialize_i18n()","activerecord::connectionadapters::schemastatements#initialize_schema_migrations_table()","actioncontroller::compatibility#initialize_template_class()","rails::initialized=()","rails::initialized?()","string#inquiry()","activerecord::connectionadapters::databasestatements#insert()","activerecord::relation#insert()","activesupport::multibyte::chars#insert()","activerecord::connectionadapters::databasestatements#insert_fixture()","activerecord::connectionadapters::databasestatements#insert_sql()","activerecord::connectionadapters::mysql2adapter#insert_sql()","activerecord::connectionadapters::postgresqladapter#insert_sql()","actionview::template#inspect()","activerecord::base::inspect()","activerecord::base#inspect()","activerecord::relation#inspect()","activesupport::timewithzone#inspect()","date#inspect()","datetime#inspect()","activesupport::inflector::inflections::instance()","activemodel::attributemethods::classmethods#instance_method_already_implemented?()","activerecord::attributemethods::classmethods#instance_method_already_implemented?()","module#instance_method_names()","object#instance_variable_names()","activerecord::base::instantiate()","activerecord::fixtures::instantiate_all_loaded_fixtures()","activerecord::fixtures::instantiate_fixtures()","activemodel::observing::classmethods#instantiate_observers()","activerecord::dynamicfindermatch#instantiator?()","activesupport::cache::store::instrument()","activesupport::notifications::instrument()","activesupport::notifications::instrumenter#instrument()","activesupport::cache::store::instrument=()","actioncontroller::caching::fragments#instrument_fragment_cache()","activesupport::notifications::instrumenter()","activemodel::validations#invalid?()","activerecord::migration::commandrecorder#inverse()","activesupport::inflector::inflections#irregular()","activesupport::timewithzone#is_a?()","loaderror#is_missing?()","loaderror#is_missing?()","string#is_utf8?()","activesupport::timewithzone#isdst()","activesupport::timewithzone#iso8601()","date#iso8601()","actionview::helpers::javascripthelper#j()","erb::util::j()","actionview::helpers::assettaghelper::javascripttaghelpers#javascript_include_tag()","actionview::helpers::assettaghelper::javascripttaghelpers#javascript_path()","actionview::helpers::javascripthelper#javascript_tag()","activerecord::relation#joined_includes_values()","activerecord::querymethods#joins()","activerecord::connectionadapters::databaselimits#joins_per_query()","erb::util::json_escape()","activesupport::dependencies::classcache#key?()","activesupport::hashwithindifferentaccess#key?()","activesupport::hashwithindifferentaccess#key?()","activesupport::cache::store#key_matcher()","activemodel::errors#keys()","numeric#kilobyte()","numeric#kilobytes()","activemodel::validator#kind()","activemodel::validator::kind()","activesupport::timewithzone#kind_of?()","activerecord::reflection::macroreflection#klass()","activeresource::base::known_attributes()","activeresource::base#known_attributes()","actionview::helpers::translationhelper#l()","actionview::helpers::formbuilder#label()","actionview::helpers::formhelper#label()","actionview::helpers::formtaghelper#label_tag()","activerecord::findermethods#last()","activeresource::base::last()","string#last()","activerecord::findermethods#last!()","activerecord::connectionadapters::databasestatements#last_inserted_id()","activerecord::connectionadapters::mysql2adapter#last_inserted_id()","activerecord::connectionadapters::mysqladapter#last_inserted_id()","activerecord::connectionadapters::sqliteadapter#last_inserted_id()","activerecord::querymethods#limit()","activesupport::multibyte::chars#limit()","activerecord::connectionadapters::databasestatements#limited_update_conditions()","activerecord::connectionadapters::mysql2adapter#limited_update_conditions()","activerecord::connectionadapters::mysqladapter#limited_update_conditions()","actionview::helpers::urlhelper#link_to()","actionview::helpers::javascripthelper#link_to_function()","actionview::helpers::urlhelper#link_to_if()","actionview::helpers::urlhelper#link_to_unless()","actionview::helpers::urlhelper#link_to_unless_current()","activesupport::notifications::fanout#listeners_for()","activesupport::notifications::fanout#listening?()","activesupport::multibyte::chars#ljust()","activeresource::base#load()","activesupport::multibyte::unicode::unicodedatabase#load()","activeresource::base#load_attributes_from_response()","activerecord::sessionstore::session#loaded?()","activerecord::sessionstore::sqlbypass#loaded?()","activesupport::timezone#local()","module#local_constant_names()","module#local_constants()","datetime::local_offset()","time::local_time()","activesupport::timezone#local_to_utc()","actionview::lookupcontext::details#locale()","actionview::lookupcontext::details#locale=()","actionview::helpers::translationhelper#localize()","actionview::testcase::behavior#locals()","activesupport::timewithzone#localtime()","actioncontroller::metal#location()","actioncontroller::metal#location=()","activerecord::querymethods#lock()","activerecord::locking::pessimistic#lock!()","activerecord::locking::optimistic::classmethods#locking_column()","activerecord::locking::optimistic::classmethods#locking_enabled?()","activerecord::connectionadapters::abstractadapter#log()","activerecord::railties::controllerruntime::classmethods#log_process_action()","activesupport::logsubscriber::log_subscribers()","activesupport::logsubscriber::testhelper::mocklogger#logged()","actioncontroller::logsubscriber#logger()","actionview::logsubscriber#logger()","activerecord::base::logger()","activerecord::logsubscriber#logger()","activeresource::base::logger()","activeresource::logsubscriber#logger()","activesupport::logsubscriber::logger()","rails::logger()","rails::logger=()","activemodel::translation#lookup_ancestors()","activesupport::cache::lookup_store()","activesupport::multibyte::chars#lstrip()","actionmailer::base#mail()","actionview::helpers::urlhelper#mail_to()","actionmailer::base#mailer_name()","actionmailer::base::mailer_name()","activerecord::relation#many?()","enumerable#many?()","activerecord::autosaveassociation#mark_for_destruction()","activerecord::autosaveassociation#marked_for_destruction?()","activesupport::timewithzone#marshal_dump()","activesupport::timewithzone#marshal_load()","activemodel::massassignmentsecurity#mass_assignment_authorizer()","activerecord::base#mass_assignment_options()","activerecord::base#mass_assignment_role()","activemodel::attributemethods::classmethods::attributemethodmatcher#match()","activerecord::dynamicfindermatch::match()","activerecord::dynamicscopematch::match()","html::selector#match()","module#mattr_accessor()","module#mattr_reader()","module#mattr_writer()","activerecord::calculations#maximum()","string#mb_chars()","activesupport::testing::performance::metrics::cputime#measure()","activesupport::testing::performance::metrics::gcruns#measure()","activesupport::testing::performance::metrics::gctime#measure()","activesupport::testing::performance::metrics::memory#measure()","activesupport::testing::performance::metrics::objects#measure()","activesupport::testing::performance::metrics::processtime#measure()","activesupport::testing::performance::metrics::time#measure()","activesupport::testing::performance::metrics::usertime#measure()","activesupport::testing::performance::metrics::walltime#measure()","activesupport::testing::performance::metrics::base#measure_mode()","numeric#megabyte()","numeric#megabytes()","activesupport::hashwithindifferentaccess#member?()","activesupport::hashwithindifferentaccess#member?()","activesupport::memoizable#memoize()","activesupport::memoizable::instancemethods#memoize_all()","activesupport::memoizable::memoized_ivar_for()","activerecord::spawnmethods#merge()","activesupport::hashwithindifferentaccess#merge()","activesupport::hashwithindifferentaccess#merge()","activesupport::hashwithindifferentaccess#merge!()","activesupport::hashwithindifferentaccess#merge!()","actioncontroller::compatibility#method_for_action()","actioncontroller::implicitrender#method_for_action()","activemodel::attributemethods#method_missing()","activerecord::migration#method_missing()","activerecord::relation#method_missing()","activesupport::logsubscriber::testhelper::mocklogger#method_missing()","activesupport::multibyte::chars#method_missing()","activesupport::orderedoptions#method_missing()","activesupport::stringinquirer#method_missing()","activesupport::testing::proxytestresult#method_missing()","activesupport::timewithzone#method_missing()","activemodel::attributemethods::classmethods::attributemethodmatcher#method_name()","module#method_names()","actioncontroller::metal::middleware()","activesupport::cache::strategy::localcache#middleware()","date#midnight()","datetime#midnight()","time#midnight()","activerecord::migration#migrate()","activerecord::migration::migrate()","activerecord::schema#migrations_paths()","actionview::template#mime_type()","activeresource::formats::jsonformat#mime_type()","activeresource::formats::xmlformat#mime_type()","activerecord::calculations#minimum()","time#minus_with_coercion()","time#minus_without_coercion()","time#minus_without_duration()","numeric#minute()","numeric#minutes()","nameerror#missing_name()","nameerror#missing_name?()","actionview::helpers::formbuilder::model_name()","activemodel::naming#model_name()","actioncontroller::helpers::classmethods#modules_for_helpers()","date#monday()","time#monday()","integer#month()","integer#months()","date#months_ago()","time#months_ago()","date#months_since()","time#months_since()","benchmark::ms()","actionview::helpers::formbuilder#multipart=()","integer#multiple_of?()","activesupport::cache::store#mute()","activerecord::base::mysql2_connection()","activesupport::testing::performance::metrics::base#name()","activesupport::timewithzone::name()","activerecord::connectionadapters::mysql2adapter#native_database_types()","activerecord::connectionadapters::schemastatements#native_database_types()","actioncontroller::responder#navigation_behavior()","actioncontroller::responder#navigation_location()","hash#nested_under_indifferent_access()","actioncontroller::caching::actions::actioncachepath::new()","actioncontroller::metal::new()","actioncontroller::middleware::new()","actioncontroller::middleware::new()","actioncontroller::middleware::actionmiddleware::new()","actioncontroller::responder::new()","actionmailer::base::new()","actionview::filesystemresolver::new()","actionview::fixtureresolver::new()","actionview::helpers::assettaghelper::assetincludetag::new()","actionview::helpers::atomfeedhelper::atombuilder::new()","actionview::helpers::atomfeedhelper::atomfeedbuilder::new()","actionview::helpers::formbuilder::new()","actionview::helpers::instancetag::new()","actionview::helpers::numberhelper::invalidnumbererror::new()","actionview::renderer::new()","actionview::resolver::new()","actionview::resolver::path::new()","actionview::template::new()","actionview::testcase::behavior::classmethods#new()","actionview::testcase::testcontroller::new()","activemodel::attributemethods::classmethods::attributemethodmatcher::new()","activemodel::blockvalidator::new()","activemodel::eachvalidator::new()","activemodel::errors::new()","activemodel::name::new()","activemodel::observer::new()","activemodel::observerarray::new()","activemodel::validations::acceptancevalidator::new()","activemodel::validations::lengthvalidator::new()","activemodel::validator::new()","activerecord::attributeassignmenterror::new()","activerecord::base::new()","activerecord::connectionadapters::connectionhandler::new()","activerecord::connectionadapters::connectionmanagement::new()","activerecord::connectionadapters::connectionpool::new()","activerecord::connectionadapters::mysql2adapter::new()","activerecord::connectionadapters::mysqladapter::new()","activerecord::connectionadapters::postgresqladapter::new()","activerecord::connectionadapters::sqliteadapter::new()","activerecord::connectionadapters::sqliteadapter::version::new()","activerecord::connectionadapters::table::new()","activerecord::connectionadapters::tabledefinition::new()","activerecord::dynamicfindermatch::new()","activerecord::dynamicscopematch::new()","activerecord::fixtures::new()","activerecord::hasmanythroughnestedassociationsarereadonly::new()","activerecord::identitymap::middleware::new()","activerecord::logsubscriber::new()","activerecord::migration::new()","activerecord::migration::commandrecorder::new()","activerecord::migrationproxy::new()","activerecord::multiparameterassignmenterrors::new()","activerecord::querycache::new()","activerecord::recordinvalid::new()","activerecord::reflection::macroreflection::new()","activerecord::relation::new()","activerecord::relation#new()","activerecord::result::new()","activerecord::sessionstore::session::new()","activerecord::sessionstore::sqlbypass::new()","activerecord::validations::uniquenessvalidator::new()","activerecord::wrappeddatabaseexception::new()","activeresource::base::new()","activeresource::connection::new()","activeresource::request::new()","activeresource::response::new()","activeresource::sslerror::new()","activeresource::timeouterror::new()","activesupport::backtracecleaner::new()","activesupport::bufferedlogger::new()","activesupport::cache::compressedmemcachestore::new()","activesupport::cache::entry::new()","activesupport::cache::filestore::new()","activesupport::cache::memcachestore::new()","activesupport::cache::memorystore::new()","activesupport::cache::store::new()","activesupport::cache::strategy::localcache::localstore::new()","activesupport::cache::synchronizedmemorystore::new()","activesupport::dependencies::classcache#new()","activesupport::dependencies::classcache::new()","activesupport::dependencies::watchstack::new()","activesupport::fileupdatechecker::new()","activesupport::filewatcher::new()","activesupport::filewatcher::backend::new()","activesupport::gzip::stream::new()","activesupport::hashwithindifferentaccess::new()","activesupport::hashwithindifferentaccess::new()","activesupport::inflector::inflections::new()","activesupport::inheritableoptions::new()","activesupport::json::encoding::encoder::new()","activesupport::logsubscriber::testhelper::mocklogger::new()","activesupport::messageencryptor::new()","activesupport::messageverifier::new()","activesupport::multibyte::chars::new()","activesupport::multibyte::unicode::unicodedatabase::new()","activesupport::notifications::event::new()","activesupport::notifications::fanout::new()","activesupport::notifications::instrumenter::new()","activesupport::safebuffer::new()","activesupport::safebuffer::safeconcaterror::new()","activesupport::testing::performance::benchmarker::new()","activesupport::testing::performance::metrics::base::new()","activesupport::testing::performance::metrics::cputime::new()","activesupport::testing::performance::performer::new()","activesupport::testing::performance::profiler::new()","activesupport::testing::proxytestresult::new()","activesupport::testing::remoteerror::new()","activesupport::timewithzone::new()","activesupport::timezone::new()","activesupport::timezone::new()","arjdbcmysql::error::new()","html::selector::new()","activeresource::base#new?()","activesupport::dependencies::watchstack#new_constants()","activeresource::base#new_element_path()","activeresource::base::new_element_path()","activesupport::hashwithindifferentaccess::new_from_hash_copying_default()","activesupport::hashwithindifferentaccess::new_from_hash_copying_default()","activerecord::persistence#new_record?()","activeresource::base#new_record?()","html::selector#next_element()","activerecord::migration#next_migration_number()","date#next_month()","time#next_month()","html::selector#next_selector()","date#next_week()","time#next_week()","date#next_year()","time#next_year()","actioncontroller::httpauthentication::digest#nonce()","activesupport::multibyte::chars#normalize()","activesupport::multibyte::unicode#normalize()","activemodel::observing::classmethods#notify_observers()","activesupport::timezone#now()","html::selector#nth_child()","actionview::helpers::formhelper#number_field()","actionview::helpers::formtaghelper#number_field_tag()","actionview::helpers::numberhelper#number_to_currency()","actionview::helpers::numberhelper#number_to_human()","actionview::helpers::numberhelper#number_to_human_size()","actionview::helpers::numberhelper#number_to_percentage()","actionview::helpers::numberhelper#number_to_phone()","actionview::helpers::numberhelper#number_with_delimiter()","actionview::helpers::numberhelper#number_with_precision()","actionview::helpers::activemodelinstancetag#object()","activemodel::observer::observe()","activemodel::observer::observed_class()","activemodel::observer::observed_classes()","activerecord::observer#observed_classes()","activemodel::observerarray#observer_class_for()","activemodel::observing::classmethods#observer_instances()","activemodel::observing::classmethods#observers()","activemodel::observing::classmethods#observers=()","activerecord::logsubscriber#odd?()","activerecord::querymethods#offset()","activesupport::xmlmini_libxmlsax::hashbuilder#on_cdata_block()","activesupport::xmlmini_libxmlsax::hashbuilder#on_characters()","activesupport::xmlmini_libxmlsax::hashbuilder#on_end_document()","activesupport::xmlmini_libxmlsax::hashbuilder#on_end_element()","activesupport::on_load()","activesupport::xmlmini_libxmlsax::hashbuilder#on_start_document()","activesupport::xmlmini_libxmlsax::hashbuilder#on_start_element()","activerecord::spawnmethods#only()","html::selector#only_child()","actioncontroller::httpauthentication::digest#opaque()","activesupport::bufferedlogger#open_log()","activerecord::connectionadapters::abstractadapter#open_transactions()","actionview::helpers::formoptionshelper#option_groups_from_collection_for_select()","activesupport::json::encoding::encoder#options_for()","actionview::helpers::formoptionshelper#options_for_select()","actionview::helpers::formoptionshelper#options_from_collection_for_select()","activerecord::connectionadapters::schemastatements#options_include_default?()","activesupport::multibyte::chars#ord()","string#ord()","activerecord::querymethods#order()","activesupport::inflector#ordinalize()","integer#ordinalize()","activeresource::custommethods::orig_delete()","activesupport::safebuffer#original_concat()","activesupport::testing::performance::benchmarker#output_filename()","activesupport::testing::performance::performer#output_filename()","activesupport::testing::performance::profiler#output_filename()","activerecord::connectionadapters::databasestatements#outside_transaction?()","activerecord::connectionadapters::postgresqladapter#outside_transaction?()","range#overlaps?()","activemodel::naming::param_key()","activesupport::inflector#parameterize()","string#parameterize()","actioncontroller::testcase::behavior#paramify_values()","actioncontroller::metal#params()","actioncontroller::metal#params=()","module#parent()","module#parent_name()","activesupport::notifications::event#parent_of?()","module#parents()","activesupport::timezone#parse()","activesupport::xmlmini_libxmlsax#parse()","activesupport::xmlmini_nokogirisax#parse()","activesupport::json::parse_error()","activemodel::validations::numericalityvalidator#parse_raw_value_as_a_number()","activemodel::validations::numericalityvalidator#parse_raw_value_as_an_integer()","uri::parser()","activeresource::base::password()","activemodel::securepassword::instancemethodsonactivation#password=()","activeresource::base::password=()","activeresource::connection#password=()","actionview::helpers::formhelper#password_field()","actionview::helpers::formtaghelper#password_field_tag()","activesupport::timewithzone#past?()","date#past?()","datetime#past?()","time#past?()","loaderror#path()","loaderror#path()","actionview::helpers::assettaghelper#path_to_audio()","actionview::helpers::assettaghelper#path_to_image()","actionview::helpers::assettaghelper::javascripttaghelpers#path_to_javascript()","actionview::helpers::assettaghelper::stylesheettaghelpers#path_to_stylesheet()","actionview::helpers::assettaghelper#path_to_video()","activesupport::testing::pending#pending()","activerecord::validations#perform_validations()","actioncontroller::compatibility#performed?()","activesupport::timewithzone#period()","activesupport::timezone#period_for_local()","activesupport::timezone#period_for_utc()","activerecord::persistence#persisted?()","activeresource::base#persisted?()","numeric#petabyte()","numeric#petabytes()","actionview::helpers::formhelper#phone_field()","actionview::helpers::formtaghelper#phone_field_tag()","activerecord::connectionadapters::mysql2adapter#pk_and_sequence_for()","activemodel::naming::plural()","activesupport::inflector::inflections#plural()","actionview::helpers::texthelper#pluralize()","activesupport::inflector#pluralize()","string#pluralize()","activerecord::base::pluralize_table_names()","activesupport::dependencies::watchstack#pop_modules()","actioncontroller::testcase::behavior#post()","activeresource::connection#post()","activeresource::custommethods::post()","activeresource::custommethods::instancemethods#post()","activerecord::connectionadapters::postgresqladapter#postgresql_version()","float#precisionless_round()","activerecord::connectionadapters::abstractadapter#prefetch_primary_key?()","activeresource::base::prefix()","activeresource::base::prefix=()","activeresource::base::prefix_source()","activerecord::querymethods#preload()","actioncontroller::testcase::behavior::classmethods#prepare_controller_class()","object#presence()","object#present?()","date#prev_month()","time#prev_month()","date#prev_week()","time#prev_week()","date#prev_year()","time#prev_year()","activemodel::dirty#previous_changes()","activerecord::attributemethods::primarykey::classmethods#primary_key()","activerecord::connectionadapters::mysql2adapter#primary_key()","activerecord::connectionadapters::mysqladapter#primary_key()","activerecord::connectionadapters::postgresqladapter#primary_key()","activerecord::connectionadapters::tabledefinition#primary_key()","activeresource::base::primary_key()","activerecord::attributemethods::primarykey::classmethods#primary_key=()","activerecord::base::primary_key_prefix_type()","activesupport::memoizable::instancemethods#prime_cache()","actioncontroller::middleware#process()","actioncontroller::templateassertions#process()","actioncontroller::testcase::behavior#process()","actioncontroller::instrumentation#process_action()","actioncontroller::logsubscriber#process_action()","actioncontroller::paramswrapper#process_action()","html::whitelistsanitizer#process_attributes_for()","html::fullsanitizer#process_node()","html::linksanitizer#process_node()","html::sanitizer#process_node()","html::whitelistsanitizer#process_node()","actionview::base::process_view_paths()","actioncontroller::testing#process_with_new_base_test()","activesupport::testing::performance::metrics::base#profile()","actioncontroller::requestforgeryprotection#protect_against_forgery?()","actioncontroller::requestforgeryprotection::classmethods#protect_from_forgery()","activemodel::massassignmentsecurity::classmethods#protected_attributes()","actionview::helpers::capturehelper#provide()","activeresource::base::proxy()","activeresource::base::proxy=()","activeresource::connection#proxy=()","activesupport::multibyte::proxy_class()","activesupport::multibyte::proxy_class=()","activesupport::cache::memorystore#prune()","activesupport::cache::memorystore#pruning?()","rails::public_path()","activesupport::notifications::publish()","activesupport::notifications::fanout#publish()","actioncontroller::testcase::behavior#put()","activeresource::connection#put()","activeresource::custommethods::put()","activeresource::custommethods::instancemethods#put()","actionview::nullresolver#query()","activerecord::attributemethods::query#query_attribute()","kernel#quietly()","activerecord::connectionadapters::mysql2adapter#quote()","activerecord::connectionadapters::mysqladapter#quote()","activerecord::connectionadapters::quoting#quote()","activerecord::connectionadapters::quoting#quote_column_name()","activerecord::connectionadapters::mysql2adapter#quote_string()","activerecord::connectionadapters::quoting#quote_string()","activerecord::connectionadapters::abstractadapter#quote_table_name()","activerecord::connectionadapters::postgresqladapter#quote_table_name()","activerecord::connectionadapters::quoting#quote_table_name()","activerecord::connectionadapters::mysql2adapter#quoted_columns_for_index()","activerecord::connectionadapters::mysqladapter#quoted_columns_for_index()","activerecord::connectionadapters::schemastatements#quoted_columns_for_index()","activerecord::connectionadapters::quoting#quoted_date()","activerecord::connectionadapters::mysql2adapter#quoted_false()","activerecord::connectionadapters::mysqladapter#quoted_false()","activerecord::connectionadapters::quoting#quoted_false()","activerecord::locking::optimistic::classmethods#quoted_locking_column()","activerecord::attributemethods::primarykey::classmethods#quoted_primary_key()","activerecord::base::quoted_table_name()","activerecord::connectionadapters::mysql2adapter#quoted_true()","activerecord::connectionadapters::mysqladapter#quoted_true()","activerecord::connectionadapters::quoting#quoted_true()","actionview::helpers::formbuilder#radio_button()","actionview::helpers::formhelper#radio_button()","actionview::helpers::instancetag::radio_button_checked?()","actionview::helpers::formtaghelper#radio_button_tag()","activesupport::basicobject#raise()","actionview::helpers::formhelper#range_field()","actionview::helpers::formtaghelper#range_field_tag()","actionview::helpers::outputsafetyhelper#raw()","activerecord::connectionadapters::abstractadapter#raw_connection()","activesupport::cache::entry#raw_value()","activerecord::attributemethods::write#raw_write_attribute()","activesupport::cache::store#read()","activerecord::attributemethods::read#read_attribute()","activerecord::attributemethods::beforetypecast#read_attribute_before_type_cast()","activesupport::cache::filestore#read_entry()","activesupport::cache::strategy::localcache::localstore#read_entry()","actioncontroller::caching::fragments#read_fragment()","activesupport::cache::memcachestore#read_multi()","activesupport::cache::store#read_multi()","date#readable_inspect()","datetime#readable_inspect()","activerecord::querymethods#readonly()","activerecord::base#readonly!()","activerecord::base#readonly?()","activerecord::base::readonly_attributes()","actionmailer::base::receive()","activerecord::connectionadapters::abstractadapter#reconnect!()","activerecord::connectionadapters::mysql2adapter#reconnect!()","activerecord::connectionadapters::mysqladapter#reconnect!()","activerecord::connectionadapters::postgresqladapter#reconnect!()","activerecord::migration::commandrecorder#record()","activesupport::testing::performance::benchmarker#record()","activesupport::testing::performance::profiler#record()","actioncontroller::recordidentifier#record_key_for_dom_id()","activerecord::connectionadapters::mysql2adapter#recreate_database()","actioncontroller::testresponse#recycle!()","actioncontroller::testing#recycle!()","module#redefine_method()","actioncontroller::flash#redirect_to()","actioncontroller::instrumentation#redirect_to()","actioncontroller::logsubscriber#redirect_to()","actioncontroller::redirecting#redirect_to()","activerecord::connectionadapters::table#references()","activerecord::connectionadapters::tabledefinition#references()","activerecord::reflection::classmethods#reflect_on_aggregation()","activerecord::reflection::classmethods#reflect_on_all_aggregations()","activerecord::reflection::classmethods#reflect_on_all_associations()","activerecord::reflection::classmethods#reflect_on_all_autosave_associations()","activerecord::reflection::classmethods#reflect_on_association()","actionview::template#refresh()","actionmailer::base::register_interceptor()","actionmailer::base::register_interceptors()","actionview::helpers::assettaghelper::javascripttaghelpers::classmethods#register_javascript_expansion()","actionmailer::base::register_observer()","actionmailer::base::register_observers()","actionview::helpers::assettaghelper::stylesheettaghelpers::classmethods#register_stylesheet_expansion()","activesupport::hashwithindifferentaccess#regular_update()","activesupport::hashwithindifferentaccess#regular_update()","activesupport::hashwithindifferentaccess#regular_writer()","activesupport::hashwithindifferentaccess#regular_writer()","activerecord::identitymap#reinit_with()","activerecord::connectionadapters::connectionpool#release_connection()","activerecord::connectionadapters::abstractadapter#release_savepoint()","activerecord::connectionadapters::mysql2adapter#release_savepoint()","activerecord::connectionadapters::mysqladapter#release_savepoint()","activerecord::connectionadapters::postgresqladapter#release_savepoint()","activerecord::connectionadapters::sqliteadapter#release_savepoint()","activerecord::autosaveassociation#reload()","activerecord::persistence#reload()","activerecord::relation#reload()","activeresource::base#reload()","i18n::railtie::reloader()","activerecord::transactions#remember_transaction_record_state()","activerecord::connectionadapters::table#remove()","activerecord::identitymap::remove()","activerecord::connectionadapters::table#remove_belongs_to()","activerecord::identitymap::remove_by_id()","activerecord::connectionadapters::schemastatements#remove_column()","activerecord::connectionadapters::mysqladapter#remove_column_sql()","activerecord::connectionadapters::schemastatements#remove_columns()","activerecord::base::remove_connection()","activerecord::connectionadapters::connectionhandler#remove_connection()","activesupport::backtracecleaner#remove_filters!()","activerecord::connectionadapters::schemastatements#remove_index()","activerecord::connectionadapters::table#remove_index()","activerecord::connectionadapters::mysqladapter#remove_index_sql()","activemodel::massassignmentsecurity::permissionset#remove_multiparameter_id()","module#remove_possible_method()","activerecord::connectionadapters::table#remove_references()","activeresource::formats::remove_root()","activesupport::backtracecleaner#remove_silencers!()","activerecord::connectionadapters::schemastatements#remove_timestamps()","activerecord::connectionadapters::table#remove_timestamps()","activerecord::connectionadapters::mysqladapter#remove_timestamps_sql()","activerecord::connectionadapters::table#rename()","activerecord::connectionadapters::mysql2adapter#rename_column()","activerecord::connectionadapters::postgresqladapter#rename_column()","activerecord::connectionadapters::schemastatements#rename_column()","activerecord::connectionadapters::mysqladapter#rename_column_sql()","activerecord::connectionadapters::postgresqladapter#rename_index()","activerecord::connectionadapters::schemastatements#rename_index()","activesupport::xmlmini#rename_key()","activerecord::connectionadapters::mysql2adapter#rename_table()","activerecord::connectionadapters::mysqladapter#rename_table()","activerecord::connectionadapters::postgresqladapter#rename_table()","activerecord::connectionadapters::sqliteadapter#rename_table()","activerecord::connectionadapters::schemastatements#rename_table()","actioncontroller::instrumentation#render()","actionview::helpers::renderinghelper#render()","actionview::renderer#render()","actionview::template#render()","actionview::template::actionview::template::template::handler#render()","actionview::testcase::behavior#render()","actionview::testcase::behavior::locals#render()","actionview::renderer#render_body()","actionview::logsubscriber#render_collection()","actionview::logsubscriber#render_partial()","actionview::logsubscriber#render_template()","actioncontroller::compatibility#render_to_body()","actioncontroller::renderers#render_to_body()","actioncontroller::rendering#render_to_string()","activerecord::querymethods#reorder()","activesupport::multibyte::unicode#reorder_characters()","activesupport::testing::performance::performer#report()","activerecord::identitymap::repository()","activeresource::logsubscriber#request()","actioncontroller::httpauthentication::basic::controllermethods#request_http_basic_authentication()","actioncontroller::httpauthentication::digest::controllermethods#request_http_digest_authentication()","actioncontroller::httpauthentication::token::controllermethods#request_http_token_authentication()","activeresource::connection::requests()","activeresource::httpmock::requests()","activerecord::testfixtures::classmethods#require_fixture_classes()","kernel#require_library_or_gem()","activesupport::timezone::require_tzinfo()","activerecord::connectionadapters::abstractadapter#requires_reloading?()","activerecord::connectionadapters::mysql2adapter#requires_reloading?()","activerecord::connectionadapters::sqliteadapter#requires_reloading?()","actioncontroller::compatibility#rescue_action()","actioncontroller::testcase::behavior#rescue_action_in_public!()","actioncontroller::testcase::raiseactionexceptions#rescue_action_without_handler()","activesupport::rescuable::classmethods#rescue_from()","actioncontroller::rescue#rescue_with_handler()","activesupport::rescuable#rescue_with_handler()","activerecord::relation#reset()","activerecord::connectionadapters::abstractadapter#reset!()","activerecord::connectionadapters::mysql2adapter#reset!()","activerecord::connectionadapters::mysqladapter#reset!()","activerecord::connectionadapters::postgresqladapter#reset!()","activeresource::httpmock::reset!()","activerecord::fixtures::reset_cache()","activesupport::callbacks::classmethods#reset_callbacks()","activerecord::base::reset_column_information()","activerecord::countercache#reset_counters()","actionview::helpers::texthelper#reset_cycle()","activerecord::locking::optimistic::classmethods#reset_locking_column()","activerecord::logsubscriber::reset_runtime()","activerecord::connectionadapters::databasestatements#reset_sequence!()","actioncontroller::rackdelegation#reset_session()","actioncontroller::responder#resource_location()","actioncontroller::responder#resourceful?()","actioncontroller::responder#respond()","actioncontroller::mimeresponds#respond_to()","actioncontroller::mimeresponds::classmethods#respond_to()","activeresource::httpmock::respond_to()","activemodel::attributemethods#respond_to?()","activerecord::base::respond_to?()","activerecord::relation#respond_to?()","activeresource::base#respond_to?()","activesupport::multibyte::chars#respond_to?()","activesupport::orderedoptions#respond_to?()","activesupport::timewithzone#respond_to?()","activemodel::attributemethods#respond_to_without_attributes?()","activeresource::base#respond_to_without_attributes?()","actioncontroller::mimeresponds#respond_with()","actioncontroller::metal#response_body=()","actioncontroller::rackdelegation#response_body=()","activeresource::httpmock::responses()","activerecord::transactions#restore_transaction_record_state()","actionview::helpers::instancetag#retrieve_autoindex()","activerecord::base::retrieve_connection()","activerecord::connectionadapters::connectionhandler#retrieve_connection_pool()","actionview::helpers::instancetag#retrieve_object()","activesupport::multibyte::chars#reverse()","activesupport::hashwithindifferentaccess#reverse_merge()","activesupport::hashwithindifferentaccess#reverse_merge()","hash#reverse_merge()","activesupport::hashwithindifferentaccess#reverse_merge!()","activesupport::hashwithindifferentaccess#reverse_merge!()","hash#reverse_merge!()","activerecord::querymethods#reverse_order()","hash#reverse_update()","activesupport::timewithzone#rfc2822()","date#rfc3339()","activesupport::timewithzone#rfc822()","activesupport::multibyte::chars#rindex()","activesupport::multibyte::chars#rjust()","activerecord::transactions#rollback_active_record_state!()","activerecord::connectionadapters::databasestatements#rollback_db_transaction()","activerecord::connectionadapters::mysql2adapter#rollback_db_transaction()","activerecord::connectionadapters::postgresqladapter#rollback_db_transaction()","activerecord::connectionadapters::abstractadapter#rollback_to_savepoint()","activerecord::connectionadapters::mysql2adapter#rollback_to_savepoint()","activerecord::connectionadapters::mysqladapter#rollback_to_savepoint()","activerecord::connectionadapters::postgresqladapter#rollback_to_savepoint()","activerecord::connectionadapters::sqliteadapter#rollback_to_savepoint()","activerecord::connectionadapters::databasestatements#rollback_transaction_records()","rails::root()","float#round()","activemodel::naming::route_key()","activesupport::multibyte::chars#rstrip()","activesupport::testing::isolation::minitest#run()","activesupport::testing::isolation::testunit#run()","activesupport::testing::performance::benchmarker#run()","activesupport::testing::performance::forclassictestunit#run()","activesupport::testing::performance::forminitest#run()","activesupport::testing::performance::profiler#run()","activesupport::testing::setupandteardown::forclassictestunit#run()","activesupport::testing::setupandteardown::forminitest#run()","activesupport::callbacks#run_callbacks()","activesupport::testing::performance#run_gc()","activesupport::testing::isolation::forking#run_in_isolation()","activesupport::testing::isolation::subprocess#run_in_isolation()","activerecord::testfixtures#run_in_transaction?()","activesupport::run_load_hooks()","activesupport::testing::performance#run_profile()","activesupport::testing::performance::forclassictestunit#run_test()","activesupport::testing::performance::forminitest#run_test()","activemodel::validations#run_validations!()","activemodel::validations::callbacks#run_validations!()","activesupport::testing::performance#run_warmup()","activerecord::logsubscriber::runtime()","activerecord::logsubscriber::runtime=()","actionview::helpers::texthelper#safe_concat()","activesupport::safebuffer#safe_concat()","actionview::helpers::outputsafetyhelper#safe_join()","array#sample()","actionview::helpers::sanitizehelper#sanitize()","activemodel::massassignmentsecurity::sanitizer#sanitize()","html::fullsanitizer#sanitize()","html::sanitizer#sanitize()","activerecord::base::sanitize_conditions()","actionview::helpers::sanitizehelper#sanitize_css()","html::whitelistsanitizer#sanitize_css()","actioncontroller::recordidentifier#sanitize_dom_id()","activemodel::massassignmentsecurity#sanitize_for_mass_assignment()","activerecord::connectionadapters::databasestatements#sanitize_limit()","activerecord::base::sanitize_sql()","activerecord::base::sanitize_sql_array()","activerecord::base::sanitize_sql_for_assignment()","activerecord::base::sanitize_sql_for_conditions()","activerecord::base::sanitize_sql_hash()","activerecord::base::sanitize_sql_hash_for_assignment()","activerecord::base::sanitize_sql_hash_for_conditions()","html::linksanitizer#sanitizeable?()","html::sanitizer#sanitizeable?()","activerecord::persistence#save()","activerecord::sessionstore::sqlbypass#save()","activerecord::validations#save()","activeresource::base#save()","activerecord::persistence#save!()","activerecord::validations#save!()","activeresource::base#save!()","activeresource::validations#save_with_validation()","activerecord::migration#say()","activerecord::migration#say_with_time()","activeresource::base::schema()","activeresource::base#schema()","activeresource::base::schema=()","activerecord::base::schema_format()","activerecord::connectionadapters::postgresqladapter#schema_search_path()","activerecord::connectionadapters::postgresqladapter#schema_search_path=()","activerecord::namedscope::classmethods#scope()","activerecord::relation#scope_for_create()","activerecord::namedscope::classmethods#scoped()","activerecord::relation#scoping()","actionview::helpers::formhelper#search_field()","actionview::helpers::formtaghelper#search_field_tag()","array#second()","numeric#second()","numeric#seconds()","datetime#seconds_since_midnight()","time#seconds_since_midnight()","activesupport::timezone::seconds_to_utc_offset()","actioncontroller::httpauthentication::digest#secret_token()","actionview::helpers::formbuilder#select()","actionview::helpers::formoptionshelper#select()","activerecord::connectionadapters::databasestatements#select()","activerecord::querymethods#select()","html::selector#select()","html::tag#select()","activerecord::connectionadapters::databasestatements#select_all()","activerecord::connectionadapters::querycache#select_all()","actionview::helpers::datehelper#select_date()","actionview::helpers::datehelper#select_datetime()","actionview::helpers::datehelper#select_day()","html::selector#select_first()","actionview::helpers::datehelper#select_hour()","actionview::helpers::datehelper#select_minute()","actionview::helpers::datehelper#select_month()","activerecord::connectionadapters::databasestatements#select_one()","activerecord::connectionadapters::databasestatements#select_rows()","activerecord::connectionadapters::mysql2adapter#select_rows()","activerecord::connectionadapters::mysqladapter#select_rows()","activerecord::connectionadapters::postgresqladapter#select_rows()","activerecord::connectionadapters::sqliteadapter#select_rows()","actionview::helpers::datehelper#select_second()","actionview::helpers::formtaghelper#select_tag()","actionview::helpers::datehelper#select_time()","activerecord::connectionadapters::databasestatements#select_value()","activerecord::connectionadapters::databasestatements#select_values()","actionview::helpers::datehelper#select_year()","html::selector()","actioncontroller::implicitrender#send_action()","actioncontroller::datastreaming#send_data()","actioncontroller::instrumentation#send_data()","actioncontroller::logsubscriber#send_data()","actioncontroller::datastreaming#send_file()","actioncontroller::instrumentation#send_file()","actioncontroller::logsubscriber#send_file()","activerecord::base::sequence_name=()","activerecord::connectionadapters::postgresqladapter#serial_sequence()","activemodel::serialization#serializable_hash()","activerecord::serialization#serializable_hash()","activerecord::base::serialize()","activerecord::connectionadapters::postgresqladapter#session_auth=()","activerecord::sessionstore::sqlbypass::session_id_column()","activemodel::errors#set()","activesupport::callbacks::classmethods#set_callback()","actionmailer::base#set_content_type()","activemodel::observerarray#set_enablement()","activerecord::testfixtures::classmethods#set_fixture_class()","activerecord::base::set_inheritance_column()","activerecord::locking::optimistic::classmethods#set_locking_column()","activesupport::logsubscriber::testhelper#set_logger()","activeresource::base::set_prefix()","activerecord::attributemethods::primarykey::classmethods#set_primary_key()","activerecord::base::set_sequence_name()","activerecord::connectionadapters::postgresqladapter#set_standard_conforming_strings()","activerecord::base::set_table_name()","activemodel::validations::acceptancevalidator#setup()","activemodel::validations::confirmationvalidator#setup()","activerecord::validations::uniquenessvalidator#setup()","activesupport::logsubscriber::testhelper#setup()","activesupport::testing::setupandteardown::classmethods#setup()","actioncontroller::testcase::behavior#setup_controller_request_and_response()","activerecord::testfixtures::classmethods#setup_fixture_accessors()","activerecord::testfixtures#setup_fixtures()","actioncontroller::templateassertions#setup_subscriptions()","actionview::testcase::behavior#setup_with_controller()","activerecord::connectionadapters::mysql2adapter#show_variable()","activerecord::connectionadapters::mysqladapter#show_variable()","activesupport::benchmarkable#silence()","activesupport::bufferedlogger#silence()","activesupport::deprecation::silence()","kernel#silence()","activesupport::cache::store#silence!()","kernel#silence_stream()","kernel#silence_warnings()","activesupport::bufferedlogger::silencer()","actionview::helpers::texthelper#simple_format()","html::selector#simple_selector()","activesupport::duration#since()","activesupport::timewithzone#since()","date#since()","datetime#since()","numeric#since()","time#since()","kernel#singleton_class()","activemodel::naming::singular()","activesupport::inflector::inflections#singular()","activesupport::inflector#singularize()","string#singularize()","activeresource::base::site()","activeresource::base::site=()","activeresource::connection#site=()","activemodel::errors#size()","activerecord::fixtures#size()","activerecord::relation#size()","activesupport::cache::entry#size()","activesupport::multibyte::chars#size()","activesupport::callbacks::classmethods#skip_callback()","actionview::lookupcontext::details#skip_default_locale!()","activesupport::multibyte::chars#slice()","hash#slice()","hash#slice!()","activesupport::multibyte::chars#split()","array#split()","activerecord::logsubscriber#sql()","activerecord::connectionadapters::databasestatements#sql_for_insert()","activerecord::connectionadapters::postgresqladapter#sql_for_insert()","activerecord::connectionadapters::databaselimits#sql_query_length()","activerecord::connectionadapters::sqliteadapter#sqlite_version()","string#squish()","string#squish!()","activeresource::base::ssl_options()","activeresource::base::ssl_options=()","activeresource::connection#ssl_options=()","actioncontroller::conditionalget#stale?()","activesupport::xmlmini_nokogirisax::hashbuilder#start_document()","activesupport::xmlmini_nokogirisax::hashbuilder#start_element()","actioncontroller::logsubscriber#start_processing()","activemodel::observerarray#start_transaction()","activesupport::cache::memcachestore#stats()","actioncontroller::metal#status()","actioncontroller::metal#status=()","range#step_with_blockless()","activerecord::base::sti_name()","activesupport::dependencies::classcache#store()","activesupport::hashwithindifferentaccess#store()","activesupport::hashwithindifferentaccess#store()","actioncontroller::streaming::classmethods#stream()","activesupport::timewithzone#strftime()","activesupport::hashwithindifferentaccess#stringify_keys()","activesupport::hashwithindifferentaccess#stringify_keys()","hash#stringify_keys()","activesupport::hashwithindifferentaccess#stringify_keys!()","activesupport::hashwithindifferentaccess#stringify_keys!()","hash#stringify_keys!()","activesupport::multibyte::chars#strip()","string#strip_heredoc()","actionview::helpers::sanitizehelper#strip_links()","actionview::helpers::sanitizehelper#strip_tags()","activerecord::connectionadapters::mysql2adapter#structure_dump()","activerecord::connectionadapters::schemastatements#structure_dump()","actionview::helpers::assettaghelper::stylesheettaghelpers#stylesheet_link_tag()","actionview::helpers::assettaghelper::stylesheettaghelpers#stylesheet_path()","actionview::helpers::formbuilder#submit()","actionview::helpers::formtaghelper#submit_tag()","activesupport::notifications::subscribe()","activesupport::notifications::fanout#subscribe()","activerecord::connectionadapters::abstractadapter#substitute_at()","activerecord::connectionadapters::mysql2adapter#substitute_at()","activerecord::connectionadapters::postgresqladapter#substitute_at()","activeresource::response#success?()","activerecord::calculations#sum()","enumerable#sum()","date#sunday()","class#superclass_delegating_accessor()","activerecord::connectionadapters::sqliteadapter#supports_add_column?()","activerecord::connectionadapters::abstractadapter#supports_bulk_alter?()","activerecord::connectionadapters::abstractadapter#supports_count_distinct?()","activerecord::connectionadapters::abstractadapter#supports_ddl_transactions?()","activerecord::connectionadapters::postgresqladapter#supports_ddl_transactions?()","activerecord::connectionadapters::sqliteadapter#supports_ddl_transactions?()","activerecord::connectionadapters::postgresqladapter#supports_insert_with_returning?()","activerecord::connectionadapters::abstractadapter#supports_migrations?()","activerecord::connectionadapters::mysql2adapter#supports_migrations?()","activerecord::connectionadapters::postgresqladapter#supports_migrations?()","activerecord::connectionadapters::abstractadapter#supports_primary_key?()","activerecord::connectionadapters::mysql2adapter#supports_primary_key?()","activerecord::connectionadapters::abstractadapter#supports_savepoints?()","activerecord::connectionadapters::mysql2adapter#supports_savepoints?()","activerecord::connectionadapters::postgresqladapter#supports_savepoints?()","activerecord::connectionadapters::sqliteadapter#supports_savepoints?()","activerecord::connectionadapters::databasestatements#supports_statement_cache?()","activerecord::connectionadapters::mysqladapter#supports_statement_cache?()","activerecord::connectionadapters::postgresqladapter#supports_statement_cache?()","activerecord::connectionadapters::sqliteadapter#supports_statement_cache?()","actionview::template#supports_streaming?()","actionview::template::handlers::erb#supports_streaming?()","kernel#suppress()","activerecord::migration#suppress_messages()","activesupport::hashwithindifferentaccess#symbolize_keys()","activesupport::hashwithindifferentaccess#symbolize_keys()","hash#symbolize_keys()","hash#symbolize_keys!()","activerecord::base::symbolized_base_class()","activerecord::base::symbolized_sti_name()","module#synchronize()","actionview::helpers::translationhelper#t()","activerecord::connectionadapters::schemastatements#table_alias_for()","activerecord::connectionadapters::databaselimits#table_alias_length()","activerecord::connectionadapters::postgresqladapter#table_alias_length()","activerecord::base::table_exists?()","activerecord::connectionadapters::connectionpool#table_exists?()","activerecord::connectionadapters::mysql2adapter#table_exists?()","activerecord::connectionadapters::mysqladapter#table_exists?()","activerecord::connectionadapters::postgresqladapter#table_exists?()","activerecord::connectionadapters::schemastatements#table_exists?()","activerecord::base::table_name()","activerecord::sessionstore::sqlbypass::table_name()","activerecord::base::table_name=()","activerecord::connectionadapters::databaselimits#table_name_length()","activerecord::base::table_name_prefix()","activerecord::base::table_name_suffix()","activerecord::fixtures#table_rows()","activerecord::connectionadapters::sqliteadapter#table_structure()","activesupport::inflector#tableize()","string#tableize()","activerecord::connectionadapters::postgresqladapter#tables()","actionview::helpers::activemodelinstancetag#tag()","actionview::helpers::taghelper#tag()","activesupport::logsubscriber::testhelper#teardown()","activesupport::testing::setupandteardown::classmethods#teardown()","activerecord::testfixtures#teardown_fixtures()","actioncontroller::templateassertions#teardown_subscriptions()","actionview::helpers::formhelper#telephone_field()","actionview::helpers::formtaghelper#telephone_field_tag()","actionview::lookupcontext::viewpaths#template_exists?()","numeric#terabyte()","numeric#terabytes()","activesupport::testing::declarative#test()","activemodel::lint::tests#test_errors_aref()","activemodel::lint::tests#test_errors_full_messages()","activemodel::lint::tests#test_model_naming()","activemodel::lint::tests#test_persisted?()","activemodel::lint::tests#test_to_key()","activemodel::lint::tests#test_to_param()","activemodel::lint::tests#test_valid?()","actioncontroller::testcase::behavior::classmethods#tests()","actionview::testcase::behavior::classmethods#tests()","actionview::helpers::formhelper#text_area()","actionview::helpers::formtaghelper#text_area_tag()","actionview::helpers::formhelper#text_field()","actionview::helpers::formtaghelper#text_field_tag()","array#third()","activesupport::multibyte::chars#tidy_bytes()","activesupport::multibyte::unicode#tidy_bytes()","activesupport::timewithzone#time()","actionview::helpers::datehelper#time_ago_in_words()","actionview::helpers::datehelper#time_select()","actionview::helpers::formbuilder#time_select()","actionview::helpers::datehelper#time_tag()","activesupport::testing::performance::profiler#time_with_block()","time::time_with_datetime_fallback()","actionview::helpers::formoptionshelper#time_zone_options_for_select()","actionview::helpers::formbuilder#time_zone_select()","actionview::helpers::formoptionshelper#time_zone_select()","activeresource::base::timeout()","activeresource::base::timeout=()","activeresource::connection#timeout=()","activerecord::base::timestamped_migrations()","activerecord::connectionadapters::table#timestamps()","activerecord::connectionadapters::tabledefinition#timestamps()","activesupport::multibyte::chars#titlecase()","string#titlecase()","activesupport::inflector#titleize()","activesupport::multibyte::chars#titleize()","string#titleize()","array#to()","string#to()","activemodel::errors#to_a()","activerecord::relation#to_a()","activesupport::timewithzone#to_a()","actionview::helpers::instancetag#to_boolean_select_tag()","actionview::helpers::instancetag#to_check_box_tag()","actionview::helpers::instancetag#to_content_tag()","bigdecimal#to_d()","date#to_date()","datetime#to_date()","mysql::time#to_date()","string#to_date()","activesupport::timewithzone#to_datetime()","date#to_datetime()","datetime#to_datetime()","string#to_datetime()","array#to_default_s()","date#to_default_s()","datetime#to_default_s()","range#to_default_s()","time#to_default_s()","activesupport::timewithzone#to_f()","datetime#to_f()","actioncontroller::responder#to_format()","activesupport::timewithzone#to_formatted_s()","array#to_formatted_s()","bigdecimal#to_formatted_s()","date#to_formatted_s()","datetime#to_formatted_s()","range#to_formatted_s()","time#to_formatted_s()","activemodel::errors#to_hash()","activerecord::result#to_hash()","activesupport::hashwithindifferentaccess#to_hash()","activesupport::hashwithindifferentaccess#to_hash()","actioncontroller::responder#to_html()","activesupport::timewithzone#to_i()","datetime#to_i()","actionview::helpers::instancetag#to_input_field_tag()","actioncontroller::responder#to_js()","activeresource::base#to_json()","activemodel::conversion#to_key()","activerecord::attributemethods::primarykey#to_key()","actionview::helpers::instancetag#to_label_tag()","actionview::helpers::formbuilder#to_model()","activemodel::conversion#to_model()","actionview::helpers::instancetag#to_number_field_tag()","hash#to_options()","activesupport::hashwithindifferentaccess#to_options!()","activesupport::hashwithindifferentaccess#to_options!()","hash#to_options!()","activemodel::conversion#to_param()","activerecord::base#to_param()","activesupport::safebuffer#to_param()","array#to_param()","falseclass#to_param()","hash#to_param()","nilclass#to_param()","object#to_param()","trueclass#to_param()","actionview::filesystemresolver#to_path()","array#to_query()","hash#to_query()","object#to_query()","actionview::helpers::instancetag#to_radio_button_tag()","actionview::filesystemresolver#to_s()","actionview::fixtureresolver#to_s()","activeresource::request#to_s()","activeresource::sslerror#to_s()","activeresource::timeouterror#to_s()","activesupport::safebuffer#to_s()","activesupport::timewithzone#to_s()","activesupport::timezone#to_s()","array#to_s()","bigdecimal#to_s()","date#to_s()","datetime#to_s()","range#to_s()","time#to_s()","array#to_sentence()","activerecord::connectionadapters::databasestatements#to_sql()","activerecord::connectionadapters::tabledefinition#to_sql()","activerecord::relation#to_sql()","activesupport::xmlmini#to_tag()","actionview::helpers::instancetag#to_text_area_tag()","activesupport::timewithzone#to_time()","date#to_time()","datetime#to_time()","string#to_time()","time#to_time()","date#to_time_in_current_zone()","activemodel::errors#to_xml()","activemodel::serializers::xml#to_xml()","activerecord::serialization#to_xml()","activeresource::base#to_xml()","array#to_xml()","hash#to_xml()","activesupport::safebuffer#to_yaml()","activesupport::timewithzone#to_yaml()","bigdecimal#to_yaml()","activesupport::timezone#today()","activesupport::timewithzone#today?()","date#today?()","time#today?()","activerecord::persistence#toggle()","activerecord::persistence#toggle!()","actioncontroller::httpauthentication::token#token_and_options()","html::sanitizer#tokenize()","html::whitelistsanitizer#tokenize()","date#tomorrow()","date::tomorrow()","time#tomorrow()","activerecord::persistence#touch()","activemodel::observerarray#transaction()","activerecord::connectionadapters::databasestatements#transaction()","activerecord::transactions#transaction()","activerecord::transactions::classmethods#transaction()","activerecord::transactions#transaction_include_action?()","activerecord::connectionadapters::abstractadapter#transaction_joinable=()","activerecord::transactions#transaction_record_state()","actionview::helpers::translationhelper#translate()","activerecord::connectionadapters::abstractadapter#translate_exception()","activerecord::connectionadapters::mysql2adapter#translate_exception()","activerecord::connectionadapters::mysqladapter#translate_exception()","activerecord::connectionadapters::postgresqladapter#translate_exception()","activerecord::connectionadapters::sqliteadapter#translate_exception()","activesupport::inflector#transliterate()","activesupport::filewatcher#trigger()","activesupport::filewatcher::backend#trigger()","actionview::helpers::texthelper#truncate()","string#truncate()","nilclass#try()","object#try()","activerecord::testfixtures::classmethods#try_to_load_dependency()","activerecord::connectionadapters::postgresqladapter::tabledefinition#tsvector()","activesupport::timewithzone#tv_sec()","activerecord::connectionadapters::mysqladapter#type_cast()","activerecord::connectionadapters::postgresqladapter#type_cast()","activerecord::connectionadapters::quoting#type_cast()","activerecord::connectionadapters::mysql2adapter#type_to_sql()","activerecord::connectionadapters::mysqladapter#type_to_sql()","activerecord::connectionadapters::postgresqladapter#type_to_sql()","activesupport::multibyte::unicode#u_unpack()","activerecord::connectionadapters::querycache#uncached()","activerecord::querycache::classmethods#uncached()","activesupport::inflector::inflections#uncountable()","activemodel::naming::uncountable?()","activemodel::attributemethods::classmethods#undefine_attribute_methods()","activerecord::attributemethods::classmethods#undefine_attribute_methods()","activesupport::inflector#underscore()","string#underscore()","object#unescape()","activerecord::connectionadapters::postgresqladapter#unescape_bytea()","array#uniq_by()","array#uniq_by!()","activesupport::memoizable::instancemethods#unmemoize_all()","activerecord::attributemethods::read#unserializable_attribute?()","activerecord::attributemethods::read#unserialize_attribute()","activesupport::notifications::unsubscribe()","activesupport::notifications::fanout#unsubscribe()","activesupport::duration#until()","numeric#until()","activerecord::migration#up()","activesupport::multibyte::chars#upcase()","activerecord::connectionadapters::databasestatements#update()","activerecord::relation#update()","activeresource::base#update()","activesupport::hashwithindifferentaccess#update()","activesupport::hashwithindifferentaccess#update()","activerecord::relation#update_all()","activerecord::persistence#update_attribute()","activeresource::base#update_attribute()","activerecord::persistence#update_attributes()","activeresource::base#update_attributes()","activerecord::persistence#update_attributes!()","activerecord::persistence#update_column()","activerecord::countercache#update_counters()","activerecord::locking::optimistic::classmethods#update_counters()","actionview::lookupcontext::details#update_details()","activerecord::connectionadapters::databasestatements#update_sql()","activerecord::connectionadapters::mysql2adapter#update_sql()","activerecord::connectionadapters::postgresqladapter#update_sql()","actionview::helpers::atomfeedhelper::atomfeedbuilder#updated()","activesupport::fileupdatechecker#updated_at()","actionview::helpers::formhelper#url_field()","actionview::helpers::formtaghelper#url_field_tag()","actioncontroller::metal#url_for()","actionview::helpers::urlhelper#url_for()","actioncontroller::urlfor#url_options()","actionview::helpers::urlhelper#url_options()","activesupport::timezone::us_zones()","actioncontroller::metal::use()","activerecord::identitymap::use()","actioncontroller::renderers::classmethods#use_renderer()","actioncontroller::renderers::classmethods#use_renderers()","time::use_zone()","activesupport::timewithzone#usec()","activeresource::base::user()","activeresource::base::user=()","activeresource::connection#user=()","actioncontroller::httpauthentication::basic#user_name_and_password()","activerecord::testfixtures::classmethods#uses_transaction()","activerecord::testfixtures::classmethods#uses_transaction?()","activerecord::findermethods#using_limitable_reflections?()","activesupport::timewithzone#utc()","datetime#utc()","activesupport::timewithzone#utc?()","datetime#utc?()","activesupport::timewithzone#utc_offset()","activesupport::timezone#utc_offset()","datetime#utc_offset()","time::utc_time()","activesupport::timezone#utc_to_local()","activemodel::validations#valid?()","activerecord::validations#valid?()","activeresource::validations#valid?()","activerecord::connectionadapters::sqliteadapter#valid_alter_table_options()","activerecord::namedscope::classmethods#valid_scope_name?()","activemodel::eachvalidator#validate()","activemodel::validations::classmethods#validate()","activemodel::validations::presencevalidator#validate()","activemodel::validator#validate()","actioncontroller::httpauthentication::digest#validate_digest_response()","activemodel::eachvalidator#validate_each()","activemodel::validations::acceptancevalidator#validate_each()","activemodel::validations::confirmationvalidator#validate_each()","activemodel::validations::exclusionvalidator#validate_each()","activemodel::validations::formatvalidator#validate_each()","activemodel::validations::inclusionvalidator#validate_each()","activemodel::validations::lengthvalidator#validate_each()","activemodel::validations::numericalityvalidator#validate_each()","activemodel::validations::withvalidator#validate_each()","activerecord::validations::associatedvalidator#validate_each()","activerecord::validations::uniquenessvalidator#validate_each()","i18n::railtie::validate_fallbacks()","actioncontroller::httpauthentication::digest#validate_nonce()","activemodel::validations::classmethods#validates()","activemodel::validations::helpermethods#validates_acceptance_of()","activerecord::validations::classmethods#validates_associated()","activemodel::validations::helpermethods#validates_confirmation_of()","activemodel::validations::classmethods#validates_each()","activemodel::validations::helpermethods#validates_exclusion_of()","activemodel::validations::helpermethods#validates_format_of()","activemodel::validations::helpermethods#validates_inclusion_of()","activemodel::validations::helpermethods#validates_length_of()","activemodel::validations::helpermethods#validates_numericality_of()","activemodel::validations::helpermethods#validates_presence_of()","activemodel::validations::helpermethods#validates_size_of()","activerecord::validations::classmethods#validates_uniqueness_of()","activemodel::validations#validates_with()","activemodel::validations::classmethods#validates_with()","activemodel::validations::classmethods#validators()","activemodel::validations::classmethods#validators_on()","actionview::helpers::instancetag::value()","actionview::helpers::instancetag#value()","activesupport::cache::entry#value()","actionview::helpers::instancetag::value_before_type_cast()","actionview::helpers::instancetag#value_before_type_cast()","activemodel::errors#values()","activesupport::hashwithindifferentaccess#values_at()","activesupport::hashwithindifferentaccess#values_at()","actioncontroller::requestforgeryprotection#verified_request?()","activesupport::messageverifier#verify()","activerecord::connectionadapters::abstractadapter#verify!()","actioncontroller::requestforgeryprotection#verify_authenticity_token()","rails::version()","actionview::helpers::assettaghelper#video_path()","actionview::helpers::assettaghelper#video_tag()","actionview::lookupcontext::viewpaths#view_paths=()","actioncontroller::hideactions::classmethods#visible_action?()","activesupport::logsubscriber::testhelper#wait()","activesupport::notifications::fanout#wait()","activesupport::multibyte::chars::wants?()","activesupport::deprecation::warn()","activemodel::massassignmentsecurity::sanitizer#warn!()","activesupport::filewatcher#watch()","activesupport::dependencies::watchstack#watch_namespaces()","numeric#week()","numeric#weeks()","date#weeks_ago()","time#weeks_ago()","activerecord::querymethods#where()","activerecord::relation#where_values_hash()","actioncontroller::railties::paths::with()","activesupport::json::with_backend()","activesupport::xmlmini#with_backend()","activerecord::connectionadapters::connectionpool#with_connection()","activerecord::base::with_exclusive_scope()","actionview::lookupcontext::viewpaths#with_fallbacks()","activesupport::testing::performance::metrics::base#with_gc_stats()","activesupport::hashwithindifferentaccess#with_indifferent_access()","activesupport::hashwithindifferentaccess#with_indifferent_access()","hash#with_indifferent_access()","actionview::lookupcontext::details#with_layout_format()","activesupport::cache::strategy::localcache#with_local_cache()","object#with_options()","activesupport::testing::performance::benchmarker#with_output_file()","activerecord::base::with_scope()","activerecord::transactions#with_transaction_returning_status()","kernel#with_warnings()","activerecord::identitymap::without()","actioncontroller::base::without_modules()","actionview::helpers::texthelper#word_wrap()","array::wrap()","actioncontroller::paramswrapper::classmethods#wrap_parameters()","activerecord::migration#write()","activesupport::cache::store#write()","activerecord::attributemethods::write#write_attribute()","activesupport::cache::filestore#write_entry()","activesupport::cache::strategy::localcache::localstore#write_entry()","actioncontroller::caching::fragments#write_fragment()","actioncontroller::testcase::behavior#xhr()","activerecord::connectionadapters::postgresqladapter::tabledefinition#xml()","activerecord::connectionadapters::tabledefinition#xml()","actioncontroller::testcase::behavior#xml_http_request()","activesupport::timewithzone#xmlschema()","date#xmlschema()","datetime#xmlschema()","integer#year()","integer#years()","date#years_ago()","time#years_ago()","date#years_since()","time#years_since()","date::yesterday()","date#yesterday()","time#yesterday()","activesupport::timewithzone#zone()","time::zone()","time::zone=()","activesupport::timezone::zones_map()","","","","","","","","","","","","","","","","","",""],"info":[["ActionController","","ActionController.html","","<p>Includes <code>url_for</code> into the host class. The class has to provide\na <code>RouteSet</code> by implementing  the <code>_routes</code> …\n"],["ActionController::Base","","ActionController/Base.html","","<p>Action Controllers are the core of a web request in Rails. They are made up\nof one or more actions that …\n"],["ActionController::Caching","","ActionController/Caching.html","","<p>Caching is a cheap way of speeding up slow applications by keeping the\nresult of calculations, renderings, …\n"],["ActionController::Caching::Actions","","ActionController/Caching/Actions.html","","<p>Action caching is similar to page caching by the fact that the entire\noutput of the response is cached, …\n"],["ActionController::Caching::Actions::ActionCachePath","","ActionController/Caching/Actions/ActionCachePath.html","",""],["ActionController::Caching::Actions::ClassMethods","","ActionController/Caching/Actions/ClassMethods.html","",""],["ActionController::Caching::ConfigMethods","","ActionController/Caching/ConfigMethods.html","",""],["ActionController::Caching::Fragments","","ActionController/Caching/Fragments.html","","<p>Fragment caching is used for caching various blocks within  views without\ncaching the entire action as …\n"],["ActionController::Caching::Pages","","ActionController/Caching/Pages.html","","<p>Page caching is an approach to caching where the entire action output of is\nstored as a HTML file that …\n"],["ActionController::Caching::Pages::ClassMethods","","ActionController/Caching/Pages/ClassMethods.html","",""],["ActionController::Caching::Sweeping","","ActionController/Caching/Sweeping.html","","<p>Sweepers are the terminators of the caching world and responsible for\nexpiring caches when model objects …\n"],["ActionController::Compatibility","","ActionController/Compatibility.html","",""],["ActionController::ConditionalGet","","ActionController/ConditionalGet.html","",""],["ActionController::Cookies","","ActionController/Cookies.html","",""],["ActionController::DataStreaming","","ActionController/DataStreaming.html","","<p>Methods for sending arbitrary data and for streaming files to the browser,\ninstead of rendering.\n"],["ActionController::Flash","","ActionController/Flash.html","",""],["ActionController::ForceSSL","","ActionController/ForceSSL.html","","<p>This module provides a method which will redirects browser to use HTTPS\nprotocol. This will ensure that …\n"],["ActionController::ForceSSL::ClassMethods","","ActionController/ForceSSL/ClassMethods.html","",""],["ActionController::Head","","ActionController/Head.html","",""],["ActionController::Helpers","","ActionController/Helpers.html","","<p>The Rails framework provides a large number of helpers for working with\nassets, dates, forms, numbers …\n"],["ActionController::Helpers::ClassMethods","","ActionController/Helpers/ClassMethods.html","",""],["ActionController::HideActions","","ActionController/HideActions.html","","<p>Adds the ability to prevent public methods on a controller to be called as\nactions.\n"],["ActionController::HideActions::ClassMethods","","ActionController/HideActions/ClassMethods.html","",""],["ActionController::HttpAuthentication","","ActionController/HttpAuthentication.html","",""],["ActionController::HttpAuthentication::Basic","","ActionController/HttpAuthentication/Basic.html","","<p>Makes it dead easy to do HTTP Basic and Digest authentication.\n<p>Simple Basic example\n\n<pre class=\"ruby\"> <span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">PostsController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActionController::HttpAuthentication::Basic::ControllerMethods","","ActionController/HttpAuthentication/Basic/ControllerMethods.html","",""],["ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods","","ActionController/HttpAuthentication/Basic/ControllerMethods/ClassMethods.html","",""],["ActionController::HttpAuthentication::Digest","","ActionController/HttpAuthentication/Digest.html","",""],["ActionController::HttpAuthentication::Digest::ControllerMethods","","ActionController/HttpAuthentication/Digest/ControllerMethods.html","",""],["ActionController::HttpAuthentication::Token","","ActionController/HttpAuthentication/Token.html","","<p>Makes it dead easy to do HTTP Token authentication.\n<p>Simple Token example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">PostsController</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ApplicationController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActionController::HttpAuthentication::Token::ControllerMethods","","ActionController/HttpAuthentication/Token/ControllerMethods.html","",""],["ActionController::ImplicitRender","","ActionController/ImplicitRender.html","",""],["ActionController::Instrumentation","","ActionController/Instrumentation.html","","<p>Adds instrumentation to several ends in ActionController::Base. It also\nprovides some hooks related with …\n"],["ActionController::Instrumentation::ClassMethods","","ActionController/Instrumentation/ClassMethods.html","",""],["ActionController::LogSubscriber","","ActionController/LogSubscriber.html","",""],["ActionController::Metal","","ActionController/Metal.html","","<p><code>ActionController::Metal</code> is the simplest possible controller,\nproviding a valid Rack interface without ...\n"],["ActionController::Middleware","","ActionController/Middleware.html","",""],["ActionController::Middleware::ActionMiddleware","","ActionController/Middleware/ActionMiddleware.html","",""],["ActionController::MimeResponds","","ActionController/MimeResponds.html","",""],["ActionController::MimeResponds::ClassMethods","","ActionController/MimeResponds/ClassMethods.html","",""],["ActionController::ParamsWrapper","","ActionController/ParamsWrapper.html","","<p>Wraps parameters hash into nested hash. This will allow client to submit\nPOST request without having …\n"],["ActionController::ParamsWrapper::ClassMethods","","ActionController/ParamsWrapper/ClassMethods.html","",""],["ActionController::RackDelegation","","ActionController/RackDelegation.html","",""],["ActionController::Railtie","","ActionController/Railtie.html","",""],["ActionController::Railties","","ActionController/Railties.html","",""],["ActionController::Railties::Paths","","ActionController/Railties/Paths.html","",""],["ActionController::RecordIdentifier","","ActionController/RecordIdentifier.html","","<p>The record identifier encapsulates a number of naming conventions for\ndealing with records, like Active …\n"],["ActionController::Redirecting","","ActionController/Redirecting.html","",""],["ActionController::Renderers","","ActionController/Renderers.html","",""],["ActionController::Renderers::All","","ActionController/Renderers/All.html","",""],["ActionController::Renderers::ClassMethods","","ActionController/Renderers/ClassMethods.html","",""],["ActionController::Rendering","","ActionController/Rendering.html","",""],["ActionController::RequestForgeryProtection","","ActionController/RequestForgeryProtection.html","","<p>Controller actions are protected from Cross-Site Request Forgery (CSRF)\nattacks by including a token …\n"],["ActionController::RequestForgeryProtection::ClassMethods","","ActionController/RequestForgeryProtection/ClassMethods.html","",""],["ActionController::Rescue","","ActionController/Rescue.html","",""],["ActionController::Responder","","ActionController/Responder.html","","<p>Responsible for exposing a resource to different mime requests, usually\ndepending on the HTTP verb.  …\n"],["ActionController::SessionManagement","","ActionController/SessionManagement.html","",""],["ActionController::SessionManagement::ClassMethods","","ActionController/SessionManagement/ClassMethods.html","",""],["ActionController::Streaming","","ActionController/Streaming.html","","<p>Allows views to be streamed back to the client as they are rendered.\n<p>The default way Rails renders views …\n"],["ActionController::Streaming::ClassMethods","","ActionController/Streaming/ClassMethods.html","",""],["ActionController::TemplateAssertions","","ActionController/TemplateAssertions.html","",""],["ActionController::TestCase","","ActionController/TestCase.html","","<p>Superclass for ActionController functional tests. Functional tests allow\nyou to test a single controller …\n"],["ActionController::TestCase::Behavior","","ActionController/TestCase/Behavior.html","",""],["ActionController::TestCase::Behavior::ClassMethods","","ActionController/TestCase/Behavior/ClassMethods.html","",""],["ActionController::TestCase::RaiseActionExceptions","","ActionController/TestCase/RaiseActionExceptions.html","","<p>When the request.remote_addr remains the default for testing, which is\n0.0.0.0, the exception is simply …\n"],["ActionController::TestResponse","","ActionController/TestResponse.html","",""],["ActionController::Testing","","ActionController/Testing.html","",""],["ActionController::Testing::ClassMethods","","ActionController/Testing/ClassMethods.html","",""],["ActionController::UrlFor","","ActionController/UrlFor.html","",""],["ActionMailer","","ActionMailer.html","",""],["ActionMailer::Base","","ActionMailer/Base.html","","<p>Action Mailer allows you to send email from your application using a mailer\nmodel and views.\n<p>Mailer Models …\n"],["ActionView","","ActionView.html","","<p>Legacy TemplateHandler stub\n"],["ActionView::ActionView","","ActionView/ActionView.html","",""],["ActionView::ActionView::ActionView","","ActionView/ActionView/ActionView.html","",""],["ActionView::ActionView::ActionView::Base","","ActionView/ActionView/ActionView/Base.html","",""],["ActionView::Base","","ActionView/Base.html","","<p>Action View Base\n<p>Action View templates can be written in several ways. If the template file\nhas a <code>.erb</code> …\n"],["ActionView::Context","","ActionView/Context.html","","<p>Action View Context\n<p>Action View contexts are supplied to Action Controller to render template.\nThe default …\n"],["ActionView::FileSystemResolver","","ActionView/FileSystemResolver.html","","<p>A resolver that loads files from the filesystem. It allows to set your own\nresolving pattern. Such pattern …\n"],["ActionView::FixtureResolver","","ActionView/FixtureResolver.html","","<p>Use FixtureResolver in your tests to simulate the presence of files on the\nfile system. This is used …\n"],["ActionView::Helpers","","ActionView/Helpers.html","","<p>Action View Form Option Helpers\n<p>Active Model Helpers\n<p>Action View Form Helpers\n"],["ActionView::Helpers::ActiveModelHelper","","ActionView/Helpers/ActiveModelHelper.html","",""],["ActionView::Helpers::ActiveModelInstanceTag","","ActionView/Helpers/ActiveModelInstanceTag.html","",""],["ActionView::Helpers::AssetPaths","","ActionView/AssetPaths.html","",""],["ActionView::Helpers::AssetTagHelper","","ActionView/Helpers/AssetTagHelper.html","","<p>This module provides methods for generating HTML that links views to assets\nsuch as images, javascripts, …\n"],["ActionView::Helpers::AssetTagHelper::AssetIncludeTag","","ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html","",""],["ActionView::Helpers::AssetTagHelper::JavascriptIncludeTag","","ActionView/Helpers/AssetTagHelper/JavascriptIncludeTag.html","",""],["ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers","","ActionView/Helpers/AssetTagHelper/JavascriptTagHelpers.html","",""],["ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers::ClassMethods","","ActionView/Helpers/AssetTagHelper/JavascriptTagHelpers/ClassMethods.html","",""],["ActionView::Helpers::AssetTagHelper::StylesheetIncludeTag","","ActionView/Helpers/AssetTagHelper/StylesheetIncludeTag.html","",""],["ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers","","ActionView/Helpers/AssetTagHelper/StylesheetTagHelpers.html","",""],["ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers::ClassMethods","","ActionView/Helpers/AssetTagHelper/StylesheetTagHelpers/ClassMethods.html","",""],["ActionView::Helpers::AtomFeedHelper","","ActionView/Helpers/AtomFeedHelper.html","",""],["ActionView::Helpers::AtomFeedHelper::AtomBuilder","","ActionView/Helpers/AtomFeedHelper/AtomBuilder.html","",""],["ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","","ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html","",""],["ActionView::Helpers::CacheHelper","","ActionView/Helpers/CacheHelper.html","",""],["ActionView::Helpers::CaptureHelper","","ActionView/Helpers/CaptureHelper.html","","<p>CaptureHelper exposes methods to let you extract generated markup which can\nbe used in other parts of …\n"],["ActionView::Helpers::CsrfHelper","","ActionView/Helpers/CsrfHelper.html","",""],["ActionView::Helpers::DateHelper","","ActionView/Helpers/DateHelper.html","","<p>Action View Date Helpers\n<p>The Date Helper primarily creates select/option tags for different kinds of\ndates …\n"],["ActionView::Helpers::DebugHelper","","ActionView/Helpers/DebugHelper.html","",""],["ActionView::Helpers::FormBuilder","","ActionView/Helpers/FormBuilder.html","",""],["ActionView::Helpers::FormHelper","","ActionView/Helpers/FormHelper.html","","<p>Form helpers are designed to make working with resources much easier\ncompared to using vanilla HTML. …\n"],["ActionView::Helpers::FormOptionsHelper","","ActionView/Helpers/FormOptionsHelper.html","","<p>Provides a number of methods for turning different kinds of containers into\na set of option tags.\n<p>Options …\n"],["ActionView::Helpers::FormTagHelper","","ActionView/Helpers/FormTagHelper.html","","<p>Provides a number of methods for creating form tags that doesn’t rely on an\nActive Record object assigned …\n"],["ActionView::Helpers::InstanceTag","","ActionView/Helpers/InstanceTag.html","",""],["ActionView::Helpers::JavaScriptHelper","","ActionView/Helpers/JavaScriptHelper.html","",""],["ActionView::Helpers::NumberHelper","","ActionView/Helpers/NumberHelper.html","","<p>Provides methods for converting numbers into formatted strings. Methods are\nprovided for phone numbers, …\n"],["ActionView::Helpers::NumberHelper::InvalidNumberError","","ActionView/Helpers/NumberHelper/InvalidNumberError.html","","<p>Raised when argument <code>number</code> param given to the helpers is\ninvalid and the option :raise is set to  <code>true</code> …\n"],["ActionView::Helpers::OutputSafetyHelper","","ActionView/Helpers/OutputSafetyHelper.html","",""],["ActionView::Helpers::RecordTagHelper","","ActionView/Helpers/RecordTagHelper.html","",""],["ActionView::Helpers::RenderingHelper","","ActionView/Helpers/RenderingHelper.html","","<p>Action View Rendering\n<p>Implements methods that allow rendering from a view context. In order to\nuse this …\n"],["ActionView::Helpers::SanitizeHelper","","ActionView/Helpers/SanitizeHelper.html","","<p>The SanitizeHelper module provides a set of methods for scrubbing text of\nundesired HTML elements. These …\n"],["ActionView::Helpers::TagHelper","","ActionView/Helpers/TagHelper.html","","<p>Provides methods to generate HTML tags programmatically when you can’t use\na Builder. By default, they …\n"],["ActionView::Helpers::TextHelper","","ActionView/Helpers/TextHelper.html","","<p>The TextHelper module provides a set of methods for filtering, formatting\nand transforming strings, which …\n"],["ActionView::Helpers::TranslationHelper","","ActionView/Helpers/TranslationHelper.html","",""],["ActionView::Helpers::UrlHelper","","ActionView/Helpers/UrlHelper.html","","<p>Provides a set of methods for making links and getting URLs that depend on\nthe routing subsystem (see …\n"],["ActionView::LogSubscriber","","ActionView/LogSubscriber.html","","<p>Action View Log Subscriber\n<p>Provides functionality so that Rails can output logs from Action View.\n"],["ActionView::LookupContext","","ActionView/LookupContext.html","",""],["ActionView::LookupContext::Details","","ActionView/LookupContext/Details.html","",""],["ActionView::LookupContext::ViewPaths","","ActionView/LookupContext/ViewPaths.html","",""],["ActionView::NullResolver","","ActionView/NullResolver.html","",""],["ActionView::Railtie","","ActionView/Railtie.html","","<p>Action View Railtie\n"],["ActionView::Renderer","","ActionView/Renderer.html","","<p>This is the main entry point for rendering. It basically delegates to other\nobjects like TemplateRenderer …\n"],["ActionView::Resolver","","ActionView/Resolver.html","","<p>Action View Resolver\n"],["ActionView::Resolver::Path","","ActionView/Resolver/Path.html","","<p>Keeps all information about view path and builds virtual path.\n"],["ActionView::Template","","ActionView/Template.html","","<p>Action View Template\n<p>Action View Text Template\n<p>Action View Template Handlers\n"],["ActionView::Template::ActionView","","ActionView/Template/ActionView.html","",""],["ActionView::Template::ActionView::Template","","ActionView/Template/ActionView/Template.html","",""],["ActionView::Template::ActionView::Template::Template","","ActionView/Template/ActionView/Template/Template.html","",""],["ActionView::Template::ActionView::Template::Template::Handler","","ActionView/Template/ActionView/Template/Template/Handler.html","",""],["ActionView::Template::Handlers","","ActionView/Template/Handlers.html","",""],["ActionView::Template::Handlers::Builder","","ActionView/Template/Handlers/Builder.html","",""],["ActionView::Template::Handlers::Compilable","","ActionView/Template/Handlers/Compilable.html","",""],["ActionView::Template::Handlers::Compilable::ClassMethods","","ActionView/Template/Handlers/Compilable/ClassMethods.html","",""],["ActionView::Template::Handlers::ERB","","ActionView/Template/Handlers/ERB.html","",""],["ActionView::Template::Handlers::Erubis","","ActionView/Template/Handlers/Erubis.html","",""],["ActionView::TestCase","","ActionView/TestCase.html","","<p>Action View Test Case\n"],["ActionView::TestCase::Behavior","","ActionView/TestCase/Behavior.html","",""],["ActionView::TestCase::Behavior::ClassMethods","","ActionView/TestCase/Behavior/ClassMethods.html","",""],["ActionView::TestCase::Behavior::Locals","","ActionView/TestCase/Behavior/Locals.html","",""],["ActionView::TestCase::TestController","","ActionView/TestCase/TestController.html","",""],["ActiveModel","","ActiveModel.html","",""],["ActiveModel::AttributeMethods","","ActiveModel/AttributeMethods.html","","<p>Active Model Attribute Methods\n<p><code>ActiveModel::AttributeMethods</code> provides a way to add prefixes\nand suffixes ...\n"],["ActiveModel::AttributeMethods::ClassMethods","","ActiveModel/AttributeMethods/ClassMethods.html","",""],["ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","","ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html","",""],["ActiveModel::BlockValidator","","ActiveModel/BlockValidator.html","","<p><code>BlockValidator</code> is a special <code>EachValidator</code> which\nreceives a block on initialization and call this block ...\n"],["ActiveModel::Callbacks","","ActiveModel/Callbacks.html","","<p>Active Model Callbacks\n<p>Provides an interface for any class to have Active Record like callbacks.\n<p>Like the …\n"],["ActiveModel::Conversion","","ActiveModel/Conversion.html","","<p>Active Model Conversions\n<p>Handles default conversions: to_model, to_key and to_param.\n<p>Let’s take for example …\n"],["ActiveModel::Dirty","","ActiveModel/Dirty.html","","<p>Active Model Dirty\n<p>Provides a way to track changes in your object in the same way as Active\nRecord does. …\n"],["ActiveModel::EachValidator","","ActiveModel/EachValidator.html","","<p><code>EachValidator</code> is a validator which iterates through the\nattributes given in the options hash invoking ...\n"],["ActiveModel::Errors","","ActiveModel/Errors.html","","<p>Active Model Errors\n<p>Provides a modified <code>OrderedHash</code> that you can include in your\nobject for handling error …\n"],["ActiveModel::Lint","","ActiveModel/Lint.html","",""],["ActiveModel::Lint::Tests","","ActiveModel/Lint/Tests.html","","<p>Active Model Lint Tests\n<p>You can test whether an object is compliant with the Active Model API by\nincluding …\n"],["ActiveModel::MassAssignmentSecurity","","ActiveModel/MassAssignmentSecurity.html","","<p>Active Model Mass-Assignment Security\n"],["ActiveModel::MassAssignmentSecurity::BlackList","","ActiveModel/MassAssignmentSecurity/BlackList.html","",""],["ActiveModel::MassAssignmentSecurity::ClassMethods","","ActiveModel/MassAssignmentSecurity/ClassMethods.html","","<p>Mass assignment security provides an interface for protecting attributes\nfrom end-user assignment. For …\n"],["ActiveModel::MassAssignmentSecurity::PermissionSet","","ActiveModel/MassAssignmentSecurity/PermissionSet.html","",""],["ActiveModel::MassAssignmentSecurity::Sanitizer","","ActiveModel/MassAssignmentSecurity/Sanitizer.html","",""],["ActiveModel::MassAssignmentSecurity::WhiteList","","ActiveModel/MassAssignmentSecurity/WhiteList.html","",""],["ActiveModel::MissingAttributeError","","ActiveModel/MissingAttributeError.html","",""],["ActiveModel::Name","","ActiveModel/Name.html","",""],["ActiveModel::Naming","","ActiveModel/Naming.html","","<p>Active Model Naming\n<p>Creates a <code>model_name</code> method on your object.\n<p>To implement, just extend ActiveModel::Naming …\n"],["ActiveModel::Observer","","ActiveModel/Observer.html","","<p>Active Model Observers\n<p>Observer classes respond to life cycle callbacks to implement trigger-like\nbehavior …\n"],["ActiveModel::ObserverArray","","ActiveModel/ObserverArray.html","","<p>Stores the enabled/disabled state of individual observers for a particular\nmodel class.\n"],["ActiveModel::Observing","","ActiveModel/Observing.html","",""],["ActiveModel::Observing::ClassMethods","","ActiveModel/Observing/ClassMethods.html","",""],["ActiveModel::SecurePassword","","ActiveModel/SecurePassword.html","",""],["ActiveModel::SecurePassword::ClassMethods","","ActiveModel/SecurePassword/ClassMethods.html","",""],["ActiveModel::SecurePassword::InstanceMethodsOnActivation","","ActiveModel/SecurePassword/InstanceMethodsOnActivation.html","",""],["ActiveModel::Serialization","","ActiveModel/Serialization.html","","<p>Active Model Serialization\n<p>Provides a basic serialization to a serializable_hash for your object.\n<p>A minimal …\n"],["ActiveModel::Serializers","","ActiveModel/Serializers.html","","<p>Active Model XML Serializer\n<p>Active Model JSON Serializer\n"],["ActiveModel::Serializers::JSON","","ActiveModel/Serializers/JSON.html","",""],["ActiveModel::Serializers::Xml","","ActiveModel/Serializers/Xml.html","",""],["ActiveModel::Translation","","ActiveModel/Translation.html","","<p>Active Model Translation\n<p>Provides integration between your object and the Rails internationalization\n(i18n) …\n"],["ActiveModel::Validations","","ActiveModel/Validations.html","","<p>Active Model Length Validator\n<p>Active Model Inclusion Validator\n<p>Active Model Exclusion Validator\n"],["ActiveModel::Validations::AcceptanceValidator","","ActiveModel/Validations/AcceptanceValidator.html","",""],["ActiveModel::Validations::Callbacks","","ActiveModel/Validations/Callbacks.html","",""],["ActiveModel::Validations::Callbacks::ClassMethods","","ActiveModel/Validations/Callbacks/ClassMethods.html","",""],["ActiveModel::Validations::ClassMethods","","ActiveModel/Validations/ClassMethods.html","",""],["ActiveModel::Validations::ConfirmationValidator","","ActiveModel/Validations/ConfirmationValidator.html","",""],["ActiveModel::Validations::ExclusionValidator","","ActiveModel/Validations/ExclusionValidator.html","",""],["ActiveModel::Validations::FormatValidator","","ActiveModel/Validations/FormatValidator.html","",""],["ActiveModel::Validations::HelperMethods","","ActiveModel/Validations/HelperMethods.html","",""],["ActiveModel::Validations::InclusionValidator","","ActiveModel/Validations/InclusionValidator.html","",""],["ActiveModel::Validations::LengthValidator","","ActiveModel/Validations/LengthValidator.html","",""],["ActiveModel::Validations::NumericalityValidator","","ActiveModel/Validations/NumericalityValidator.html","",""],["ActiveModel::Validations::PresenceValidator","","ActiveModel/Validations/PresenceValidator.html","",""],["ActiveModel::Validations::WithValidator","","ActiveModel/Validations/WithValidator.html","",""],["ActiveModel::Validator","","ActiveModel/Validator.html","","<p>Active Model Validator\n<p>A simple base class that can be used along with\nActiveModel::Validations::ClassMethods.validates_with …\n"],["ActiveRecord","","ActiveRecord.html","",""],["ActiveRecord::ActiveRecordError","","ActiveRecord/ActiveRecordError.html","","<p>Active Record Errors\n<p>Generic Active Record exception class.\n"],["ActiveRecord::AdapterNotFound","","ActiveRecord/AdapterNotFound.html","","<p>Raised when Active Record cannot find database adapter specified in\n<code>config/database.yml</code> or programmatically. …\n"],["ActiveRecord::AdapterNotSpecified","","ActiveRecord/AdapterNotSpecified.html","","<p>Raised when adapter not specified on connection (or configuration file\n<code>config/database.yml</code> misses adapter …\n"],["ActiveRecord::Aggregations","","ActiveRecord/Aggregations.html","",""],["ActiveRecord::Aggregations::ClassMethods","","ActiveRecord/Aggregations/ClassMethods.html","","<p>Active Record implements aggregation through a macro-like class method\ncalled <code>composed_of</code> for representing …\n"],["ActiveRecord::AssociationTypeMismatch","","ActiveRecord/AssociationTypeMismatch.html","","<p>Raised when an object assigned to an association has an incorrect type.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Ticket</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveRecord::Associations","","ActiveRecord/Associations.html","","<p>Active Record Has Many Association\n<p>Active Record Belongs To Has One Association\n<p>Active Record Has One  …\n"],["ActiveRecord::Associations::ClassMethods","","ActiveRecord/Associations/ClassMethods.html","","<p>Associations are a set of macro-like class methods for tying objects\ntogether through foreign keys.  …\n"],["ActiveRecord::AttributeAssignmentError","","ActiveRecord/AttributeAssignmentError.html","","<p>Raised when an error occurred while doing a mass assignment to an attribute\nthrough the <code>attributes=</code> method. …\n"],["ActiveRecord::AttributeMethods","","ActiveRecord/AttributeMethods.html","",""],["ActiveRecord::AttributeMethods::BeforeTypeCast","","ActiveRecord/AttributeMethods/BeforeTypeCast.html","",""],["ActiveRecord::AttributeMethods::ClassMethods","","ActiveRecord/AttributeMethods/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Dirty","","ActiveRecord/AttributeMethods/Dirty.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey","","ActiveRecord/AttributeMethods/PrimaryKey.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Query","","ActiveRecord/AttributeMethods/Query.html","",""],["ActiveRecord::AttributeMethods::Read","","ActiveRecord/AttributeMethods/Read.html","",""],["ActiveRecord::AttributeMethods::Read::ClassMethods","","ActiveRecord/AttributeMethods/Read/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion","","ActiveRecord/AttributeMethods/TimeZoneConversion.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","","ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Write","","ActiveRecord/AttributeMethods/Write.html","",""],["ActiveRecord::AttributeMethods::Write::ClassMethods","","ActiveRecord/AttributeMethods/Write/ClassMethods.html","",""],["ActiveRecord::AutosaveAssociation","","ActiveRecord/AutosaveAssociation.html","","<p>Active Record Autosave Association\n<p><code>AutosaveAssociation</code> is a module that takes care of\nautomatically saving ...\n"],["ActiveRecord::AutosaveAssociation::ClassMethods","","ActiveRecord/AutosaveAssociation/ClassMethods.html","",""],["ActiveRecord::Base","","ActiveRecord/Base.html","","<p>Active Record\n<p>Active Record objects don’t specify their attributes directly, but rather\ninfer them from …\n"],["ActiveRecord::Batches","","ActiveRecord/Batches.html","",""],["ActiveRecord::Calculations","","ActiveRecord/Calculations.html","",""],["ActiveRecord::Callbacks","","ActiveRecord/Callbacks.html","","<p>Active Record Callbacks\n<p>Callbacks are hooks into the life cycle of an Active Record object that\nallow …\n"],["ActiveRecord::Coders","","ActiveRecord/Coders.html","",""],["ActiveRecord::Coders::YAMLColumn","","ActiveRecord/Coders/YAMLColumn.html","",""],["ActiveRecord::ConfigurationError","","ActiveRecord/ConfigurationError.html","","<p>Raised when association is being configured improperly or user tries to use\noffset and limit together …\n"],["ActiveRecord::ConnectionAdapters","","ActiveRecord/ConnectionAdapters.html","",""],["ActiveRecord::ConnectionAdapters::AbstractAdapter","","ActiveRecord/ConnectionAdapters/AbstractAdapter.html","","<p>Active Record supports multiple database systems. AbstractAdapter and\nrelated classes form the abstraction …\n"],["ActiveRecord::ConnectionAdapters::Column","","ActiveRecord/ConnectionAdapters/Column.html","",""],["ActiveRecord::ConnectionAdapters::Column::Format","","ActiveRecord/ConnectionAdapters/Column/Format.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionHandler","","ActiveRecord/ConnectionAdapters/ConnectionHandler.html","","<p>ConnectionHandler is a collection of ConnectionPool objects. It is used for\nkeeping separate connection …\n"],["ActiveRecord::ConnectionAdapters::ConnectionManagement","","ActiveRecord/ConnectionAdapters/ConnectionManagement.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionPool","","ActiveRecord/ConnectionAdapters/ConnectionPool.html","","<p>Connection pool base class for managing Active Record database connections.\n<p>Introduction\n<p>A connection pool …\n"],["ActiveRecord::ConnectionAdapters::DatabaseLimits","","ActiveRecord/ConnectionAdapters/DatabaseLimits.html","",""],["ActiveRecord::ConnectionAdapters::DatabaseStatements","","ActiveRecord/ConnectionAdapters/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::Mysql2Adapter","","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html","",""],["ActiveRecord::ConnectionAdapters::Mysql2Column","","ActiveRecord/ConnectionAdapters/Mysql2Column.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter","","ActiveRecord/ConnectionAdapters/MysqlAdapter.html","","<p>The MySQL adapter will work with both Ruby/MySQL, which is a Ruby-based\nMySQL adapter that comes bundled …\n"],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html","","<p>The PostgreSQL adapter works both with the native C\n(ruby.scripting.ca/postgres/) and the pure Ruby (available …\n"],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLColumn","","ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html","",""],["ActiveRecord::ConnectionAdapters::QueryCache","","ActiveRecord/ConnectionAdapters/QueryCache.html","",""],["ActiveRecord::ConnectionAdapters::Quoting","","ActiveRecord/ConnectionAdapters/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::SQLiteAdapter","","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html","","<p>The SQLite adapter works with both the 2.x and 3.x series of SQLite with\nthe sqlite-ruby drivers (available …\n"],["ActiveRecord::ConnectionAdapters::SQLiteAdapter::Version","","ActiveRecord/ConnectionAdapters/SQLiteAdapter/Version.html","",""],["ActiveRecord::ConnectionAdapters::SchemaStatements","","ActiveRecord/ConnectionAdapters/SchemaStatements.html","",""],["ActiveRecord::ConnectionAdapters::Table","","ActiveRecord/ConnectionAdapters/Table.html","","<p>Represents an SQL table in an abstract way for updating a table. Also see\nTableDefinition and SchemaStatements#create_table …\n"],["ActiveRecord::ConnectionAdapters::TableDefinition","","ActiveRecord/ConnectionAdapters/TableDefinition.html","","<p>Represents the schema of an SQL table in an abstract way. This class\nprovides methods for manipulating …\n"],["ActiveRecord::ConnectionNotEstablished","","ActiveRecord/ConnectionNotEstablished.html","","<p>Raised when connection to the database could not been established (for\nexample when <code>connection=</code> is given …\n"],["ActiveRecord::ConnectionTimeoutError","","ActiveRecord/ConnectionTimeoutError.html","","<p>Raised when a connection could not be obtained within the connection\nacquisition timeout period.\n"],["ActiveRecord::CounterCache","","ActiveRecord/CounterCache.html","","<p>Active Record Counter Cache\n"],["ActiveRecord::DangerousAttributeError","","ActiveRecord/DangerousAttributeError.html","","<p>Raised when attribute has a name reserved by Active Record (when attribute\nhas name of one of Active …\n"],["ActiveRecord::DynamicFinderMatch","","ActiveRecord/DynamicFinderMatch.html","","<p>Active Record Dynamic Finder Match\n<p>Refer to ActiveRecord::Base documentation for Dynamic attribute-based …\n"],["ActiveRecord::DynamicScopeMatch","","ActiveRecord/DynamicScopeMatch.html","","<p>Active Record Dynamic Scope Match\n<p>Provides dynamic attribute-based scopes such as\n<code>scoped_by_price(4.99</code> …\n"],["ActiveRecord::FinderMethods","","ActiveRecord/FinderMethods.html","",""],["ActiveRecord::Fixtures","","ActiveRecord/Fixtures.html","",""],["ActiveRecord::HasManyThroughNestedAssociationsAreReadonly","","ActiveRecord/HasManyThroughNestedAssociationsAreReadonly.html","",""],["ActiveRecord::IdentityMap","","ActiveRecord/IdentityMap.html","","<p>Active Record Identity Map\n<p>Ensures that each object gets loaded only once by keeping every loaded\nobject …\n"],["ActiveRecord::IdentityMap::Middleware","","ActiveRecord/IdentityMap/Middleware.html","",""],["ActiveRecord::InvalidForeignKey","","ActiveRecord/InvalidForeignKey.html","","<p>Raised when a record cannot be inserted or updated because it references a\nnon-existent record.\n"],["ActiveRecord::IrreversibleMigration","","ActiveRecord/IrreversibleMigration.html","","<p>Exception that can be raised to stop migrations from going backwards.\n"],["ActiveRecord::Locking","","ActiveRecord/Locking.html","",""],["ActiveRecord::Locking::Optimistic","","ActiveRecord/Locking/Optimistic.html","","<p>What is Optimistic Locking\n<p>Optimistic locking allows multiple users to access the same record for\nedits, …\n"],["ActiveRecord::Locking::Optimistic::ClassMethods","","ActiveRecord/Locking/Optimistic/ClassMethods.html","",""],["ActiveRecord::Locking::Pessimistic","","ActiveRecord/Locking/Pessimistic.html","","<p>Locking::Pessimistic provides support for row-level locking using SELECT …\nFOR UPDATE and other lock …\n"],["ActiveRecord::LogSubscriber","","ActiveRecord/LogSubscriber.html","",""],["ActiveRecord::Migration","","ActiveRecord/Migration.html","","<p>Active Record Migrations\n<p>Migrations can manage the evolution of a schema used by several physical\ndatabases. …\n"],["ActiveRecord::Migration::CommandRecorder","","ActiveRecord/Migration/CommandRecorder.html","","<p>ActiveRecord::Migration::CommandRecorder records commands done during a\nmigration and knows how to reverse …\n"],["ActiveRecord::MigrationProxy","","ActiveRecord/MigrationProxy.html","","<p>MigrationProxy is used to defer loading of the actual migration classes\nuntil they are needed\n"],["ActiveRecord::MultiparameterAssignmentErrors","","ActiveRecord/MultiparameterAssignmentErrors.html","","<p>Raised when there are multiple errors while doing a mass assignment through\nthe <code>attributes</code> method. The …\n"],["ActiveRecord::NamedScope","","ActiveRecord/NamedScope.html","","<p>Active Record Named Scopes\n"],["ActiveRecord::NamedScope::ClassMethods","","ActiveRecord/NamedScope/ClassMethods.html","",""],["ActiveRecord::NestedAttributes","","ActiveRecord/NestedAttributes.html","",""],["ActiveRecord::NestedAttributes::ClassMethods","","ActiveRecord/NestedAttributes/ClassMethods.html","","<p>Active Record Nested Attributes\n<p>Nested attributes allow you to save attributes on associated records\nthrough …\n"],["ActiveRecord::NestedAttributes::TooManyRecords","","ActiveRecord/NestedAttributes/TooManyRecords.html","",""],["ActiveRecord::Observer","","ActiveRecord/Observer.html","","<p>Active Record Observer\n<p>Observer classes respond to life cycle callbacks to implement trigger-like\nbehavior …\n"],["ActiveRecord::Persistence","","ActiveRecord/Persistence.html","","<p>Active Record Persistence\n"],["ActiveRecord::PreparedStatementInvalid","","ActiveRecord/PreparedStatementInvalid.html","","<p>Raised when number of bind variables in statement given to\n<code>:condition</code> key (for example, when using <code>find</code> …\n"],["ActiveRecord::QueryCache","","ActiveRecord/QueryCache.html","","<p>Active Record Query Cache\n"],["ActiveRecord::QueryCache::ClassMethods","","ActiveRecord/QueryCache/ClassMethods.html","",""],["ActiveRecord::QueryMethods","","ActiveRecord/QueryMethods.html","",""],["ActiveRecord::Railtie","","ActiveRecord/Railtie.html","","<p>Active Record Railtie\n"],["ActiveRecord::Railties","","ActiveRecord/Railties.html","",""],["ActiveRecord::Railties::ControllerRuntime","","ActiveRecord/Railties/ControllerRuntime.html","",""],["ActiveRecord::Railties::ControllerRuntime::ClassMethods","","ActiveRecord/Railties/ControllerRuntime/ClassMethods.html","",""],["ActiveRecord::ReadOnlyRecord","","ActiveRecord/ReadOnlyRecord.html","","<p>Raised on attempt to update record that is instantiated as read only.\n"],["ActiveRecord::RecordInvalid","","ActiveRecord/RecordInvalid.html","","<p>Active Record RecordInvalid\n<p>Raised by <code>save!</code> and <code>create!</code> when the record is\ninvalid.  Use the <code>record</code> method …\n"],["ActiveRecord::RecordNotFound","","ActiveRecord/RecordNotFound.html","","<p>Raised when Active Record cannot find record by given id or set of ids.\n"],["ActiveRecord::RecordNotSaved","","ActiveRecord/RecordNotSaved.html","","<p>Raised by ActiveRecord::Base.save! and ActiveRecord::Base.create! methods\nwhen record cannot be saved …\n"],["ActiveRecord::RecordNotUnique","","ActiveRecord/RecordNotUnique.html","","<p>Raised when a record cannot be inserted because it would violate a\nuniqueness constraint.\n"],["ActiveRecord::Reflection","","ActiveRecord/Reflection.html","",""],["ActiveRecord::Reflection::ClassMethods","","ActiveRecord/Reflection/ClassMethods.html","","<p>Reflection enables to interrogate Active Record classes and objects about\ntheir associations and aggregations. …\n"],["ActiveRecord::Reflection::MacroReflection","","ActiveRecord/Reflection/MacroReflection.html","","<p>Abstract base class for AggregateReflection and AssociationReflection.\nObjects of AggregateReflection …\n"],["ActiveRecord::Relation","","ActiveRecord/Relation.html","","<p>Active Record Relation\n"],["ActiveRecord::Result","","ActiveRecord/Result.html","","<p>This class encapsulates a Result returned from calling\n<code>exec_query</code> on any database connection adapter. …\n"],["ActiveRecord::Rollback","","ActiveRecord/Rollback.html","","<p>ActiveRecord::Transactions::ClassMethods.transaction uses this exception to\ndistinguish a deliberate …\n"],["ActiveRecord::Schema","","ActiveRecord/Schema.html","","<p>Active Record Schema\n<p>Allows programmers to programmatically define a schema in a portable DSL.\nThis means …\n"],["ActiveRecord::Serialization","","ActiveRecord/Serialization.html","","<p>Active Record Serialization\n"],["ActiveRecord::SerializationTypeMismatch","","ActiveRecord/SerializationTypeMismatch.html","","<p>Raised when unserialized object’s type mismatches one specified for\nserializable field.\n"],["ActiveRecord::SessionStore","","ActiveRecord/SessionStore.html","","<p>Active Record Session Store\n<p>A session store backed by an Active Record class.  A default class is\nprovided, …\n"],["ActiveRecord::SessionStore::Session","","ActiveRecord/SessionStore/Session.html","","<p>The default Active Record class.\n"],["ActiveRecord::SessionStore::SqlBypass","","ActiveRecord/SessionStore/SqlBypass.html","","<p>A barebones session store which duck-types with the default session store\nbut bypasses Active Record …\n"],["ActiveRecord::SpawnMethods","","ActiveRecord/SpawnMethods.html","",""],["ActiveRecord::StaleObjectError","","ActiveRecord/StaleObjectError.html","","<p>Raised on attempt to save stale record. Record is stale when it’s being\nsaved in another query after …\n"],["ActiveRecord::StatementInvalid","","ActiveRecord/StatementInvalid.html","","<p>Raised when SQL statement cannot be executed by the database (for example,\nit’s often the case for MySQL …\n"],["ActiveRecord::TestFixtures","","ActiveRecord/TestFixtures.html","",""],["ActiveRecord::TestFixtures::ClassMethods","","ActiveRecord/TestFixtures/ClassMethods.html","",""],["ActiveRecord::ThrowResult","","ActiveRecord/ThrowResult.html","","<p>Raised when SQL statement is invalid and the application gets a blank\nresult.\n"],["ActiveRecord::Timestamp","","ActiveRecord/Timestamp.html","","<p>Active Record Timestamp\n<p>Active Record automatically timestamps create and update operations if the\ntable …\n"],["ActiveRecord::Transactions","","ActiveRecord/Transactions.html","","<p>See ActiveRecord::Transactions::ClassMethods for documentation.\n"],["ActiveRecord::Transactions::ClassMethods","","ActiveRecord/Transactions/ClassMethods.html","","<p>Active Record Transactions\n<p>Transactions are protective blocks where SQL statements are only permanent\n…\n"],["ActiveRecord::UnknownAttributeError","","ActiveRecord/UnknownAttributeError.html","","<p>Raised when unknown attributes are supplied via mass assignment.\n"],["ActiveRecord::Validations","","ActiveRecord/Validations.html","","<p>Active Record Validations\n<p>Active Record includes the majority of its validations from\n<code>ActiveModel::Validations</code> …\n"],["ActiveRecord::Validations::AssociatedValidator","","ActiveRecord/Validations/AssociatedValidator.html","",""],["ActiveRecord::Validations::ClassMethods","","ActiveRecord/Validations/ClassMethods.html","",""],["ActiveRecord::Validations::UniquenessValidator","","ActiveRecord/Validations/UniquenessValidator.html","",""],["ActiveRecord::WrappedDatabaseException","","ActiveRecord/WrappedDatabaseException.html","","<p>Parent class for all specific exceptions which wrap database driver\nexceptions provides access to the …\n"],["ActiveResource","","ActiveResource.html","",""],["ActiveResource::BadRequest","","ActiveResource/BadRequest.html","","<p>400 Bad Request\n"],["ActiveResource::Base","","ActiveResource/Base.html","","<p>ActiveResource::Base is the main class for mapping RESTful resources as\nmodels in a Rails application. …\n"],["ActiveResource::ClientError","","ActiveResource/ClientError.html","","<p>4xx Client Error\n"],["ActiveResource::Connection","","ActiveResource/Connection.html","","<p>Class to handle connections to remote web services. This class is used by\nActiveResource::Base to interface …\n"],["ActiveResource::CustomMethods","","ActiveResource/CustomMethods.html","","<p>A module to support custom REST methods and sub-resources, allowing you to\nbreak out of the “default” …\n"],["ActiveResource::CustomMethods::ClassMethods","","ActiveResource/CustomMethods/ClassMethods.html","",""],["ActiveResource::CustomMethods::InstanceMethods","","ActiveResource/CustomMethods/InstanceMethods.html","",""],["ActiveResource::Errors","","ActiveResource/Errors.html","","<p>Active Resource validation is reported to and from this object, which is\nused by Base#save to determine …\n"],["ActiveResource::ForbiddenAccess","","ActiveResource/ForbiddenAccess.html","","<p>403 Forbidden\n"],["ActiveResource::Formats","","ActiveResource/Formats.html","",""],["ActiveResource::Formats::JsonFormat","","ActiveResource/Formats/JsonFormat.html","",""],["ActiveResource::Formats::XmlFormat","","ActiveResource/Formats/XmlFormat.html","",""],["ActiveResource::HttpMock","","ActiveResource/HttpMock.html","","<p>One thing that has always been a pain with remote web services is testing. \nThe HttpMock class makes …\n"],["ActiveResource::InvalidRequestError","","ActiveResource/InvalidRequestError.html","",""],["ActiveResource::LogSubscriber","","ActiveResource/LogSubscriber.html","",""],["ActiveResource::MissingPrefixParam","","ActiveResource/MissingPrefixParam.html","","<p>Raised when …\n"],["ActiveResource::Observing","","ActiveResource/Observing.html","",""],["ActiveResource::Railtie","","ActiveResource/Railtie.html","",""],["ActiveResource::Request","","ActiveResource/Request.html","",""],["ActiveResource::ResourceConflict","","ActiveResource/ResourceConflict.html","","<p>409 Conflict\n"],["ActiveResource::ResourceGone","","ActiveResource/ResourceGone.html","","<p>410 Gone\n"],["ActiveResource::ResourceNotFound","","ActiveResource/ResourceNotFound.html","","<p>404 Not Found\n"],["ActiveResource::Response","","ActiveResource/Response.html","",""],["ActiveResource::SSLError","","ActiveResource/SSLError.html","","<p>Raised when a OpenSSL::SSL::SSLError occurs.\n"],["ActiveResource::ServerError","","ActiveResource/ServerError.html","","<p>5xx Server Error\n"],["ActiveResource::TimeoutError","","ActiveResource/TimeoutError.html","","<p>Raised when a Timeout::Error occurs.\n"],["ActiveResource::UnauthorizedAccess","","ActiveResource/UnauthorizedAccess.html","","<p>401 Unauthorized\n"],["ActiveResource::Validations","","ActiveResource/Validations.html","","<p>Module to support validation and errors with Active Resource objects. The\nmodule overrides Base#save …\n"],["ActiveSupport","","ActiveSupport.html","","<p>XmlMini Nokogiri implementation using a SAX-based parser\n<p>XmlMini ReXML implementation\n<p>XmlMini LibXML implementation …\n"],["ActiveSupport::Autoload","","ActiveSupport/Autoload.html","",""],["ActiveSupport::BacktraceCleaner","","ActiveSupport/BacktraceCleaner.html","","<p>Backtraces often include many lines that are not relevant for the context\nunder review. This makes it …\n"],["ActiveSupport::Base64","","ActiveSupport/Base64.html","","<p>Base64 provides utility methods for encoding and de-coding binary data\nusing a base 64 representation. …\n"],["ActiveSupport::BasicObject","","ActiveSupport/BasicObject.html","","<p>A class with no predefined methods that behaves similarly to Builder’s\nBlankSlate. Used for proxy classes. …\n"],["ActiveSupport::Benchmarkable","","ActiveSupport/Benchmarkable.html","",""],["ActiveSupport::BufferedLogger","","ActiveSupport/BufferedLogger.html","","<p>Inspired by the buffered logger idea by Ezra\n"],["ActiveSupport::BufferedLogger::Severity","","ActiveSupport/BufferedLogger/Severity.html","",""],["ActiveSupport::Cache","","ActiveSupport/Cache.html","","<p>See ActiveSupport::Cache::Store for documentation.\n"],["ActiveSupport::Cache::CompressedMemCacheStore","","ActiveSupport/Cache/CompressedMemCacheStore.html","",""],["ActiveSupport::Cache::Entry","","ActiveSupport/Cache/Entry.html","","<p>Entry that is put into caches. It supports expiration time on entries and\ncan compress values to save …\n"],["ActiveSupport::Cache::FileStore","","ActiveSupport/Cache/FileStore.html","","<p>A cache store implementation which stores everything on the filesystem.\n<p>FileStore implements the Strategy::LocalCache …\n"],["ActiveSupport::Cache::MemCacheStore","","ActiveSupport/Cache/MemCacheStore.html","","<p>A cache store implementation which stores data in Memcached:\nwww.danga.com/memcached/\n<p>This is currently …\n"],["ActiveSupport::Cache::MemoryStore","","ActiveSupport/Cache/MemoryStore.html","","<p>A cache store implementation which stores everything into memory in the\nsame process. If you’re running …\n"],["ActiveSupport::Cache::Store","","ActiveSupport/Cache/Store.html","","<p>An abstract cache store class. There are multiple cache store\nimplementations, each having its own additional …\n"],["ActiveSupport::Cache::Strategy","","ActiveSupport/Cache/Strategy.html","",""],["ActiveSupport::Cache::Strategy::LocalCache","","ActiveSupport/Cache/Strategy/LocalCache.html","","<p>Caches that implement LocalCache will be backed by an in memory cache for\nthe duration of a block. Repeated …\n"],["ActiveSupport::Cache::Strategy::LocalCache::LocalStore","","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html","","<p>Simple memory backed cache. This cache is not thread safe and is intended\nonly for serving as a temporary …\n"],["ActiveSupport::Cache::SynchronizedMemoryStore","","ActiveSupport/Cache/SynchronizedMemoryStore.html","","<p>Like MemoryStore, but thread-safe.\n"],["ActiveSupport::Callbacks","","ActiveSupport/Callbacks.html","","<p>Callbacks are code hooks that are run at key points in an object’s\nlifecycle. The typical use case is …\n"],["ActiveSupport::Callbacks::ClassMethods","","ActiveSupport/Callbacks/ClassMethods.html","",""],["ActiveSupport::Concern","","ActiveSupport/Concern.html","","<p>A typical module looks like this:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">included</span>(<span class=\"ruby-identifier\">base</span>)\n    <span class=\"ruby-identifier\">base</span>.<span class=\"ruby-identifier\">extend</span> <span class=\"ruby-constant\">ClassMethods</span>\n    <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveSupport::Configurable","","ActiveSupport/Configurable.html","","<p>Configurable provides a <code>config</code> method to store and retrieve\nconfiguration options as an <code>OrderedHash</code>. …\n"],["ActiveSupport::Configurable::ClassMethods","","ActiveSupport/Configurable/ClassMethods.html","",""],["ActiveSupport::Configurable::Configuration","","ActiveSupport/Configurable/Configuration.html","",""],["ActiveSupport::Dependencies","","ActiveSupport/Dependencies.html","",""],["ActiveSupport::Dependencies::ClassCache","","ActiveSupport/Dependencies/ClassCache.html","",""],["ActiveSupport::Dependencies::WatchStack","","ActiveSupport/Dependencies/WatchStack.html","","<p>The WatchStack keeps a stack of the modules being watched as files are\nloaded. If a file in the process …\n"],["ActiveSupport::Deprecation","","ActiveSupport/Deprecation.html","",""],["ActiveSupport::DescendantsTracker","","ActiveSupport/DescendantsTracker.html","","<p>This module provides an internal implementation to track descendants which\nis faster than iterating through …\n"],["ActiveSupport::Duration","","ActiveSupport/Duration.html","","<p>Provides accurate date and time measurements using Date#advance and\nTime#advance, respectively. It mainly …\n"],["ActiveSupport::FileUpdateChecker","","ActiveSupport/FileUpdateChecker.html","","<p>This class is responsible to track files and invoke the given block\nwhenever one of these files are changed. …\n"],["ActiveSupport::FileWatcher","","ActiveSupport/FileWatcher.html","",""],["ActiveSupport::FileWatcher::Backend","","ActiveSupport/FileWatcher/Backend.html","",""],["ActiveSupport::Gzip","","ActiveSupport/Gzip.html","","<p>A convenient wrapper for the zlib standard library that allows\ncompression/decompression of strings with …\n"],["ActiveSupport::Gzip::Stream","","ActiveSupport/Gzip/Stream.html","",""],["ActiveSupport::HashWithIndifferentAccess","","ActiveSupport/HashWithIndifferentAccess.html","",""],["ActiveSupport::Inflector","","ActiveSupport/Inflector.html","","<p>The Inflector transforms words from singular to plural, class names to\ntable names, modularized class …\n"],["ActiveSupport::Inflector::Inflections","","ActiveSupport/Inflector/Inflections.html","","<p>A singleton instance of this class is yielded by Inflector.inflections,\nwhich can then be used to specify …\n"],["ActiveSupport::InheritableOptions","","ActiveSupport/InheritableOptions.html","",""],["ActiveSupport::JSON","","ActiveSupport/JSON.html","",""],["ActiveSupport::JSON::Encoding","","ActiveSupport/JSON/Encoding.html","",""],["ActiveSupport::JSON::Encoding::CircularReferenceError","","ActiveSupport/JSON/Encoding/CircularReferenceError.html","",""],["ActiveSupport::JSON::Encoding::Encoder","","ActiveSupport/JSON/Encoding/Encoder.html","",""],["ActiveSupport::JSON::Variable","","ActiveSupport/JSON/Variable.html","","<p>A string that returns itself as its JSON-encoded form.\n"],["ActiveSupport::LogSubscriber","","ActiveSupport/LogSubscriber.html","","<p>ActiveSupport::LogSubscriber is an object set to consume\nActiveSupport::Notifications with the sole purpose …\n"],["ActiveSupport::LogSubscriber::TestHelper","","ActiveSupport/LogSubscriber/TestHelper.html","","<p>Provides some helpers to deal with testing log subscribers by setting up\nnotifications. Take for instance …\n"],["ActiveSupport::LogSubscriber::TestHelper::MockLogger","","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html","",""],["ActiveSupport::Memoizable","","ActiveSupport/Memoizable.html","",""],["ActiveSupport::Memoizable::InstanceMethods","","ActiveSupport/Memoizable/InstanceMethods.html","",""],["ActiveSupport::MessageEncryptor","","ActiveSupport/MessageEncryptor.html","","<p>MessageEncryptor is a simple way to encrypt values which get stored\nsomewhere you don’t trust.\n<p>The cipher …\n"],["ActiveSupport::MessageEncryptor::InvalidMessage","","ActiveSupport/MessageEncryptor/InvalidMessage.html","",""],["ActiveSupport::MessageVerifier","","ActiveSupport/MessageVerifier.html","","<p><code>MessageVerifier</code> makes it easy to generate and verify messages\nwhich are signed to prevent tampering. ...\n"],["ActiveSupport::MessageVerifier::InvalidSignature","","ActiveSupport/MessageVerifier/InvalidSignature.html","",""],["ActiveSupport::Multibyte","","ActiveSupport/Multibyte.html","",""],["ActiveSupport::Multibyte::Chars","","ActiveSupport/Multibyte/Chars.html","","<p>Chars enables you to work transparently with UTF-8 encoding in the Ruby\nString class without having extensive …\n"],["ActiveSupport::Multibyte::EncodingError","","ActiveSupport/Multibyte/EncodingError.html","","<p>Raised when a problem with the encoding was found.\n"],["ActiveSupport::Multibyte::Unicode","","ActiveSupport/Multibyte/Unicode.html","",""],["ActiveSupport::Multibyte::Unicode::Codepoint","","ActiveSupport/Multibyte/Unicode/Codepoint.html","","<p>Holds data about a codepoint in the Unicode database\n"],["ActiveSupport::Multibyte::Unicode::UnicodeDatabase","","ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html","","<p>Holds static data from the Unicode database\n"],["ActiveSupport::Notifications","","ActiveSupport/Notifications.html","","<p>Notifications provides an instrumentation API for Ruby. To instrument an\naction in Ruby you just need …\n"],["ActiveSupport::Notifications::Event","","ActiveSupport/Notifications/Event.html","",""],["ActiveSupport::Notifications::Fanout","","ActiveSupport/Notifications/Fanout.html","","<p>This is a default queue implementation that ships with Notifications. It\njust pushes events to all registered …\n"],["ActiveSupport::Notifications::Instrumenter","","ActiveSupport/Notifications/Instrumenter.html","",""],["ActiveSupport::OrderedOptions","","ActiveSupport/OrderedOptions.html","",""],["ActiveSupport::Railtie","","ActiveSupport/Railtie.html","",""],["ActiveSupport::Rescuable","","ActiveSupport/Rescuable.html","","<p>Rescuable module adds support for easier exception handling.\n"],["ActiveSupport::Rescuable::ClassMethods","","ActiveSupport/Rescuable/ClassMethods.html","",""],["ActiveSupport::SafeBuffer","","ActiveSupport/SafeBuffer.html","",""],["ActiveSupport::SafeBuffer::SafeConcatError","","ActiveSupport/SafeBuffer/SafeConcatError.html","",""],["ActiveSupport::StringInquirer","","ActiveSupport/StringInquirer.html","","<p>Wrapping a string in this class gives you a prettier way to test for\nequality. The value returned by …\n"],["ActiveSupport::TestCase","","ActiveSupport/TestCase.html","",""],["ActiveSupport::Testing","","ActiveSupport/Testing.html","",""],["ActiveSupport::Testing::Assertions","","ActiveSupport/Testing/Assertions.html","",""],["ActiveSupport::Testing::Declarative","","ActiveSupport/Testing/Declarative.html","",""],["ActiveSupport::Testing::Isolation","","ActiveSupport/Testing/Isolation.html","",""],["ActiveSupport::Testing::Isolation::Forking","","ActiveSupport/Testing/Isolation/Forking.html","",""],["ActiveSupport::Testing::Isolation::MiniTest","","ActiveSupport/Testing/Isolation/MiniTest.html","",""],["ActiveSupport::Testing::Isolation::Subprocess","","ActiveSupport/Testing/Isolation/Subprocess.html","",""],["ActiveSupport::Testing::Isolation::TestUnit","","ActiveSupport/Testing/Isolation/TestUnit.html","",""],["ActiveSupport::Testing::Pending","","ActiveSupport/Testing/Pending.html","",""],["ActiveSupport::Testing::Performance","","ActiveSupport/Testing/Performance.html","",""],["ActiveSupport::Testing::Performance::Benchmarker","","ActiveSupport/Testing/Performance/Benchmarker.html","",""],["ActiveSupport::Testing::Performance::ForClassicTestUnit","","ActiveSupport/Testing/Performance/ForClassicTestUnit.html","",""],["ActiveSupport::Testing::Performance::ForMiniTest","","ActiveSupport/Testing/Performance/ForMiniTest.html","",""],["ActiveSupport::Testing::Performance::Metrics","","ActiveSupport/Testing/Performance/Metrics.html","",""],["ActiveSupport::Testing::Performance::Metrics::Amount","","ActiveSupport/Testing/Performance/Metrics/Amount.html","",""],["ActiveSupport::Testing::Performance::Metrics::Base","","ActiveSupport/Testing/Performance/Metrics/Base.html","",""],["ActiveSupport::Testing::Performance::Metrics::CpuTime","","ActiveSupport/Testing/Performance/Metrics/CpuTime.html","",""],["ActiveSupport::Testing::Performance::Metrics::DigitalInformationUnit","","ActiveSupport/Testing/Performance/Metrics/DigitalInformationUnit.html","",""],["ActiveSupport::Testing::Performance::Metrics::GcRuns","","ActiveSupport/Testing/Performance/Metrics/GcRuns.html","",""],["ActiveSupport::Testing::Performance::Metrics::GcTime","","ActiveSupport/Testing/Performance/Metrics/GcTime.html","",""],["ActiveSupport::Testing::Performance::Metrics::Memory","","ActiveSupport/Testing/Performance/Metrics/Memory.html","",""],["ActiveSupport::Testing::Performance::Metrics::Objects","","ActiveSupport/Testing/Performance/Metrics/Objects.html","",""],["ActiveSupport::Testing::Performance::Metrics::ProcessTime","","ActiveSupport/Testing/Performance/Metrics/ProcessTime.html","",""],["ActiveSupport::Testing::Performance::Metrics::Time","","ActiveSupport/Testing/Performance/Metrics/Time.html","",""],["ActiveSupport::Testing::Performance::Metrics::UserTime","","ActiveSupport/Testing/Performance/Metrics/UserTime.html","",""],["ActiveSupport::Testing::Performance::Metrics::WallTime","","ActiveSupport/Testing/Performance/Metrics/WallTime.html","",""],["ActiveSupport::Testing::Performance::Performer","","ActiveSupport/Testing/Performance/Performer.html","",""],["ActiveSupport::Testing::Performance::Profiler","","ActiveSupport/Testing/Performance/Profiler.html","","<p>overridden by each implementation\n"],["ActiveSupport::Testing::ProxyTestResult","","ActiveSupport/Testing/ProxyTestResult.html","",""],["ActiveSupport::Testing::RemoteError","","ActiveSupport/Testing/RemoteError.html","",""],["ActiveSupport::Testing::SetupAndTeardown","","ActiveSupport/Testing/SetupAndTeardown.html","",""],["ActiveSupport::Testing::SetupAndTeardown::ClassMethods","","ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html","",""],["ActiveSupport::Testing::SetupAndTeardown::ForClassicTestUnit","","ActiveSupport/Testing/SetupAndTeardown/ForClassicTestUnit.html","",""],["ActiveSupport::Testing::SetupAndTeardown::ForMiniTest","","ActiveSupport/Testing/SetupAndTeardown/ForMiniTest.html","",""],["ActiveSupport::TimeWithZone","","ActiveSupport/TimeWithZone.html","","<p>A Time-like class that can represent a time in any time zone. Necessary\nbecause standard Ruby Time instances …\n"],["ActiveSupport::TimeZone","","ActiveSupport/TimeZone.html","",""],["ActiveSupport::XmlMini","","ActiveSupport/XmlMini.html","","<p>XmlMini\n<p>To use the much faster libxml parser:\n\n<pre>gem 'libxml-ruby', '=0.9.7'\nXmlMini.backend = 'LibXML'</pre>\n"],["ActiveSupport::XmlMini_LibXMLSAX","","ActiveSupport/XmlMini_LibXMLSAX.html","",""],["ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html","","<p>Class that will build the hash while the XML document is being parsed using\nSAX events.\n"],["ActiveSupport::XmlMini_NokogiriSAX","","ActiveSupport/XmlMini_NokogiriSAX.html","",""],["ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html","","<p>Class that will build the hash while the XML document is being parsed using\nSAX events.\n"],["ArJdbcMySQL","","ArJdbcMySQL.html","","<p>FIXME Remove if ArJdbcMysql will give.\n"],["ArJdbcMySQL::Error","","ArJdbcMySQL/Error.html","",""],["Array","","Array.html","",""],["Benchmark","","Benchmark.html","",""],["BigDecimal","","BigDecimal.html","",""],["Class","","Class.html","","<p>Extends the class object with class and instance accessors for class\nattributes, just like the native …\n"],["Date","","Date.html","",""],["DateTime","","DateTime.html","",""],["ERB","","ERB.html","",""],["ERB::Util","","ERB/Util.html","",""],["Enumerable","","Enumerable.html","",""],["FalseClass","","FalseClass.html","",""],["File","","File.html","",""],["FixturesFileNotFound","","FixturesFileNotFound.html","",""],["Float","","Float.html","",""],["HTML","","HTML.html","",""],["HTML::FullSanitizer","","HTML/FullSanitizer.html","",""],["HTML::LinkSanitizer","","HTML/LinkSanitizer.html","",""],["HTML::Sanitizer","","HTML/Sanitizer.html","",""],["HTML::Selector","","HTML/Selector.html","","<p>Selects HTML elements using CSS 2 selectors.\n<p>The <code>Selector</code> class uses CSS selector expressions to match …\n"],["HTML::Tag","","HTML/Tag.html","",""],["HTML::WhiteListSanitizer","","HTML/WhiteListSanitizer.html","",""],["Hash","","Hash.html","",""],["I18n","","I18n.html","",""],["I18n::ExceptionHandler","","I18n/ExceptionHandler.html","",""],["I18n::Railtie","","I18n/Railtie.html","",""],["Integer","","Integer.html","",""],["Kernel","","Kernel.html","",""],["LoadError","","LoadError.html","",""],["Logger","","Logger.html","",""],["Logger::SimpleFormatter","","Logger/SimpleFormatter.html","","<p>Simple formatter which only displays the message.\n"],["Module","","Module.html","",""],["Mysql","","Mysql.html","",""],["Mysql::Result","","Mysql/Result.html","",""],["Mysql::Stmt","","Mysql/Stmt.html","",""],["Mysql::Time","","Mysql/Time.html","",""],["NameError","","NameError.html","",""],["NilClass","","NilClass.html","","<p>Extensions to <code>nil</code> which allow for more helpful error messages\nfor people who are new to Rails.\n<p>Ruby raises …\n"],["Numeric","","Numeric.html","",""],["Object","","Object.html","",""],["Object::HashWithIndifferentAccess","","ActiveSupport/HashWithIndifferentAccess.html","",""],["Object::MissingSourceFile","","LoadError.html","",""],["Process","","Process.html","",""],["Rails","","Rails.html","",""],["Range","","Range.html","",""],["Regexp","","Regexp.html","",""],["String","","String.html","","<p>String inflections define new methods on the String class to transform\nnames for different purposes. …\n"],["Struct","","Struct.html","",""],["Symbol","","Symbol.html","",""],["Test","","Test.html","",""],["Test::Unit","","Test/Unit.html","",""],["Test::Unit::Collector","","Test/Unit/Collector.html","",""],["Test::Unit::Collector::ObjectSpace","","Test/Unit/Collector/ObjectSpace.html","",""],["Time","","Time.html","",""],["TrueClass","","TrueClass.html","",""],["URI","","URI.html","",""],["+","ActiveModel::MassAssignmentSecurity::PermissionSet","ActiveModel/MassAssignmentSecurity/PermissionSet.html#method-i-2B","(values)",""],["+","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-2B","(other)","<p>Adds another Duration or a Numeric to this Duration. Numeric values are\ntreated as seconds.\n"],["+","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-2B","(other)","<p>Returns a new Chars object containing the <em>other</em> object\nconcatenated to the string.\n<p>Example:\n\n<pre>('Café'.mb_chars ...</pre>\n"],["+","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-2B","(other)",""],["+","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-2B","(other)",""],["-","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-2D","(other)","<p>Subtracts another Duration or a Numeric from this Duration. Numeric values\nare treated as seconds.\n"],["-","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-2D","(other)",""],["-","Time","Time.html#method-i-2D","(other)",""],["<<","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-3C-3C","(value)",""],["<=>","ActiveRecord::Base","ActiveRecord/Base.html#method-i-3C-3D-3E","(other_object)","<p>Allows sort on objects\n"],["<=>","ActiveRecord::ConnectionAdapters::SQLiteAdapter::Version","ActiveRecord/ConnectionAdapters/SQLiteAdapter/Version.html#method-i-3C-3D-3E","(version_string)",""],["<=>","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-3C-3D-3E","(other)","<p>Returns -1, 0, or 1, depending on whether the Chars object is to be sorted\nbefore, equal or after the …\n"],["<=>","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-3C-3D-3E","(other)","<p>Use the time in UTC for comparisons.\n"],["<=>","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-3C-3D-3E","(zone)","<p>Compare this time zone to the parameter. The two are compared first on\ntheir offsets, and then by name. …\n"],["<=>","DateTime","DateTime.html#method-i-3C-3D-3E","(other)","<p>Layers additional behavior on DateTime#&lt;=&gt; so that Time and\nActiveSupport::TimeWithZone instances …\n"],["<=>","Time","Time.html#method-i-3C-3D-3E","(other)",""],["==","ActionView::FileSystemResolver","ActionView/FileSystemResolver.html#method-i-3D-3D","(resolver)",""],["==","ActiveRecord::Base","ActiveRecord/Base.html#method-i-3D-3D","(comparison_object)","<p>Returns true if <code>comparison_object</code> is the same exact object, or\n<code>comparison_object</code> is of the same type …\n"],["==","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-i-3D-3D","(other_aggregation)","<p>Returns <code>true</code> if <code>self</code> and\n<code>other_aggregation</code> have the same <code>name</code> attribute,\n<code>active_record</code> attribute, and …\n"],["==","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-3D-3D","(other)",""],["==","ActiveResource::Base","ActiveResource/Base.html#method-i-3D-3D","(other)","<p>Test for equality.  Resource are equal if and only if <code>other</code> is\nthe same object or is an instance of the …\n"],["==","ActiveResource::Request","ActiveResource/Request.html#method-i-3D-3D","(req)",""],["==","ActiveResource::Response","ActiveResource/Response.html#method-i-3D-3D","(other)","<p>Returns true if the other is a Response with an equal body, equal message\nand equal headers. Otherwise …\n"],["==","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-3D-3D","(other)","<p>Returns true if <code>other</code> is also a Duration instance with the\nsame <code>value</code>, or if <code>other == value</code>.\n"],["===","ActiveRecord::Base","ActiveRecord/Base.html#method-c-3D-3D-3D","(object)","<p>Overwrite the default class equality method to provide support for\nassociation proxies.\n"],["===","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-i-3D-3D-3D","(other)",""],["===","Time","Time.html#method-c-3D-3D-3D","(other)","<p>Overriding case equality method so that it returns true for\nActiveSupport::TimeWithZone instances\n"],["=~","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-3D-7E","(other)","<p>Like <code>String#=~</code> only it returns the character offset (in\ncodepoints) instead of the byte offset.\n<p>Example: …\n"],["=~","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-3D-7E","(re)","<p>Compare #name and TZInfo identifier to a supplied regexp, returning true if\na match is found.\n"],[">>","Date","Date.html#method-i-3E-3E","(n)","<p>Backported from 1.9. The one in 1.8 leads to incorrect next_month and\nfriends for dates where the calendar …\n"],["[]","ActiveModel::Errors","ActiveModel/Errors.html#method-i-5B-5D","(attribute)","<p>When passed a symbol or a name of a method, returns an array of errors for\nthe method.\n\n<pre>p.errors[:name] ...</pre>\n"],["[]","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-5B-5D","(name)","<p>Returns a ColumnDefinition for the column with name <code>name</code>.\n"],["[]","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-i-5B-5D","(x)",""],["[]","ActiveResource::Formats","ActiveResource/Formats.html#method-c-5B-5D","(mime_type_reference)","<p>Lookup the format class from a mime type reference symbol. Example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ActiveResource</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Formats</span>[:<span class=\"ruby-identifier\">xml</span>]  <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["[]","ActiveResource::Response","ActiveResource/Response.html#method-i-5B-5D","(key)",""],["[]","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-5B-5D","(key)",""],["[]","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-5B-5D","(*args)",""],["[]","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-5B-5D","(key)",""],["[]","ActiveSupport::Testing::Performance::Metrics","ActiveSupport/Testing/Performance/Metrics.html#method-c-5B-5D","(name)",""],["[]","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-5B-5D","(arg)","<p>Locate a specific time zone object. If the argument is a string, it is\ninterpreted to mean the name of …\n"],["[]=","ActiveModel::Errors","ActiveModel/Errors.html#method-i-5B-5D-3D","(attribute, error)","<p>Adds to the supplied attribute the supplied error message.\n\n<pre>p.errors[:name] = &quot;must be set&quot;\np.errors[:name] ...</pre>\n"],["[]=","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-i-5B-5D-3D","(k,v)",""],["[]=","ActiveResource::Response","ActiveResource/Response.html#method-i-5B-5D-3D","(key, value)",""],["[]=","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-5B-5D-3D","(key, value)",""],["[]=","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a new value to the hash:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[:key] = &quot;value&quot;</pre>\n"],["[]=","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a new value to the hash:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[:key] = &quot;value&quot;</pre>\n"],["[]=","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-5B-5D-3D","(*args)","<p>Like <code>String#[]=</code>, except instead of byte offsets you specify\ncharacter offsets.\n<p>Example:\n\n<pre>s = &quot;Müller&quot;\ns.mb_chars[2] ...</pre>\n"],["[]=","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-5B-5D-3D","(key, value)",""],["__replay__","ActiveSupport::Testing::ProxyTestResult","ActiveSupport/Testing/ProxyTestResult.html#method-i-__replay__","(result)",""],["_dasherize","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-_dasherize","(key)",""],["_dump","Time","Time.html#method-i-_dump","(*args)",""],["_dump_without_utc_flag","Time","Time.html#method-i-_dump_without_utc_flag","(*args)",""],["_dump_without_zone","Time","Time.html#method-i-_dump_without_zone","(*args)",""],["_get","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-_get","(key)",""],["_handle_method_missing","ActionController::Compatibility","ActionController/Compatibility.html#method-i-_handle_method_missing","()",""],["_handle_render_options","ActionController::Renderers","ActionController/Renderers.html#method-i-_handle_render_options","(options)",""],["_layout_for","ActionView::Context","ActionView/Context.html#method-i-_layout_for","(name=nil)","<p>Encapsulates the interaction with the view flow so it returns the correct\nbuffer on yield. This is usually …\n"],["_layout_for","ActionView::Helpers::RenderingHelper","ActionView/Helpers/RenderingHelper.html#method-i-_layout_for","(*args, &block)","<p>Overwrites _layout_for in the context object so it supports the case a\nblock is passed to a partial. …\n"],["_load","Time","Time.html#method-c-_load","(marshaled_time)",""],["_load_without_utc_flag","Time","Time.html#method-c-_load_without_utc_flag","(marshaled_time)",""],["_load_without_zone","Time","Time.html#method-c-_load_without_zone","(marshaled_time)",""],["_normalize_options","ActionController::Compatibility","ActionController/Compatibility.html#method-i-_normalize_options","(options)",""],["_original_to_s","BigDecimal","BigDecimal.html#method-i-_original_to_s","(format = DEFAULT_STRING_FORMAT)",""],["_parse_file","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-_parse_file","(file, entity)",""],["_prepare_context","ActionView::Context","ActionView/Context.html#method-i-_prepare_context","()","<p>Prepares the context by setting the appropriate instance variables. :api:\nplugin\n"],["_read_attribute","ActiveRecord::AttributeMethods::Read","ActiveRecord/AttributeMethods/Read.html#method-i-_read_attribute","(attr_name)",""],["_routes_context","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-_routes_context","()",""],["_run_class_setup","ActiveSupport::Testing::Isolation","ActiveSupport/Testing/Isolation.html#method-i-_run_class_setup","()",""],["_save_fragment","ActionController::Caching::Actions","ActionController/Caching/Actions.html#method-i-_save_fragment","(name, options)",""],["_set_detail","ActionView::LookupContext::Details","ActionView/LookupContext/Details.html#method-i-_set_detail","(key, value)",""],["_set_wrapper_defaults","ActionController::ParamsWrapper::ClassMethods","ActionController/ParamsWrapper/ClassMethods.html#method-i-_set_wrapper_defaults","(options, model=nil)",""],["_validates_default_keys","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-_validates_default_keys","()","<p>When creating custom validators, it might be useful to be able to specify\nadditional default keys. This …\n"],["abstract_class?","ActiveRecord::Base","ActiveRecord/Base.html#method-c-abstract_class-3F","()","<p>Returns whether this class is an abstract class or not.\n"],["accepts_nested_attributes_for","ActiveRecord::NestedAttributes::ClassMethods","ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for","(*attr_names)","<p>Defines an attributes writer for the specified association(s). If you are\nusing <code>attr_protected</code> or <code>attr_accessible</code> …\n"],["accessible_attributes","ActiveModel::MassAssignmentSecurity::ClassMethods","ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-accessible_attributes","(role = :default)",""],["action","ActionController::Metal","ActionController/Metal.html#method-c-action","(name, klass = ActionDispatch::Request)","<p>Return a rack endpoint for the given action. Memoize the endpoint, so\nmultiple calls into MyController.action …\n"],["action_methods","ActionController::HideActions::ClassMethods","ActionController/HideActions/ClassMethods.html#method-i-action_methods","()","<p>Overrides AbstractController::Base#action_methods to remove any methods\nthat are listed as hidden methods. …\n"],["active?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-active-3F","()","<p>Checks whether the connection to the database is still active. This\nincludes checking whether the database …\n"],["active?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-active-3F","()","<p>CONNECTION MANAGEMENT ====================================\n"],["active?","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-active-3F","()","<p>CONNECTION MANAGEMENT ====================================\n"],["active?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-active-3F","()","<p>Is this connection alive and ready for queries?\n"],["active_authorizer","ActiveModel::MassAssignmentSecurity::ClassMethods","ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-active_authorizer","()",""],["active_authorizers","ActiveModel::MassAssignmentSecurity::ClassMethods","ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-active_authorizers","()",""],["active_connection?","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-active_connection-3F","()","<p>Check to see if there is an active connection in this connection pool.\n"],["active_connections?","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-active_connections-3F","()","<p>Returns true if there are any active connections among the connection pools\nthat the ConnectionHandler …\n"],["acts_like?","Object","Object.html#method-i-acts_like-3F","(duck)","<p>A duck-type assistant method. For example, Active Support extends Date to\ndefine an acts_like_date? method, …\n"],["acts_like_date?","Date","Date.html#method-i-acts_like_date-3F","()","<p>Duck-types as a Date-like class. See Object#acts_like?.\n"],["acts_like_date?","DateTime","DateTime.html#method-i-acts_like_date-3F","()","<p>Duck-types as a Date-like class. See Object#acts_like?.\n"],["acts_like_string?","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-acts_like_string-3F","()","<p>Enable more predictable duck-typing on String-like classes. See\nObject#acts_like?.\n"],["acts_like_string?","String","String.html#method-i-acts_like_string-3F","()","<p>Enable more predictable duck-typing on String-like classes. See\n<code>Object#acts_like?</code>.\n"],["acts_like_time?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-acts_like_time-3F","()","<p>So that <code>self</code> <code>acts_like?(:time)</code>.\n"],["acts_like_time?","DateTime","DateTime.html#method-i-acts_like_time-3F","()","<p>Duck-types as a Time-like class. See Object#acts_like?.\n"],["acts_like_time?","Time","Time.html#method-i-acts_like_time-3F","()","<p>Duck-types as a Time-like class. See Object#acts_like?.\n"],["adapter_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-adapter_name","()","<p>Returns the human-readable name of the adapter. Use mixed case - one can\nalways use downcase if needed. …\n"],["adapter_name","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-adapter_name","()",""],["adapter_name","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-adapter_name","()","<p>Returns ‘PostgreSQL’ as adapter name for identification purposes.\n"],["add","ActionController::Renderers","ActionController/Renderers.html#method-c-add","(key, &block)","<p>Adds a new renderer to call within controller actions. A renderer is\ninvoked by passing its name as an …\n"],["add","ActiveModel::Errors","ActiveModel/Errors.html#method-i-add","(attribute, message = nil, options = {})","<p>Adds <code>message</code> to the error messages on <code>attribute</code>,\nwhich will be returned on a call to <code>on(attribute)</code> for …\n"],["add","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-add","(record)",""],["add","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-i-add","(severity, message = nil, progname = nil, &block)",""],["add_column","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-add_column","(table_name, column_name, type, options = {})",""],["add_column","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-add_column","(table_name, column_name, type, options = {})",""],["add_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-add_column","(table_name, column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["add_column","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_column","(table_name, column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["add_column_position!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-add_column_position-21","(sql, options)",""],["add_column_position!","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-add_column_position-21","(sql, options)",""],["add_column_sql","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-add_column_sql","(table_name, column_name, type, options = {})",""],["add_error","ActiveSupport::Testing::ProxyTestResult","ActiveSupport/Testing/ProxyTestResult.html#method-i-add_error","(e)",""],["add_expr_escaped","ActionView::Template::Handlers::Erubis","ActionView/Template/Handlers/Erubis.html#method-i-add_expr_escaped","(src, code)",""],["add_expr_literal","ActionView::Template::Handlers::Erubis","ActionView/Template/Handlers/Erubis.html#method-i-add_expr_literal","(src, code)",""],["add_filter","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-add_filter","(&block)","<p>Adds a filter from the block provided. Each line in the backtrace will be\nmapped against this filter. …\n"],["add_index","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index","(table_name, column_name, options = {})","<p>Adds a new index to the table.  <code>column_name</code> can be a single\nSymbol, or an Array of Symbols.\n<p>The index …\n"],["add_index_options","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index_options","(table_name, column_name, options = {})",""],["add_index_sql","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-add_index_sql","(table_name, column_name, options = {})",""],["add_limit_offset!","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-add_limit_offset-21","(sql, options)","<p>Appends <code>LIMIT</code> and <code>OFFSET</code> options to an SQL\nstatement, or some SQL fragment that has the same semantics …\n"],["add_limit_offset!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-add_limit_offset-21","(sql, options)",""],["add_observer","ActiveModel::Observing::ClassMethods","ActiveModel/Observing/ClassMethods.html#method-i-add_observer","(observer)","<p>Add a new observer to the pool. The new observer needs to respond to\n‘update’, otherwise it raises an …\n"],["add_observer!","ActiveRecord::Observer","ActiveRecord/Observer.html#method-i-add_observer-21","(klass)",""],["add_on_blank","ActiveModel::Errors","ActiveModel/Errors.html#method-i-add_on_blank","(attributes, options = {})","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is blank (using Object#blank? …\n"],["add_on_empty","ActiveModel::Errors","ActiveModel/Errors.html#method-i-add_on_empty","(attributes, options = {})","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is empty.\n"],["add_postamble","ActionView::Template::Handlers::Erubis","ActionView/Template/Handlers/Erubis.html#method-i-add_postamble","(src)",""],["add_preamble","ActionView::Template::Handlers::Erubis","ActionView/Template/Handlers/Erubis.html#method-i-add_preamble","(src)",""],["add_renderer","ActionController","ActionController.html#method-c-add_renderer","(key, &block)","<p>See <code>Renderers.add</code>\n"],["add_silencer","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-add_silencer","(&block)","<p>Adds a silencer from the block provided. If the silencer returns true for a\ngiven line, it will be excluded …\n"],["add_text","ActionView::Template::Handlers::Erubis","ActionView/Template/Handlers/Erubis.html#method-i-add_text","(src, text)",""],["add_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_timestamps","(table_name)","<p>Adds timestamps (created_at and updated_at) columns to the named table.\n<p>Examples\n\n<pre>add_timestamps(:suppliers)</pre>\n"],["add_timestamps_sql","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-add_timestamps_sql","(table_name)",""],["add_to_transaction","ActiveRecord::Transactions","ActiveRecord/Transactions.html#method-i-add_to_transaction","()","<p>Add the record to the current transaction so that the :after_rollback and\n:after_commit callbacks can …\n"],["add_transaction_record","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-add_transaction_record","(record)","<p>Register a record with the current transaction so that its after_commit and\nafter_rollback callbacks …\n"],["add_whiner","NilClass","NilClass.html#method-c-add_whiner","(klass)",""],["advance","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-advance","(options)",""],["advance","Date","Date.html#method-i-advance","(options)","<p>Provides precise Date calculations for years, months, and days.  The\n<code>options</code> parameter takes a hash with …\n"],["advance","DateTime","DateTime.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days.\nThe <code>options</code> parameter takes …\n"],["advance","Time","Time.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days.\nThe <code>options</code> parameter takes …\n"],["after_commit","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-after_commit","(*args, &block)",""],["after_rollback","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-after_rollback","(*args, &block)",""],["after_validation","ActiveModel::Validations::Callbacks::ClassMethods","ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-after_validation","(*args, &block)",""],["aggregate_mapping","ActiveRecord::Base","ActiveRecord/Base.html#method-c-aggregate_mapping","(reflection)",""],["ago","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-ago","(time = ::Time.current)","<p>Calculates a new Time or Date that is as far in the past as this Duration\nrepresents.\n"],["ago","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-ago","(other)",""],["ago","Date","Date.html#method-i-ago","(seconds)","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["ago","DateTime","DateTime.html#method-i-ago","(seconds)","<p>Returns a new DateTime representing the time a number of seconds ago Do not\nuse this method in combination …\n"],["ago","Numeric","Numeric.html#method-i-ago","(time = ::Time.current)","<p>Reads best without arguments:  10.minutes.ago\n"],["ago","Time","Time.html#method-i-ago","(seconds)","<p>Returns a new Time representing the time a number of seconds ago, this is\nbasically a wrapper around …\n"],["alias_attribute","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-alias_attribute","(new_name, old_name)",""],["alias_attribute","Module","Module.html#method-i-alias_attribute","(new_name, old_name)","<p>Allows you to make aliases for attributes, which includes getter, setter,\nand query methods.\n<p>Example: …\n"],["alias_method_chain","Module","Module.html#method-i-alias_method_chain","(target, feature)","<p>Encapsulates the common pattern of:\n\n<pre>alias_method :foo_without_feature, :foo\nalias_method :foo, :foo_with_feature</pre>\n"],["all","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-all","(*args)","<p>A convenience wrapper for <code>find(:all, *args)</code>. You can pass in\nall the same arguments to this method as …\n"],["all","ActiveResource::Base","ActiveResource/Base.html#method-c-all","(*args)","<p>This is an alias for find(:all).  You can pass in all the same arguments to\nthis method as you can to …\n"],["all","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-all","()","<p>Return an array of all TimeZone objects. There are multiple TimeZone\nobjects per time zone, in many cases, …\n"],["all_helpers_from_path","ActionController::Helpers::ClassMethods","ActionController/Helpers/ClassMethods.html#method-i-all_helpers_from_path","(path)",""],["announce","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-announce","(message)",""],["anonymous?","Module","Module.html#method-i-anonymous-3F","()","<p>A module may or may not have a name.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M</span>; <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">M</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-comment\"># =&gt; &quot;M&quot;</span>\n\n<span class=\"ruby-identifier\">m</span> = <span class=\"ruby-constant\">Module</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-comment\"># =&gt; &quot;&quot;</span>\n</pre>\n<p>A module …\n"],["any?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-any-3F","()",""],["api_behavior","ActionController::Responder","ActionController/Responder.html#method-i-api_behavior","(error)","<p>This is the common behavior for formats associated with APIs, such as :xml\nand :json.\n"],["api_location","ActionController::Responder","ActionController/Responder.html#method-i-api_location","()",""],["append_features","ActiveSupport::Concern","ActiveSupport/Concern.html#method-i-append_features","(base)",""],["application","Rails","Rails.html#method-c-application","()",""],["application=","Rails","Rails.html#method-c-application-3D","(application)",""],["apply_finder_options","ActiveRecord::SpawnMethods","ActiveRecord/SpawnMethods.html#method-i-apply_finder_options","(options)",""],["apply_join_dependency","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-apply_join_dependency","(relation, join_dependency)",""],["arel","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-arel","()",""],["arel_engine","ActiveRecord::Base","ActiveRecord/Base.html#method-c-arel_engine","()",""],["arel_table","ActiveRecord::Base","ActiveRecord/Base.html#method-c-arel_table","()",""],["as_json","ActiveModel::Errors","ActiveModel/Errors.html#method-i-as_json","(options=nil)","<p>Returns an ActiveSupport::OrderedHash that can be used as the JSON\nrepresentation for this object.\n"],["as_json","ActiveModel::Serializers::JSON","ActiveModel/Serializers/JSON.html#method-i-as_json","(options = nil)","<p>Returns a JSON string representing the model. Some configuration can be\npassed through <code>options</code>.\n<p>The option …\n"],["as_json","ActiveSupport::JSON::Encoding::Encoder","ActiveSupport/JSON/Encoding/Encoder.html#method-i-as_json","(value)","<p>like encode, but only calls as_json, without encoding to string\n"],["as_json","ActiveSupport::JSON::Variable","ActiveSupport/JSON/Variable.html#method-i-as_json","(options = nil)",""],["as_json","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-as_json","(options = nil)","<p>Coerces time to a string for JSON encoding. The default format is ISO 8601.\nYou can get %Y/%m/%d %H:%M:% …\n"],["as_json","BigDecimal","BigDecimal.html#method-i-as_json","(options = nil)","<p>A BigDecimal would be naturally represented as a JSON number. Most\nlibraries, however, parse non-integer …\n"],["as_json","FalseClass","FalseClass.html#method-i-as_json","(options = nil)",""],["as_json","NilClass","NilClass.html#method-i-as_json","(options = nil)",""],["as_json","Numeric","Numeric.html#method-i-as_json","(options = nil)",""],["as_json","Regexp","Regexp.html#method-i-as_json","(options = nil)",""],["as_json","String","String.html#method-i-as_json","(options = nil)",""],["as_json","Symbol","Symbol.html#method-i-as_json","(options = nil)",""],["as_json","TrueClass","TrueClass.html#method-i-as_json","(options = nil)",""],["assert_blank","ActiveSupport::Testing::Assertions","ActiveSupport/Testing/Assertions.html#method-i-assert_blank","(object, message=nil)","<p>Test if an expression is blank. Passes if object.blank? is true.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_blank</span> [] <span class=\"ruby-comment\"># =&gt; true</span>\n</pre>\n"],["assert_difference","ActiveSupport::Testing::Assertions","ActiveSupport/Testing/Assertions.html#method-i-assert_difference","(expression, difference = 1, message = nil, &block)","<p>Test numeric difference between the return value of an expression as a\nresult of what is evaluated in …\n"],["assert_no_difference","ActiveSupport::Testing::Assertions","ActiveSupport/Testing/Assertions.html#method-i-assert_no_difference","(expression, message = nil, &block)","<p>Assertion that the numeric result of evaluating an expression is not\nchanged before and after invoking …\n"],["assert_present","ActiveSupport::Testing::Assertions","ActiveSupport/Testing/Assertions.html#method-i-assert_present","(object, message=nil)","<p>Test if an expression is not blank. Passes if object.present? is true.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_present</span> {:<span class=\"ruby-identifier\">data</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'x'</span> } <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_template","ActionController::TemplateAssertions","ActionController/TemplateAssertions.html#method-i-assert_template","(options = {}, message = nil)","<p>Asserts that the request was rendered with the appropriate template file or\npartials.\n<p>Examples\n\n<pre># assert ...</pre>\n"],["assert_valid_keys","Hash","Hash.html#method-i-assert_valid_keys","(*valid_keys)","<p>Validate all keys in a hash match *valid keys, raising ArgumentError on a\nmismatch. Note that keys are …\n"],["asset_name","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-i-asset_name","()",""],["asset_name","ActionView::Helpers::AssetTagHelper::JavascriptIncludeTag","ActionView/Helpers/AssetTagHelper/JavascriptIncludeTag.html#method-i-asset_name","()",""],["asset_name","ActionView::Helpers::AssetTagHelper::StylesheetIncludeTag","ActionView/Helpers/AssetTagHelper/StylesheetIncludeTag.html#method-i-asset_name","()",""],["asset_tag","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-i-asset_tag","(source, options)",""],["asset_tag","ActionView::Helpers::AssetTagHelper::JavascriptIncludeTag","ActionView/Helpers/AssetTagHelper/JavascriptIncludeTag.html#method-i-asset_tag","(source, options)",""],["asset_tag","ActionView::Helpers::AssetTagHelper::StylesheetIncludeTag","ActionView/Helpers/AssetTagHelper/StylesheetIncludeTag.html#method-i-asset_tag","(source, options)",""],["assign_attributes","ActiveRecord::Base","ActiveRecord/Base.html#method-i-assign_attributes","(new_attributes, options = {})","<p>Allows you to set all the attributes for a particular mass-assignment\nsecurity role by passing in a hash …\n"],["assign_shortcuts","ActionController::Compatibility","ActionController/Compatibility.html#method-i-assign_shortcuts","(*)",""],["assume_migrated_upto_version","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-assume_migrated_upto_version","(version, migrations_paths = ActiveRecord::Migrator.migrations_paths)",""],["at","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-at","(secs)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from number of seconds …\n"],["at","String","String.html#method-i-at","(position)","<p>Returns the character at the <code>position</code> treating the string as\nan array (where 0 is the first character). …\n"],["at_beginning_of_day","Date","Date.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_day","DateTime","DateTime.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_day","Time","Time.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_month","Date","Date.html#method-i-at_beginning_of_month","()",""],["at_beginning_of_month","Time","Time.html#method-i-at_beginning_of_month","()",""],["at_beginning_of_quarter","Date","Date.html#method-i-at_beginning_of_quarter","()",""],["at_beginning_of_quarter","Time","Time.html#method-i-at_beginning_of_quarter","()",""],["at_beginning_of_week","Date","Date.html#method-i-at_beginning_of_week","()",""],["at_beginning_of_week","Time","Time.html#method-i-at_beginning_of_week","()",""],["at_beginning_of_year","Date","Date.html#method-i-at_beginning_of_year","()",""],["at_beginning_of_year","Time","Time.html#method-i-at_beginning_of_year","()",""],["at_end_of_month","Date","Date.html#method-i-at_end_of_month","()",""],["at_end_of_month","Time","Time.html#method-i-at_end_of_month","()",""],["at_end_of_quarter","Date","Date.html#method-i-at_end_of_quarter","()",""],["at_end_of_quarter","Time","Time.html#method-i-at_end_of_quarter","()",""],["at_end_of_week","Date","Date.html#method-i-at_end_of_week","()",""],["at_end_of_week","Time","Time.html#method-i-at_end_of_week","()",""],["at_end_of_year","Date","Date.html#method-i-at_end_of_year","()",""],["at_end_of_year","Time","Time.html#method-i-at_end_of_year","()",""],["at_midnight","Date","Date.html#method-i-at_midnight","()",""],["at_midnight","DateTime","DateTime.html#method-i-at_midnight","()",""],["at_midnight","Time","Time.html#method-i-at_midnight","()",""],["atom_feed","ActionView::Helpers::AtomFeedHelper","ActionView/Helpers/AtomFeedHelper.html#method-i-atom_feed","(options = {}, &block)","<p>Adds easy defaults to writing Atom feeds with the Builder template engine\n(this does not work on ERB …\n"],["atomic_write","File","File.html#method-c-atomic_write","(file_name, temp_dir = Dir.tmpdir)","<p>Write to a file atomically.  Useful for situations where you don’t want\nother processes or threads to …\n"],["attach_to","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-c-attach_to","(namespace, log_subscriber=new, notifier=ActiveSupport::Notifications)",""],["attachments","ActionMailer::Base","ActionMailer/Base.html#method-i-attachments","()","<p>Allows you to add attachments to an email, like so:\n\n<pre>mail.attachments['filename.jpg'] = File.read('/path/to/filename.jpg')</pre>\n"],["attr_accessible","ActiveModel::MassAssignmentSecurity::ClassMethods","ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attr_accessible","(*args)","<p>Specifies a white list of model attributes that can be set via\nmass-assignment.\n<p>Like <code>attr_protected</code>, a …\n"],["attr_accessor_with_default","Module","Module.html#method-i-attr_accessor_with_default","(sym, default = Proc.new)","<p>Declare an attribute accessor with an initial default return value.\n<p>To give attribute <code>:age</code> the initial …\n"],["attr_internal","Module","Module.html#method-i-attr_internal","(*attrs)",""],["attr_internal_accessor","Module","Module.html#method-i-attr_internal_accessor","(*attrs)","<p>Declares an attribute reader and writer backed by an internally-named\ninstance variable.\n"],["attr_internal_reader","Module","Module.html#method-i-attr_internal_reader","(*attrs)","<p>Declares an attribute reader backed by an internally-named instance\nvariable.\n"],["attr_internal_writer","Module","Module.html#method-i-attr_internal_writer","(*attrs)","<p>Declares an attribute writer backed by an internally-named instance\nvariable.\n"],["attr_protected","ActiveModel::MassAssignmentSecurity::ClassMethods","ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attr_protected","(*args)","<p>Attributes named in this macro are protected from mass-assignment whenever\nattributes are sanitized before …\n"],["attr_readonly","ActiveRecord::Base","ActiveRecord/Base.html#method-c-attr_readonly","(*attributes)","<p>Attributes listed as readonly will be used to create a new record but\nupdate operations will ignore these …\n"],["attribute_for_inspect","ActiveRecord::Base","ActiveRecord/Base.html#method-i-attribute_for_inspect","(attr_name)","<p>Returns an <code>#inspect</code>-like string for the value of the attribute\n<code>attr_name</code>. String attributes are truncated …\n"],["attribute_match","HTML::Selector","HTML/Selector.html#method-i-attribute_match","(equality, value)","<p>Create a regular expression to match an attribute value based on the\nequality operator (=, ^=, |=, etc). …\n"],["attribute_method?","ActiveModel::AttributeMethods","ActiveModel/AttributeMethods.html#method-i-attribute_method-3F","(attr_name)",""],["attribute_method?","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-attribute_method-3F","(attribute)","<p>Check if method is an attribute method or not.\n"],["attribute_method?","ActiveRecord::Base","ActiveRecord/Base.html#method-c-attribute_method-3F","(attribute)",""],["attribute_method_affix","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_affix","(*affixes)","<p>Declares a method available for all attributes with the given prefix and\nsuffix. Uses <code>method_missing</code> …\n"],["attribute_method_prefix","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_prefix","(*prefixes)","<p>Declares a method available for all attributes with the given prefix. Uses\n<code>method_missing</code> and <code>respond_to</code> …\n"],["attribute_method_suffix","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_suffix","(*suffixes)","<p>Declares a method available for all attributes with the given suffix. Uses\n<code>method_missing</code> and <code>respond_to</code> …\n"],["attribute_methods_generated?","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_methods_generated-3F","()",""],["attribute_names","ActiveRecord::Base","ActiveRecord/Base.html#method-c-attribute_names","()","<p>Returns an array of column names as strings if it’s not an abstract class\nand table exists. Otherwise …\n"],["attribute_names","ActiveRecord::Base","ActiveRecord/Base.html#method-i-attribute_names","()","<p>Returns an array of names for the attributes available on this object.\n"],["attribute_present?","ActiveRecord::Base","ActiveRecord/Base.html#method-i-attribute_present-3F","(attribute)","<p>Returns true if the specified <code>attribute</code> has been set by the\nuser or by a database load and is neither …\n"],["attributes","ActiveRecord::Base","ActiveRecord/Base.html#method-i-attributes","()","<p>Returns a hash of all the attributes with their names as keys and the\nvalues of the attributes as values. …\n"],["attributes=","ActiveRecord::Base","ActiveRecord/Base.html#method-i-attributes-3D","(new_attributes, guard_protected_attributes = nil)","<p>Allows you to set all the attributes at once by passing in a hash with keys\nmatching the attribute names …\n"],["attributes_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-attributes_before_type_cast","()","<p>Returns a hash of attributes before typecasting and deserialization.\n"],["attributes_protected_by_default","ActiveModel::MassAssignmentSecurity::ClassMethods","ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attributes_protected_by_default","()",""],["attributes_protected_by_default","ActiveModel::SecurePassword::ClassMethods","ActiveModel/SecurePassword/ClassMethods.html#method-c-attributes_protected_by_default","()",""],["audio_path","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-audio_path","(source)","<p>Computes the path to an audio asset in the public audios directory. Full\npaths from the document root …\n"],["audio_tag","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-audio_tag","(source, options = {})","<p>Returns an html audio tag for the <code>source</code>. The\n<code>source</code> can be full path or file that exists in your public …\n"],["auth_type","ActiveResource::Base","ActiveResource/Base.html#method-c-auth_type","()",""],["auth_type=","ActiveResource::Base","ActiveResource/Base.html#method-c-auth_type-3D","(auth_type)",""],["auth_type=","ActiveResource::Connection","ActiveResource/Connection.html#method-i-auth_type-3D","(auth_type)","<p>Sets the auth type for remote service.\n"],["authenticate","ActionController::HttpAuthentication::Basic","ActionController/HttpAuthentication/Basic.html#method-i-authenticate","(request, &login_procedure)",""],["authenticate","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-authenticate","(request, realm, &password_procedure)","<p>Returns false on a valid response, true otherwise\n"],["authenticate","ActionController::HttpAuthentication::Token","ActionController/HttpAuthentication/Token.html#method-i-authenticate","(controller, &login_procedure)","<p>If token Authorization header is present, call the login procedure with the\npresent token and options. …\n"],["authenticate","ActiveModel::SecurePassword::InstanceMethodsOnActivation","ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-authenticate","(unencrypted_password)","<p>Returns self if the password is correct, otherwise false.\n"],["authenticate_or_request_with_http_basic","ActionController::HttpAuthentication::Basic::ControllerMethods","ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-authenticate_or_request_with_http_basic","(realm = \"Application\", &login_procedure)",""],["authenticate_or_request_with_http_digest","ActionController::HttpAuthentication::Digest::ControllerMethods","ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-authenticate_or_request_with_http_digest","(realm = \"Application\", &password_procedure)",""],["authenticate_or_request_with_http_token","ActionController::HttpAuthentication::Token::ControllerMethods","ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-authenticate_or_request_with_http_token","(realm = \"Application\", &login_procedure)",""],["authenticate_with_http_basic","ActionController::HttpAuthentication::Basic::ControllerMethods","ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-authenticate_with_http_basic","(&login_procedure)",""],["authenticate_with_http_digest","ActionController::HttpAuthentication::Digest::ControllerMethods","ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-authenticate_with_http_digest","(realm = \"Application\", &password_procedure)","<p>Authenticate with HTTP Digest, returns true or false\n"],["authenticate_with_http_token","ActionController::HttpAuthentication::Token::ControllerMethods","ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-authenticate_with_http_token","(&login_procedure)",""],["authentication_header","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-authentication_header","(controller, realm)",""],["authentication_request","ActionController::HttpAuthentication::Basic","ActionController/HttpAuthentication/Basic.html#method-i-authentication_request","(controller, realm)",""],["authentication_request","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-authentication_request","(controller, realm, message = nil)",""],["authentication_request","ActionController::HttpAuthentication::Token","ActionController/HttpAuthentication/Token.html#method-i-authentication_request","(controller, realm)","<p>Sets a WWW-Authenticate to let the client know a token is desired.\n<p>controller - ActionController::Base …\n"],["auto_discovery_link_tag","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-auto_discovery_link_tag","(type = :rss, url_options = {}, tag_options = {})","<p>Returns a link tag that browsers and news readers can use to auto-detect an\nRSS or ATOM feed. The <code>type</code> …\n"],["auto_flush","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-i-auto_flush","()",""],["auto_flushing=","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-i-auto_flushing-3D","(period)","<p>Set the auto-flush period. Set to true to flush after every log message, to\nan integer to flush every …\n"],["autoload","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-autoload","(const_name, path = @@at_path)",""],["autoload_at","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-autoload_at","(path)",""],["autoload_under","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-autoload_under","(path)",""],["autoloads","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-autoloads","()",""],["average","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-average","(column_name, options = {})","<p>Calculates the average value on a given column. Returns <code>nil</code> if\nthere’s no row. See <code>calculate</code> for examples …\n"],["backend","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-backend","()",""],["backend=","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-backend-3D","(name)",""],["backend=","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-backend-3D","(name)",""],["backtrace_cleaner","Rails","Rails.html#method-c-backtrace_cleaner","()",""],["bang?","ActiveRecord::DynamicFinderMatch","ActiveRecord/DynamicFinderMatch.html#method-i-bang-3F","()",""],["base_class","ActiveRecord::Base","ActiveRecord/Base.html#method-c-base_class","()","<p>Returns the base AR subclass that this class descends from. If A extends\nAR::Base, A.base_class will …\n"],["basename","ActiveRecord::MigrationProxy","ActiveRecord/MigrationProxy.html#method-i-basename","()",""],["becomes","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-becomes","(klass)","<p>Returns an instance of the specified <code>klass</code> with the attributes\nof the current record. This is mostly …\n"],["before_filters","ActionController::Testing::ClassMethods","ActionController/Testing/ClassMethods.html#method-i-before_filters","()",""],["before_validation","ActiveModel::Validations::Callbacks::ClassMethods","ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-before_validation","(*args, &block)",""],["begin_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_db_transaction","()","<p>Begins the transaction (and turns off auto-committing).\n"],["begin_db_transaction","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-begin_db_transaction","()",""],["begin_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-begin_db_transaction","()","<p>Begins a transaction.\n"],["beginning_of_day","Date","Date.html#method-i-beginning_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["beginning_of_day","DateTime","DateTime.html#method-i-beginning_of_day","()","<p>Returns a new DateTime representing the start of the day (0:00)\n"],["beginning_of_day","Time","Time.html#method-i-beginning_of_day","()","<p>Returns a new Time representing the start of the day (0:00)\n"],["beginning_of_month","Date","Date.html#method-i-beginning_of_month","()","<p>Returns a new ; DateTime objects will have time set to 0:00DateTime\nrepresenting the start of the month …\n"],["beginning_of_month","Time","Time.html#method-i-beginning_of_month","()","<p>Returns a new Time representing the start of the month (1st of the month,\n0:00)\n"],["beginning_of_quarter","Date","Date.html#method-i-beginning_of_quarter","()","<p>Returns a new Date/DateTime representing the start of the quarter (1st of\njanuary, april, july, october; …\n"],["beginning_of_quarter","Time","Time.html#method-i-beginning_of_quarter","()","<p>Returns  a new Time representing the start of the quarter (1st of january,\napril, july, october, 0:00) …\n"],["beginning_of_week","Date","Date.html#method-i-beginning_of_week","()","<p>Returns a new Date/DateTime representing the “start” of this week (i.e,\nMonday; DateTime objects …\n"],["beginning_of_week","Time","Time.html#method-i-beginning_of_week","()","<p>Returns a new Time representing the “start” of this week (Monday, 0:00)\n"],["beginning_of_year","Date","Date.html#method-i-beginning_of_year","()","<p>Returns a new Date/DateTime representing the start of the year (1st of\njanuary; DateTime objects will …\n"],["beginning_of_year","Time","Time.html#method-i-beginning_of_year","()","<p>Returns  a new Time representing the start of the year (1st of january,\n0:00)\n"],["behavior","ActiveSupport::Deprecation","ActiveSupport/Deprecation.html#method-c-behavior","()","<p>Returns the set behavior or if one isn’t set, defaults to\n<code>:stderr</code>\n"],["behavior=","ActiveSupport::Deprecation","ActiveSupport/Deprecation.html#method-c-behavior-3D","(behavior)","<p>Sets the behavior to the specified value. Can be a single value or an\narray.\n<p>Examples\n\n<pre>ActiveSupport::Deprecation.behavior ...</pre>\n"],["belongs_to","ActiveRecord::Associations::ClassMethods","ActiveRecord/Associations/ClassMethods.html#method-i-belongs_to","(name, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if this class …\n"],["belongs_to","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-belongs_to","(*args)",""],["belongs_to","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-belongs_to","(*args)",""],["benchmark","ActiveSupport::Benchmarkable","ActiveSupport/Benchmarkable.html#method-i-benchmark","(message = \"Benchmarking\", options = {})","<p>Allows you to measure the execution time of a block in a template and\nrecords the result to the log. …\n"],["benchmark","ActiveSupport::Testing::Performance::Metrics::Base","ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-benchmark","()",""],["between?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-between-3F","(min, max)",""],["bind","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-bind","(value)",""],["blank?","ActiveModel::Errors","ActiveModel/Errors.html#method-i-blank-3F","()",""],["blank?","FalseClass","FalseClass.html#method-i-blank-3F","()","<p><code>false</code> is blank:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">false</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-comment\"># =&gt; true</span>\n</pre>\n"],["blank?","NilClass","NilClass.html#method-i-blank-3F","()","<p><code>nil</code> is blank:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-comment\"># =&gt; true</span>\n</pre>\n"],["blank?","Object","Object.html#method-i-blank-3F","()","<p>An object is blank if it’s false, empty, or a whitespace string. For\nexample, “”, “   …\n"],["blank?","String","String.html#method-i-blank-3F","()","<p>A string is blank if it’s empty or contains whitespaces only:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;&quot;</span>.<span class=\"ruby-identifier\">blank?</span>                 <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-string\">&quot;   ...\n</span></pre>\n"],["blank?","TrueClass","TrueClass.html#method-i-blank-3F","()","<p><code>true</code> is not blank:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">true</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n</pre>\n"],["breakpoint","Kernel","Kernel.html#method-i-breakpoint","()",""],["buffer","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-i-buffer","()",""],["build","ActionController::Middleware","ActionController/Middleware.html#method-c-build","(app)",""],["build","ActionView::Resolver::Path","ActionView/Resolver/Path.html#method-c-build","(name, prefix, partial)",""],["build","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-build","(*args, &block)",""],["build","ActiveResource::Base","ActiveResource/Base.html#method-c-build","(attributes = {})","<p>Builds a new, unsaved record using the default values from the remote\nserver so that it can be used with …\n"],["build_arel","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-build_arel","()",""],["build_mem_cache","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-c-build_mem_cache","(*addresses)",""],["button_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-button_tag","(content_or_options = nil, options = nil, &block)","<p>Creates a button element that defines a <code>submit</code> button,\n<code>reset</code>button or a generic button which can be used …\n"],["button_to","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-button_to","(name, options = {}, html_options = {})","<p>Generates a form containing a single button that submits to the URL created\nby the set of <code>options</code>. This …\n"],["button_to_function","ActionView::Helpers::JavaScriptHelper","ActionView/Helpers/JavaScriptHelper.html#method-i-button_to_function","(name, function=nil, html_options={})","<p>Returns a button whose <code>onclick</code> handler triggers the passed\nJavaScript.\n<p>The helper receives a name, JavaScript …\n"],["byte","Numeric","Numeric.html#method-i-byte","()",""],["bytes","Numeric","Numeric.html#method-i-bytes","()","<p>Enables the use of byte calculations and declarations, like 45.bytes +\n2.6.megabytes\n"],["cache","ActionController::Caching","ActionController/Caching.html#method-i-cache","(key, options = {}, &block)","<p>Convenience accessor\n"],["cache","ActionView::Helpers::CacheHelper","ActionView/Helpers/CacheHelper.html#method-i-cache","(name = {}, options = nil, &block)","<p>This helper exposes a method for caching fragments of a view  rather than\nan entire action or page.  …\n"],["cache","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-cache","()","<p>Enable the query cache within the block.\n"],["cache","ActiveRecord::QueryCache::ClassMethods","ActiveRecord/QueryCache/ClassMethods.html#method-i-cache","(&block)","<p>Enable the query cache within the block if Active Record is configured.\n"],["cache","Rails","Rails.html#method-c-cache","()",""],["cache_attribute?","ActiveRecord::AttributeMethods::Read::ClassMethods","ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cache_attribute-3F","(attr_name)","<p>Returns <code>true</code> if the provided attribute is being cached.\n"],["cache_attributes","ActiveRecord::AttributeMethods::Read::ClassMethods","ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cache_attributes","(*attribute_names)","<p><code>cache_attributes</code> allows you to declare which converted\nattribute values should be cached. Usually caching ...\n"],["cache_fixtures","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-cache_fixtures","(connection, fixtures_map)",""],["cache_for_connection","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-cache_for_connection","(connection)",""],["cache_key","ActiveRecord::Base","ActiveRecord/Base.html#method-i-cache_key","()","<p>Returns a cache key that can be used to identify this record.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Product</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">cache_key</span>     <span class=\"ruby-comment\"># =&gt; &quot;products/new&quot; ...</span>\n</pre>\n"],["cache_page","ActionController::Caching::Pages","ActionController/Caching/Pages.html#method-i-cache_page","(content = nil, options = nil)","<p>Manually cache the <code>content</code> in the key determined by\n<code>options</code>. If no content is provided, the contents …\n"],["cache_page","ActionController::Caching::Pages::ClassMethods","ActionController/Caching/Pages/ClassMethods.html#method-i-cache_page","(content, path, extension = nil)","<p>Manually cache the <code>content</code> in the key determined by\n<code>path</code>. Example:\n\n<pre>cache_page &quot;I'm the cached content&quot;, ...</pre>\n"],["cache_store","ActionController::Caching::ConfigMethods","ActionController/Caching/ConfigMethods.html#method-i-cache_store","()",""],["cache_store=","ActionController::Caching::ConfigMethods","ActionController/Caching/ConfigMethods.html#method-i-cache_store-3D","(store)",""],["cache_template_loading","ActionView::Base","ActionView/Base.html#method-c-cache_template_loading","()",""],["cache_template_loading=","ActionView::Base","ActionView/Base.html#method-c-cache_template_loading-3D","(value)",""],["cached_attributes","ActiveRecord::AttributeMethods::Read::ClassMethods","ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cached_attributes","()","<p>Returns the attributes which are cached. By default time related columns\nwith datatype <code>:datetime, :timestamp,</code> …\n"],["cached_fixtures","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-cached_fixtures","(connection, keys_to_fetch = nil)",""],["caches_action","ActionController::Caching::Actions::ClassMethods","ActionController/Caching/Actions/ClassMethods.html#method-i-caches_action","(*actions)","<p>Declares that <code>actions</code> should be cached. See\nActionController::Caching::Actions for details.\n"],["caches_page","ActionController::Caching::Pages::ClassMethods","ActionController/Caching/Pages/ClassMethods.html#method-i-caches_page","(*actions)","<p>Caches the <code>actions</code> using the page-caching approach that’ll\nstore the cache in a path within the page_cache_directory …\n"],["caching_allowed?","ActionController::Caching","ActionController/Caching.html#method-i-caching_allowed-3F","()",""],["calculate","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-calculate","(operation, column_name, options = {})","<p>This calculates aggregate values in the given column.  Methods for count,\nsum, average, minimum, and …\n"],["call","ActionController::Metal","ActionController/Metal.html#method-c-call","(env)","<p>Makes the controller a rack endpoint that points to the action in the given\nenv’s action_dispatch.request.path_parameters …\n"],["call","ActionController::Middleware::ActionMiddleware","ActionController/Middleware/ActionMiddleware.html#method-i-call","(env)",""],["call","ActionController::Responder","ActionController/Responder.html#method-c-call","(*args)","<p>Initializes a new responder an invoke the proper format. If the format is\nnot defined, call to_format. …\n"],["call","ActionView::Template::ActionView::Template::Template::Handler","ActionView/Template/ActionView/Template/Template/Handler.html#method-c-call","(template)",""],["call","ActionView::Template::Handlers::Builder","ActionView/Template/Handlers/Builder.html#method-i-call","(template)",""],["call","ActionView::Template::Handlers::Compilable::ClassMethods","ActionView/Template/Handlers/Compilable/ClassMethods.html#method-i-call","(template)",""],["call","ActionView::Template::Handlers::ERB","ActionView/Template/Handlers/ERB.html#method-i-call","(template)",""],["call","ActionView::Template::Handlers::ERB","ActionView/Template/Handlers/ERB.html#method-c-call","(template)",""],["call","ActiveRecord::ConnectionAdapters::ConnectionManagement","ActiveRecord/ConnectionAdapters/ConnectionManagement.html#method-i-call","(env)",""],["call","ActiveRecord::IdentityMap::Middleware","ActiveRecord/IdentityMap/Middleware.html#method-i-call","(env)",""],["call","ActiveRecord::QueryCache","ActiveRecord/QueryCache.html#method-i-call","(env)",""],["call","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-i-call","(message, *args)",""],["call","I18n::ExceptionHandler","I18n/ExceptionHandler.html#method-i-call","(exception, locale, key, options)",""],["call","Logger::SimpleFormatter","Logger/SimpleFormatter.html#method-i-call","(severity, timestamp, progname, msg)","<p>This method is invoked when a log event occurs\n"],["camelcase","String","String.html#method-i-camelcase","(first_letter = :upper)",""],["camelize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-camelize","(lower_case_and_underscored_word, first_letter_in_uppercase = true)","<p>By default, <code>camelize</code> converts strings to UpperCamelCase. If\nthe argument to <code>camelize</code> is set to <code>:lower</code> …\n"],["camelize","String","String.html#method-i-camelize","(first_letter = :upper)","<p>By default, <code>camelize</code> converts strings to UpperCamelCase. If\nthe argument to camelize is set to <code>:lower</code> …\n"],["capitalize","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-capitalize","()","<p>Converts the first character to uppercase and the remainder to lowercase.\n<p>Example:\n\n<pre>'über'.mb_chars.capitalize.to_s ...</pre>\n"],["capture","ActionView::Helpers::CaptureHelper","ActionView/Helpers/CaptureHelper.html#method-i-capture","(*args)","<p>The capture method allows you to extract part of a template into a\nvariable. You can then use this variable …\n"],["capture","Kernel","Kernel.html#method-i-capture","(stream)","<p>Captures the given stream and returns it:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">stream</span> = <span class=\"ruby-identifier\">capture</span>(:<span class=\"ruby-identifier\">stdout</span>) { <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-string\">&quot;Cool&quot;</span> }\n<span class=\"ruby-identifier\">stream</span> <span class=\"ruby-comment\"># =&gt; &quot;Cool\\n&quot;</span>\n</pre>\n"],["case_sensitive_equality_operator","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-case_sensitive_equality_operator","()",""],["case_sensitive_equality_operator","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-case_sensitive_equality_operator","()",""],["case_sensitive_equality_operator","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-case_sensitive_equality_operator","()",""],["case_sensitive_modifier","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-case_sensitive_modifier","(node)",""],["case_sensitive_modifier","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-case_sensitive_modifier","(node)",""],["case_sensitive_modifier","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-case_sensitive_modifier","(node)",""],["cattr_accessor","Class","Class.html#method-i-cattr_accessor","(*syms, &blk)",""],["cattr_reader","Class","Class.html#method-i-cattr_reader","(*syms)",""],["cattr_writer","Class","Class.html#method-i-cattr_writer","(*syms)",""],["cdata_block","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-cdata_block","(string)",""],["cdata_section","ActionView::Helpers::TagHelper","ActionView/Helpers/TagHelper.html#method-i-cdata_section","(content)","<p>Returns a CDATA section with the given <code>content</code>.  CDATA\nsections are used to escape blocks of text containing …\n"],["center","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-center","(integer, padstr=' ')","<p>Works just like <code>String#center</code>, only integer specifies\ncharacters instead of bytes.\n<p>Example:\n\n<pre>&quot;¾ cup&quot;.mb_chars.center(8).to_s ...</pre>\n"],["change","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-change","(column_name, type, options = {})","<p>Changes the column’s definition according to the new options. See\nTableDefinition#column for details …\n"],["change","Date","Date.html#method-i-change","(options)","<p>Returns a new Date where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change","DateTime","DateTime.html#method-i-change","(options)","<p>Returns a new DateTime where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change","Time","Time.html#method-i-change","(options)","<p>Returns a new Time where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change_column","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-change_column","(table_name, column_name, type, options = {})",""],["change_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column of a table.\n"],["change_column","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column’s definition according to the new options. See\nTableDefinition#column for details …\n"],["change_column_default","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-change_column_default","(table_name, column_name, default)",""],["change_column_default","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-change_column_default","(table_name, column_name, default)","<p>Changes the default value of a table column.\n"],["change_column_default","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_default","(table_name, column_name, default)","<p>Sets a new default value for a column.\n<p>Examples\n\n<pre>change_column_default(:suppliers, :qualification, 'new') ...</pre>\n"],["change_column_null","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_sql","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-change_column_sql","(table_name, column_name, type, options = {})",""],["change_default","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-change_default","(column_name, default)","<p>Sets a new default value for a column. See\nSchemaStatements#change_column_default\n<p>Examples\n\n<pre>t.change_default(:qualification, ...</pre>\n"],["change_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_table","(table_name, options = {})","<p>A block for changing columns in <code>table</code>.\n<p>Example\n\n<pre># change_table() yields a Table instance\nchange_table(:suppliers) ...</pre>\n"],["changed","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-changed","()","<p>List of attributes with unsaved changes.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changed</span> <span class=\"ruby-comment\"># =&gt; []</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> = <span class=\"ruby-string\">'bob'</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changed</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["changed?","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-changed-3F","()","<p>Returns true if any attribute have unsaved changes, false otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changed?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["changed_attributes","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-changed_attributes","()","<p>Map of change <code>attr =&gt; original value</code>.\n"],["changed_for_autosave?","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-changed_for_autosave-3F","()","<p>Returns whether or not this record has been changed in any way (including\nwhether any of its nested autosave …\n"],["changes","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-changes","()","<p>Map of changed attrs =&gt; [original value, new value].\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changes</span> <span class=\"ruby-comment\"># =&gt; {}</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> = <span class=\"ruby-string\">'bob'</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changes</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["characters","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-characters","(string)",""],["charset","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-charset","()","<p>Returns the database character set.\n"],["charset","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-charset","()","<p>Returns the database character set.\n"],["check_box","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-check_box","(method, options = {}, checked_value = \"1\", unchecked_value = \"0\")",""],["check_box","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-check_box","(object_name, method, options = {}, checked_value = \"1\", unchecked_value = \"0\")","<p>Returns a checkbox tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an object …\n"],["check_box_checked?","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-c-check_box_checked-3F","(value, checked_value)",""],["check_box_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-check_box_tag","(name, value = \"1\", checked = false, options = {})","<p>Creates a check box form input tag.\n<p>Options\n<p><code>:disabled</code> - If set to true, the user will not be able to use\n...\n"],["check_validity!","ActiveModel::EachValidator","ActiveModel/EachValidator.html#method-i-check_validity-21","()","<p>Hook method that gets called by the initializer allowing verification that\nthe arguments supplied are …\n"],["check_validity!","ActiveModel::Validations::ExclusionValidator","ActiveModel/Validations/ExclusionValidator.html#method-i-check_validity-21","()",""],["check_validity!","ActiveModel::Validations::FormatValidator","ActiveModel/Validations/FormatValidator.html#method-i-check_validity-21","()",""],["check_validity!","ActiveModel::Validations::InclusionValidator","ActiveModel/Validations/InclusionValidator.html#method-i-check_validity-21","()",""],["check_validity!","ActiveModel::Validations::LengthValidator","ActiveModel/Validations/LengthValidator.html#method-i-check_validity-21","()",""],["check_validity!","ActiveModel::Validations::NumericalityValidator","ActiveModel/Validations/NumericalityValidator.html#method-i-check_validity-21","()",""],["checkin","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkin","(conn)","<p>Check-in a database connection back into the pool, indicating that you no\nlonger need this connection. …\n"],["checkout","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout","()","<p>Check-out a database connection from the pool, indicating that you want to\nuse it. You should call #checkin …\n"],["civil_from_format","DateTime","DateTime.html#method-c-civil_from_format","(utc_or_local, year, month=1, day=1, hour=0, min=0, sec=0)",""],["class_attribute","Class","Class.html#method-i-class_attribute","(*attrs)","<p>Declare a class-level attribute whose value is inheritable by subclasses.\nSubclasses can change their …\n"],["class_eval","Kernel","Kernel.html#method-i-class_eval","(*args, &block)","<p>class_eval on an object acts like singleton_class.class_eval.\n"],["class_name","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-i-class_name","()","<p>Returns the class name for the macro.\n<p><code>composed_of :balance, :class_name =&gt; 'Money'</code> returns\n<code>'Money'</code> ...\n"],["class_of_active_record_descendant","ActiveRecord::Base","ActiveRecord/Base.html#method-c-class_of_active_record_descendant","(klass)","<p>Returns the class descending directly from ActiveRecord::Base or an\nabstract class, if any, in the inheritance …\n"],["classify","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-classify","(table_name)","<p>Create a class name from a plural table name like Rails does for table\nnames to models. Note that this …\n"],["classify","String","String.html#method-i-classify","()","<p>Create a class name from a plural table name like Rails does for table\nnames to models. Note that this …\n"],["clean","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-clean","(backtrace, kind = :silent)","<p>Returns the backtrace after all filters and silencers have been run against\nit. Filters run first, then …\n"],["cleanup","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-cleanup","(options = nil)",""],["cleanup","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-cleanup","(options = nil)",""],["cleanup","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-cleanup","(options = nil)","<p>Cleanup the cache by removing expired entries.\n<p>Options are passed to the underlying cache implementation. …\n"],["clear","ActiveModel::Errors","ActiveModel/Errors.html#method-i-clear","()","<p>Clear the messages\n"],["clear","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-clear","()",""],["clear","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-clear","(options = nil)","<p>Clear the entire cache on all memcached servers. This method should be used\nwith care when shared cache …\n"],["clear","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-clear","(options = nil)","<p>Clear the entire cache. Be careful with this method since it could affect\nother processes if shared cache …\n"],["clear","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-c-clear","()",""],["clear","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-clear","(scope = :all)","<p>Clears the loaded inflections within a given scope (default is\n<code>:all</code>). Give the scope as a symbol of the …\n"],["clear!","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-clear-21","()",""],["clear_active_connections!","ActiveRecord::Base","ActiveRecord/Base.html#method-c-clear_active_connections-21","()",""],["clear_active_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_active_connections-21","()","<p>Returns any connections in use by the current thread back to the pool, and\nalso returns connections to …\n"],["clear_all_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_all_connections-21","()",""],["clear_buffer","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-i-clear_buffer","()",""],["clear_cache","ActionView::Resolver","ActionView/Resolver.html#method-i-clear_cache","()",""],["clear_cache!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-clear_cache-21","()","<p>Clear any caching the database adapter may be doing, for example clearing\nthe prepared statement cache. …\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_cache-21","()","<p>Clears out internal caches:\n\n<pre>* columns\n* columns_hash\n* tables</pre>\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-clear_query_cache","()","<p>Clears the query cache.\n<p>One reason you may wish to call this method explicitly is between queries\nthat …\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes.\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes.\n"],["clear_respond_to","ActionController::MimeResponds::ClassMethods","ActionController/MimeResponds/ClassMethods.html#method-i-clear_respond_to","()","<p>Clear all mime types in <code>respond_to</code>.\n"],["clear_stale_cached_connections!","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_stale_cached_connections-21","()","<p>Return any checked-out connections back to the pool by threads that are no\nlonger alive.\n"],["clear_table_cache!","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_table_cache-21","(table_name)","<p>Clear out internal caches for table with <code>table_name</code>.\n"],["clear_transaction_record_state","ActiveRecord::Transactions","ActiveRecord/Transactions.html#method-i-clear_transaction_record_state","()","<p>Clear the new record state and id of a record.\n"],["client_encoding","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-client_encoding","()","<p>Get the client encoding for this database\n"],["client_min_messages","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-client_min_messages","()","<p>Returns the current client message level.\n"],["client_min_messages=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-client_min_messages-3D","(level)","<p>Set the client message level.\n"],["clone","ActiveResource::Base","ActiveResource/Base.html#method-i-clone","()","<p>Returns a clone of the resource that hasn’t been assigned an\n<code>id</code> yet and is treated as a new resource. …\n"],["clone_attribute_value","ActiveRecord::Base","ActiveRecord/Base.html#method-i-clone_attribute_value","(reader_method, attribute_name)",""],["clone_attributes","ActiveRecord::Base","ActiveRecord/Base.html#method-i-clone_attributes","(reader_method = :read_attribute, attributes = {})",""],["close","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-i-close","()",""],["close","ActiveSupport::Gzip::Stream","ActiveSupport/Gzip/Stream.html#method-i-close","()",""],["collation","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-collation","()","<p>Returns the database collation strategy.\n"],["collation","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-collation","()","<p>Returns the database collation strategy.\n"],["collection_name","ActiveResource::Base","ActiveResource/Base.html#method-c-collection_name","()",""],["collection_path","ActiveResource::Base","ActiveResource/Base.html#method-c-collection_path","(prefix_options = {}, query_options = nil)","<p>Gets the collection path for the REST resources.  If the\n<code>query_options</code> parameter is omitted, Rails will …\n"],["collection_path","ActiveResource::Base","ActiveResource/Base.html#method-i-collection_path","(options = nil)",""],["collection_select","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-collection_select","(method, collection, value_method, text_method, options = {}, html_options = {})",""],["collection_select","ActionView::Helpers::FormOptionsHelper","ActionView/Helpers/FormOptionsHelper.html#method-i-collection_select","(object, method, collection, value_method, text_method, options = {}, html_options = {})","<p>Returns <code>&lt;select&gt;</code> and <code>&lt;option&gt;</code> tags\nfor the collection of existing return values of <code>method</code> …\n"],["color","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-i-color","(text, color, bold=false)","<p>Set color by using a string or one of the defined constants. If a third\noption is set to true, it also …\n"],["column","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-column","(column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["column","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column","(name, type, options = {})","<p>Instantiates a new column for the table. The <code>type</code> parameter is\nnormally one of the migrations native …\n"],["column_defaults","ActiveRecord::Base","ActiveRecord/Base.html#method-c-column_defaults","()","<p>Returns a hash where the keys are column names and the values are default\nvalues when instantiating the …\n"],["column_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-column_exists-3F","(table_name, column_name, type = nil, options = {})","<p>Checks to see if a column exists in a given table.\n<p>Examples\n\n<pre># Check a column exists\ncolumn_exists?(:suppliers, ...</pre>\n"],["column_exists?","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-column_exists-3F","(column_name, type = nil, options = {})","<p>Checks to see if a column exists. See SchemaStatements#column_exists?\n"],["column_for_attribute","ActiveRecord::Base","ActiveRecord/Base.html#method-i-column_for_attribute","(name)","<p>Returns the column object for the named attribute.\n"],["column_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-column_name_length","()","<p>Returns the maximum length of a column name.\n"],["column_names","ActiveRecord::Base","ActiveRecord/Base.html#method-c-column_names","()","<p>Returns an array of column names as strings.\n"],["columns","ActiveRecord::Base","ActiveRecord/Base.html#method-c-columns","()","<p>Returns an array of column objects for the table associated with this\nclass.\n"],["columns","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-columns","(table_name, name = nil)","<p>Returns an array of <code>Mysql2Column</code> objects for the table\nspecified by <code>table_name</code>.\n"],["columns","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-columns","(table_name, name = nil)","<p>Returns the list of all column definitions for a table.\n"],["columns","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-columns","(table_name, name = nil)","<p>Returns an array of Column objects for the table specified by\n<code>table_name</code>. See the concrete implementation …\n"],["columns_for_remove","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-columns_for_remove","(table_name, *column_names)",""],["columns_hash","ActiveRecord::Base","ActiveRecord/Base.html#method-c-columns_hash","()","<p>Returns a hash of column objects for the table associated with this class.\n"],["columns_per_multicolumn_index","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_multicolumn_index","()","<p>Returns the maximum number of columns in a multicolumn index.\n"],["columns_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_table","()","<p>Returns the maximum number of columns per table.\n"],["commit_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-commit_db_transaction","()","<p>Commits the transaction (and turns on auto-committing).\n"],["commit_db_transaction","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-commit_db_transaction","()",""],["commit_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-commit_db_transaction","()","<p>Commits a transaction.\n"],["commit_transaction_records","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-commit_transaction_records","()","<p>Send a commit message to all records after they have been committed.\n"],["comparable_time","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-comparable_time","()",""],["compare_with_coercion","Time","Time.html#method-i-compare_with_coercion","(other)","<p>Layers additional behavior on Time#&lt;=&gt; so that DateTime and\nActiveSupport::TimeWithZone instances …\n"],["compare_without_coercion","Time","Time.html#method-i-compare_without_coercion","(other)",""],["compile","ActionView::Template::Handlers::Compilable","ActionView/Template/Handlers/Compilable.html#method-i-compile","(template)",""],["compile_methods!","ActiveSupport::Configurable::Configuration","ActiveSupport/Configurable/Configuration.html#method-c-compile_methods-21","(keys)","<p>compiles reader methods so we don’t have to go through method_missing\n"],["compile_methods!","ActiveSupport::Configurable::Configuration","ActiveSupport/Configurable/Configuration.html#method-i-compile_methods-21","()",""],["compose","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-compose","()","<p>Performs composition on all the characters.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'é'</span>.<span class=\"ruby-identifier\">length</span>                       <span class=\"ruby-comment\"># =&gt; 3</span>\n<span class=\"ruby-string\">'é'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">compose</span>.<span class=\"ruby-identifier\">to_s</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["compose_codepoints","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-compose_codepoints","(codepoints)","<p>Compose decomposed characters to the composed form.\n"],["composed_of","ActiveRecord::Aggregations::ClassMethods","ActiveRecord/Aggregations/ClassMethods.html#method-i-composed_of","(part_id, options = {})","<p>Adds reader and writer methods for manipulating a value object:\n<code>composed_of :address</code> adds <code>address</code> and …\n"],["compress","ActiveSupport::Gzip","ActiveSupport/Gzip.html#method-c-compress","(source)","<p>Compresses a string using gzip.\n"],["compressed?","ActiveSupport::Cache::Entry","ActiveSupport/Cache/Entry.html#method-i-compressed-3F","()",""],["compute_type","ActiveRecord::Base","ActiveRecord/Base.html#method-c-compute_type","(type_name)","<p>Returns the class type of the record using the current module as a prefix.\nSo descendants of MyApp::Business::Account …\n"],["concat","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-concat","(string)","<p>The preferred method of outputting text in your views is to use the &lt;%=\n“text” %&gt; eRuby …\n"],["concat","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-concat","(value)",""],["config","ActionView::TestCase::Behavior","ActionView/TestCase/Behavior.html#method-i-config","()",""],["config","ActiveSupport::Configurable","ActiveSupport/Configurable.html#method-i-config","()","<p>Reads and writes attributes from a configuration <code>OrderedHash</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'active_support/configurable'</span>\n\n<span class=\"ruby-keyword\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["config","ActiveSupport::Configurable::ClassMethods","ActiveSupport/Configurable/ClassMethods.html#method-i-config","()",""],["config_accessor","ActiveSupport::Configurable::ClassMethods","ActiveSupport/Configurable/ClassMethods.html#method-i-config_accessor","(*names)","<p>Allows you to add shortcut so that you don’t have to refer to attribute\nthrough config. Also look at …\n"],["configuration","Rails","Rails.html#method-c-configuration","()","<p>The Configuration instance used to configure the Rails environment\n"],["configurations","ActiveRecord::Base","ActiveRecord/Base.html#method-c-configurations","","<p>Contains the database configuration - as is typically stored in\nconfig/database.yml - as a Hash.\n<p>For example, …\n"],["configure","ActiveSupport::Configurable::ClassMethods","ActiveSupport/Configurable/ClassMethods.html#method-i-configure","()",""],["connected?","ActiveRecord::Base","ActiveRecord/Base.html#method-c-connected-3F","()","<p>Returns true if Active Record is connected.\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connected-3F","(klass)","<p>Returns true if a connection that’s accessible to this class has already\nbeen opened.\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connected-3F","()","<p>Returns true if a connection has already been opened.\n"],["connection","ActiveRecord::Base","ActiveRecord/Base.html#method-i-connection","()","<p>Returns the connection currently associated with the class. This can also\nbe used to “borrow” …\n"],["connection","ActiveRecord::Base","ActiveRecord/Base.html#method-c-connection","()","<p>Returns the connection currently associated with the class. This can also\nbe used to “borrow” …\n"],["connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connection","()","<p>Retrieve the connection associated with the current thread, or call\n#checkout to obtain one if necessary. …\n"],["connection","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-connection","()",""],["connection","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-c-connection","()",""],["connection","ActiveResource::Base","ActiveResource/Base.html#method-i-connection","(refresh = false)",""],["connection","ActiveResource::Base","ActiveResource/Base.html#method-c-connection","(refresh = false)","<p>An instance of ActiveResource::Connection that is the base connection to\nthe remote service. The <code>refresh</code> …\n"],["connection_config","ActiveRecord::Base","ActiveRecord/Base.html#method-c-connection_config","()","<p>Returns the configuration of the associated connection as a hash:\n\n<pre>ActiveRecord::Base.connection_config ...</pre>\n"],["connection_handler","ActiveRecord::Base","ActiveRecord/Base.html#method-c-connection_handler","","<p>The connection handler\n"],["connection_pool","ActiveRecord::Base","ActiveRecord/Base.html#method-c-connection_pool","()",""],["connection_pool","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-c-connection_pool","()",""],["constantize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-constantize","(camel_cased_word)","<p>Tries to find a constant with the name specified in the argument string:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;Module&quot;</span>.<span class=\"ruby-identifier\">constantize</span>     <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["constantize","String","String.html#method-i-constantize","()","<p><code>constantize</code> tries to find a declared constant with the name\nspecified in the string. It raises a NameError ...\n"],["construct_join_dependency_for_association_find","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-construct_join_dependency_for_association_find","()",""],["construct_limited_ids_condition","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-construct_limited_ids_condition","(relation)",""],["construct_relation_for_association_calculations","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-construct_relation_for_association_calculations","()",""],["construct_relation_for_association_find","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-construct_relation_for_association_find","(join_dependency)",""],["consumes?","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-c-consumes-3F","(string)","<p>Returns <code>true</code> when the proxy class can handle the string.\nReturns <code>false</code> otherwise.\n"],["contains_bad_protocols?","HTML::WhiteListSanitizer","HTML/WhiteListSanitizer.html#method-i-contains_bad_protocols-3F","(attr_name, value)",""],["content_columns","ActiveRecord::Base","ActiveRecord/Base.html#method-c-content_columns","()","<p>Returns an array of column objects where the primary id, all columns ending\nin “_id” or “_count”, …\n"],["content_for","ActionView::Helpers::CaptureHelper","ActionView/Helpers/CaptureHelper.html#method-i-content_for","(name, content = nil, &block)","<p>Calling content_for stores a block of markup in an identifier for later\nuse. You can make subsequent …\n"],["content_for?","ActionView::Helpers::CaptureHelper","ActionView/Helpers/CaptureHelper.html#method-i-content_for-3F","(name)","<p>content_for? simply checks whether any content has been captured yet using\ncontent_for Useful to render …\n"],["content_tag","ActionView::Helpers::TagHelper","ActionView/Helpers/TagHelper.html#method-i-content_tag","(name, content_or_options_with_block = nil, options = nil, escape = true, &block)","<p>Returns an HTML block tag of type <code>name</code> surrounding the\n<code>content</code>. Add HTML attributes by passing an attributes …\n"],["content_tag_for","ActionView::Helpers::RecordTagHelper","ActionView/Helpers/RecordTagHelper.html#method-i-content_tag_for","(tag_name, record, prefix = nil, options = nil, &block)","<p>content_tag_for creates an HTML element with id and class parameters that\nrelate to the specified Active …\n"],["content_type","ActionController::Metal","ActionController/Metal.html#method-i-content_type","()",""],["content_type=","ActionController::Metal","ActionController/Metal.html#method-i-content_type-3D","(type)","<p>Basic implementations for content_type=, location=, and headers are\nprovided to reduce the dependency …\n"],["controller_class","ActionController::TestCase::Behavior::ClassMethods","ActionController/TestCase/Behavior/ClassMethods.html#method-i-controller_class","()",""],["controller_class=","ActionController::TestCase::Behavior::ClassMethods","ActionController/TestCase/Behavior/ClassMethods.html#method-i-controller_class-3D","(new_class)",""],["controller_name","ActionController::Metal","ActionController/Metal.html#method-c-controller_name","()","<p>Returns the last part of the controller’s name, underscored, without the\nending <code>Controller</code>. For instance, …\n"],["controller_name","ActionController::Metal","ActionController/Metal.html#method-i-controller_name","()","<p>Delegates to the class’ <code>controller_name</code>\n"],["controller_path","ActionMailer::Base","ActionMailer/Base.html#method-c-controller_path","()",""],["controller_path=","ActionView::TestCase::TestController","ActionView/TestCase/TestController.html#method-i-controller_path-3D","(path)",""],["convert_key","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_key","(key)",""],["convert_key","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_key","(key)",""],["convert_to_model","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-convert_to_model","(object)","<p>Converts the given object to an ActiveModel compliant one.\n"],["convert_value","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_value","(value)",""],["convert_value","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_value","(value)",""],["copy","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-copy","(destination, sources, options = {})",""],["count","ActiveModel::Errors","ActiveModel/Errors.html#method-i-count","()","<p>Returns the number of error messages.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">add</span>(:<span class=\"ruby-identifier\">name</span>, <span class=\"ruby-string\">&quot;can't be blank&quot;</span>)\n<span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">count</span> <span class=\"ruby-comment\"># =&gt; 1</span>\n<span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">add</span>(:<span class=\"ruby-identifier\">name</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["count","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-count","(column_name = nil, options = {})","<p>Count operates using three different approaches.\n<p>Count all: By not passing any parameters to count, it …\n"],["count_by_sql","ActiveRecord::Base","ActiveRecord/Base.html#method-c-count_by_sql","(sql)","<p>Returns the result of an SQL statement that should only include a COUNT(*)\nin the SELECT part. The use …\n"],["count_observers","ActiveModel::Observing::ClassMethods","ActiveModel/Observing/ClassMethods.html#method-i-count_observers","()","<p>Total number of observers.\n"],["create","ActiveRecord::Base","ActiveRecord/Base.html#method-c-create","(attributes = nil, options = {}, &block)","<p>Creates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["create","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-create","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)",""],["create","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-create","(*args, &block)",""],["create","ActiveResource::Base","ActiveResource/Base.html#method-i-create","()","<p>Create (i.e., save to the remote service) the new resource.\n"],["create","ActiveResource::Base","ActiveResource/Base.html#method-c-create","(attributes = {})","<p>Creates a new resource instance and makes a request to the remote service\nthat it be saved, making it …\n"],["create","ActiveSupport::Cache::Entry","ActiveSupport/Cache/Entry.html#method-c-create","(raw_value, created_at, options = {})","<p>Create an entry with internal attributes set. This method is intended to be\nused by implementations that …\n"],["create","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-create","(name, utc_offset = nil, tzinfo = nil)",""],["create!","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-create-21","(*args, &block)",""],["create!","ActiveRecord::Validations::ClassMethods","ActiveRecord/Validations/ClassMethods.html#method-i-create-21","(attributes = nil, options = {}, &block)","<p>Creates an object just like Base.create but calls <code>save!</code>\ninstead of <code>save</code> so an exception is raised if …\n"],["create_database","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-create_database","(name, options = {})","<p>Create a new MySQL database with optional <code>:charset</code> and\n<code>:collation</code>. Charset defaults to utf8.\n<p>Example: …\n"],["create_database","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-create_database","(name, options = {})","<p>Create a new MySQL database with optional <code>:charset</code> and\n<code>:collation</code>. Charset defaults to utf8.\n<p>Example: …\n"],["create_database","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-create_database","(name, options = {})","<p>Create a new PostgreSQL database.  Options include <code>:owner</code>,\n<code>:template</code>, <code>:encoding</code>, <code>:tablespace</code>,\nand <code>:connection_limit</code> …\n"],["create_fixtures","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-create_fixtures","(fixtures_directory, table_names, class_names = {})",""],["create_path_and_open_file","ActiveSupport::Testing::Performance::Profiler","ActiveSupport/Testing/Performance/Profiler.html#method-i-create_path_and_open_file","(printer_name)",""],["create_reflection","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-create_reflection","(macro, name, options, active_record)",""],["create_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-create_savepoint","()",""],["create_table","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-create_table","(table_name, options = {})",""],["create_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table","(table_name, options = {})","<p>Creates a new table with the name <code>table_name</code>.\n<code>table_name</code> may either be a String or a Symbol.\n<p>There are …\n"],["create_with","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-create_with","(value)",""],["creator?","ActiveRecord::DynamicFinderMatch","ActiveRecord/DynamicFinderMatch.html#method-i-creator-3F","()",""],["csrf_meta_tag","ActionView::Helpers::CsrfHelper","ActionView/Helpers/CsrfHelper.html#method-i-csrf_meta_tag","()","<p>For backwards compatibility.\n"],["csrf_meta_tags","ActionView::Helpers::CsrfHelper","ActionView/Helpers/CsrfHelper.html#method-i-csrf_meta_tags","()","<p>Returns meta tags “csrf-param” and “csrf-token” with the name of the\ncross-site request …\n"],["current","Date","Date.html#method-c-current","()","<p>Returns Time.zone.today when <code>Time.zone</code> or\n<code>config.time_zone</code> are set, otherwise just returns Date.today …\n"],["current","DateTime","DateTime.html#method-c-current","()","<p>Returns <code>Time.zone.now.to_datetime</code> when <code>Time.zone</code>\nor <code>config.time_zone</code> are set, otherwise returns\n<code>Time.now</code> …\n"],["current","Time","Time.html#method-c-current","()","<p>Returns <code>Time.zone.now</code> when <code>Time.zone</code> or\n<code>config.time_zone</code> are set, otherwise just returns\n<code>Time.now</code>.\n"],["current_cycle","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-current_cycle","(name = \"default\")","<p>Returns the current cycle string after a cycle has been started. Useful for\ncomplex table highlighting …\n"],["current_database","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-current_database","()",""],["current_database","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-current_database","()",""],["current_database","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-current_database","()","<p>Returns the current database name.\n"],["current_hash","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-current_hash","()",""],["current_hash","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-current_hash","()",""],["current_page?","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-current_page-3F","(options)","<p>True if the current request URI was generated by the given\n<code>options</code>.\n<p>Examples\n<p>Let’s say we’re in the <code>/shop/checkout</code> …\n"],["current_savepoint_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-current_savepoint_name","()",""],["custom_dir","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-i-custom_dir","()",""],["custom_dir","ActionView::Helpers::AssetTagHelper::JavascriptIncludeTag","ActionView/Helpers/AssetTagHelper/JavascriptIncludeTag.html#method-i-custom_dir","()",""],["custom_dir","ActionView::Helpers::AssetTagHelper::StylesheetIncludeTag","ActionView/Helpers/AssetTagHelper/StylesheetIncludeTag.html#method-i-custom_dir","()",""],["custom_method_collection_url","ActiveResource::CustomMethods::ClassMethods","ActiveResource/CustomMethods/ClassMethods.html#method-i-custom_method_collection_url","(method_name, options = {})",""],["cycle","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-cycle","(first_value, *values)","<p>Creates a Cycle object whose <em>to_s</em> method cycles through elements\nof an array every time it is called. …\n"],["daemon","Process","Process.html#method-c-daemon","(nochdir = nil, noclose = nil)",""],["dasherize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-dasherize","(underscored_word)","<p>Replaces underscores with dashes in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;puni_puni&quot;</span> <span class=\"ruby-comment\"># =&gt; &quot;puni-puni&quot;</span>\n</pre>\n"],["dasherize","String","String.html#method-i-dasherize","()","<p>Replaces underscores with dashes in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;puni_puni&quot;</span> <span class=\"ruby-comment\"># =&gt; &quot;puni-puni&quot;</span>\n</pre>\n"],["data","ActiveRecord::SessionStore::Session","ActiveRecord/SessionStore/Session.html#method-i-data","()","<p>Lazy-unmarshal session state.\n"],["data","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-i-data","()","<p>Lazy-unmarshal session state.\n"],["data_column","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-c-data_column","","<p>The data field defaults to ‘data’.\n"],["data_column_name","ActiveRecord::SessionStore::Session","ActiveRecord/SessionStore/Session.html#method-c-data_column_name","","<p>Customizable data column name.  Defaults to ‘data’.\n"],["data_column_name","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-c-data_column_name","",""],["data_column_size_limit","ActiveRecord::SessionStore::Session","ActiveRecord/SessionStore/Session.html#method-c-data_column_size_limit","()",""],["date_select","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-date_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for year, month, and day) pre-selected\nfor accessing a specified date-based …\n"],["date_select","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-date_select","(method, options = {}, html_options = {})",""],["datetime_select","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-datetime_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for year, month, day, hour, and minute)\npre-selected for accessing …\n"],["datetime_select","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-datetime_select","(method, options = {}, html_options = {})",""],["day","Numeric","Numeric.html#method-i-day","()",""],["days","Numeric","Numeric.html#method-i-days","()",""],["days_in_month","Time","Time.html#method-c-days_in_month","(month, year = now.year)","<p>Return the number of days in the given month. If no year is specified, it\nwill use the current year. …\n"],["debug","ActionView::Helpers::DebugHelper","ActionView/Helpers/DebugHelper.html#method-i-debug","(object)","<p>Returns a YAML representation of <code>object</code> wrapped with\n&lt;pre&gt; and &lt;/pre&gt;. If the object cannot …\n"],["debug_protected_attribute_removal","ActiveModel::MassAssignmentSecurity::Sanitizer","ActiveModel/MassAssignmentSecurity/Sanitizer.html#method-i-debug_protected_attribute_removal","(attributes, sanitized_attributes)",""],["debugger","Kernel","Kernel.html#method-i-debugger","()","<p>Starts a debugging session if ruby-debug has been loaded (call rails server\n–debugger to do load it). …\n"],["decode","ActiveResource::Formats::JsonFormat","ActiveResource/Formats/JsonFormat.html#method-i-decode","(json)",""],["decode","ActiveResource::Formats::XmlFormat","ActiveResource/Formats/XmlFormat.html#method-i-decode","(xml)",""],["decode","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-decode","(json, options ={})",""],["decode64","ActiveSupport::Base64","ActiveSupport/Base64.html#method-c-decode64","(data)","<p>Decodes a base 64 encoded string to its original representation.\n\n<pre>ActiveSupport::Base64.decode64(&quot;T3JpZ2luYWwgdW5lbmNvZGVkIHN0cmluZw==&quot;) ...</pre>\n"],["decode_credentials","ActionController::HttpAuthentication::Basic","ActionController/HttpAuthentication/Basic.html#method-i-decode_credentials","(request)",""],["decode_credentials","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-decode_credentials","(header)",""],["decode_credentials_header","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-decode_credentials_header","(request)",""],["decompose","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-decompose","()","<p>Performs canonical decomposition on all the characters.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'é'</span>.<span class=\"ruby-identifier\">length</span>                         <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["decompose_codepoints","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-decompose_codepoints","(type, codepoints)","<p>Decompose composed characters to the decomposed form.\n"],["decompress","ActiveSupport::Gzip","ActiveSupport/Gzip.html#method-c-decompress","(source)","<p>Decompresses a gzipped string.\n"],["decrement","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-decrement","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and\nsubtracts the value passed as <code>by</code> (default is 1). The decrement\n…\n"],["decrement","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-decrement","(name, amount = 1, options = nil)",""],["decrement","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Decrement an integer value in the cache.\n"],["decrement","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Increment an integer value in the cache.\n<p>Options are passed to the underlying cache implementation.\n<p>All …\n"],["decrement!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-decrement-21","(attribute, by = 1)","<p>Wrapper around <code>decrement</code> that saves the record. This method\ndiffers from its non-bang version in that …\n"],["decrement_counter","ActiveRecord::CounterCache","ActiveRecord/CounterCache.html#method-i-decrement_counter","(counter_name, id)","<p>Decrement a number field by one, usually representing a count.\n<p>This works the same as increment_counter …\n"],["decrement_open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-decrement_open_transactions","()",""],["decrypt","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-decrypt","(encrypted_message)",""],["decrypt_and_verify","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-decrypt_and_verify","(value)",""],["deep_dup","Hash","Hash.html#method-i-deep_dup","()","<p>Returns a deep copy of hash.\n"],["deep_merge","Hash","Hash.html#method-i-deep_merge","(other_hash)","<p>Returns a new hash with <code>self</code> and <code>other_hash</code>\nmerged recursively.\n"],["deep_merge!","Hash","Hash.html#method-i-deep_merge-21","(other_hash)","<p>Returns a new hash with <code>self</code> and <code>other_hash</code>\nmerged recursively. Modifies the receiver in place.\n"],["default","ActionMailer::Base","ActionMailer/Base.html#method-c-default","(value = nil)",""],["default","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-default","(key = nil)",""],["default","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-default","(key = nil)",""],["default_action","ActionController::Responder","ActionController/Responder.html#method-i-default_action","()","<p>By default, render the <code>:edit</code> action for HTML requests with\nfailure, unless the verb is POST.\n"],["default_inspect","Date","Date.html#method-i-default_inspect","()",""],["default_inspect","DateTime","DateTime.html#method-i-default_inspect","()",""],["default_primary_key_type","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-default_primary_key_type","()",""],["default_render","ActionController::ImplicitRender","ActionController/ImplicitRender.html#method-i-default_render","(*args)",""],["default_render","ActionController::Responder","ActionController/Responder.html#method-i-default_render","()","<p>If a given response block was given, use it, otherwise call render on\ncontroller.\n"],["default_scope","ActiveRecord::Base","ActiveRecord/Base.html#method-c-default_scope","(scope = {})","<p>Use this macro in your model to set a default scope for all operations on\nthe model.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Article</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["default_sequence_name","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-default_sequence_name","(table, column)",""],["default_timezone","ActiveRecord::Base","ActiveRecord/Base.html#method-c-default_timezone","","<p>Determines whether to use Time.local (using :local) or Time.utc (using\n:utc) when pulling dates and times …\n"],["define","ActiveRecord::Schema","ActiveRecord/Schema.html#method-c-define","(info={}, &block)","<p>Eval the given block. All methods available to the current connection\nadapter are available within the …\n"],["define_attr_method","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attr_method","(name, value=nil, &block)","<p>Defines an “attribute” method (like <code>inheritance_column</code> or\n<code>table_name</code>). A new (class) method …\n"],["define_attribute_method","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_method","(attr_name)",""],["define_attribute_methods","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_methods","(attr_names)","<p>Declares the attributes that should be prefixed and suffixed by\nActiveModel::AttributeMethods.\n<p>To use, …\n"],["define_attribute_methods","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-define_attribute_methods","()","<p>Generates all the attribute related methods for columns in the database\naccessors, mutators and query …\n"],["define_callbacks","ActiveRecord::Observer","ActiveRecord/Observer.html#method-i-define_callbacks","(klass)",""],["define_callbacks","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-define_callbacks","(*callbacks)","<p>Define sets of events in the object lifecycle that support callbacks.\n\n<pre>define_callbacks :validate\ndefine_callbacks ...</pre>\n"],["define_method_attribute","ActiveRecord::AttributeMethods::Read::ClassMethods","ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-define_method_attribute","(attr_name)",""],["define_method_attribute","ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html#method-i-define_method_attribute","(attr_name)","<p>Defined for all <code>datetime</code> and <code>timestamp</code> attributes\nwhen <code>time_zone_aware_attributes</code> are enabled. This enhanced …\n"],["define_method_attribute=","ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html#method-i-define_method_attribute-3D","(attr_name)","<p>Defined for all <code>datetime</code> and <code>timestamp</code> attributes\nwhen <code>time_zone_aware_attributes</code> are enabled. This enhanced …\n"],["define_method_attribute=","ActiveRecord::AttributeMethods::Write::ClassMethods","ActiveRecord/AttributeMethods/Write/ClassMethods.html#method-i-define_method_attribute-3D","(attr_name)",""],["define_model_callbacks","ActiveModel::Callbacks","ActiveModel/Callbacks.html#method-i-define_model_callbacks","(*callbacks)","<p>define_model_callbacks accepts the same options define_callbacks does, in\ncase you want to overwrite …\n"],["defined_activerecord_methods","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-defined_activerecord_methods","()",""],["delegate","Module","Module.html#method-i-delegate","(*methods)","<p>Provides a delegate class method to easily expose contained objects’\nmethods as your own. Pass one or …\n"],["delete","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-delete","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating DELETE HTTP method and set/volley the\nresponse\n"],["delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete","(arel, name = nil, binds = [])","<p>Executes the delete statement and returns the number of rows affected.\n"],["delete","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-delete","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["delete","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-delete","(id_or_array)","<p>Deletes the row with a primary key matching the <code>id</code> argument,\nusing a SQL <code>DELETE</code> statement, and returns …\n"],["delete","ActiveResource::Base","ActiveResource/Base.html#method-c-delete","(id, options = {})","<p>Deletes the resources with the ID in the <code>id</code> parameter.\n<p>Options\n<p>All options specify prefix and query parameters. …\n"],["delete","ActiveResource::Connection","ActiveResource/Connection.html#method-i-delete","(path, headers = {})","<p>Executes a DELETE request (see HTTP protocol documentation if unfamiliar).\nUsed to delete resources. …\n"],["delete","ActiveResource::CustomMethods","ActiveResource/CustomMethods.html#method-c-delete","(custom_method_name, options = {})",""],["delete","ActiveResource::CustomMethods::InstanceMethods","ActiveResource/CustomMethods/InstanceMethods.html#method-i-delete","(method_name, options = {})",""],["delete","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-delete","(name, options = nil)","<p>Deletes an entry in the cache. Returns <code>true</code> if an entry is\ndeleted.\n<p>Options are passed to the underlying …\n"],["delete","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-delete","(key)","<p>Removes a specified key from the hash.\n"],["delete","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-delete","(key)","<p>Removes a specified key from the hash.\n"],["delete_all","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-delete_all","(conditions = nil)","<p>Deletes the records matching <code>conditions</code> without instantiating\nthe records first, and hence not calling …\n"],["delete_entry","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-delete_entry","(key, options)",""],["delete_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-delete_entry","(key, options)",""],["delete_matched","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-delete_matched","(matcher, options = nil)","<p>Delete all entries with keys matching the pattern.\n<p>Options are passed to the underlying cache implementation. …\n"],["delete_responses_to_replace","ActiveResource::HttpMock","ActiveResource/HttpMock.html#method-c-delete_responses_to_replace","(new_responses)",""],["delete_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete_sql","(sql, name = nil)","<p>Executes the delete statement and returns the number of rows affected.\n"],["demodulize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-demodulize","(class_name_in_module)","<p>Removes the module part from the expression in the string.\n<p>Examples:\n\n<pre>&quot;ActiveRecord::CoreExtensions::String::Inflections&quot;.demodulize ...</pre>\n"],["demodulize","String","String.html#method-i-demodulize","()","<p>Removes the module part from the constant expression in the string.\n\n<pre>&quot;ActiveRecord::CoreExtensions::String::Inflections&quot;.demodulize ...</pre>\n"],["deny?","ActiveModel::MassAssignmentSecurity::BlackList","ActiveModel/MassAssignmentSecurity/BlackList.html#method-i-deny-3F","(key)",""],["deny?","ActiveModel::MassAssignmentSecurity::WhiteList","ActiveModel/MassAssignmentSecurity/WhiteList.html#method-i-deny-3F","(key)",""],["deprecate","Module","Module.html#method-i-deprecate","(*method_names)","<p>Declare that a method has been deprecated.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">deprecate</span> :<span class=\"ruby-identifier\">foo</span>\n<span class=\"ruby-identifier\">deprecate</span> :<span class=\"ruby-identifier\">bar</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'message'</span>\n<span class=\"ruby-identifier\">deprecate</span> :<span class=\"ruby-identifier\">foo</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deprecate_methods","ActiveSupport::Deprecation","ActiveSupport/Deprecation.html#method-c-deprecate_methods","(target_module, *method_names)","<p>Declare that a method has been deprecated.\n"],["deprecated_method_warning","ActiveSupport::Deprecation","ActiveSupport/Deprecation.html#method-c-deprecated_method_warning","(method_name, message = nil)",""],["descendants","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-i-descendants","()",""],["descendants","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-c-descendants","(klass)",""],["descends_from_active_record?","ActiveRecord::Base","ActiveRecord/Base.html#method-c-descends_from_active_record-3F","()","<p>True if this isn’t a concrete subclass needing a STI type condition.\n"],["describe","ActiveSupport::Testing::Declarative","ActiveSupport/Testing/Declarative.html#method-c-describe","(text)",""],["destroy","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-destroy","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["destroy","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-destroy","(id)","<p>Destroy an object (or multiple objects) that has the given id, the object\nis instantiated first, therefore …\n"],["destroy","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-i-destroy","()",""],["destroy","ActiveResource::Base","ActiveResource/Base.html#method-i-destroy","()","<p>Deletes the resource from the remote service.\n<p>Examples\n\n<pre>my_id = 3\nmy_person = Person.find(my_id)\nmy_person.destroy ...</pre>\n"],["destroy_all","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-destroy_all","(conditions = nil)","<p>Destroys the records matching <code>conditions</code> by instantiating each\nrecord and calling its <code>destroy</code> method. …\n"],["destroyed?","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-destroyed-3F","()","<p>Returns true if this object has been destroyed, otherwise returns false.\n"],["determine_default_controller_class","ActionController::TestCase::Behavior::ClassMethods","ActionController/TestCase/Behavior/ClassMethods.html#method-i-determine_default_controller_class","(name)",""],["determine_default_helper_class","ActionView::TestCase::Behavior::ClassMethods","ActionView/TestCase/Behavior/ClassMethods.html#method-i-determine_default_helper_class","(name)",""],["diff","Hash","Hash.html#method-i-diff","(h2)","<p>Returns a hash that represents the difference between two hashes.\n<p>Examples:\n\n<pre class=\"ruby\">{<span class=\"ruby-value\">1</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>}.<span class=\"ruby-identifier\">diff</span>(<span class=\"ruby-value\">1</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>)      <span class=\"ruby-operator\">...</span>\n</pre>\n"],["direct_descendants","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-c-direct_descendants","(klass)",""],["direct_descendants","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-i-direct_descendants","()",""],["dirname","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-dirname","()","<p>Returns the directory in which the data files are stored\n"],["dirties_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-dirties_query_cache","(base, *method_names)",""],["dirty?","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-dirty-3F","()",""],["disable","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-disable","(*observers, &block)","<p>Disables one or more observers.  This supports multiple forms:\n\n<pre>ORM.observers.disable :user_observer\n  ...</pre>\n"],["disable_cache","ActionView::LookupContext::Details","ActionView/LookupContext/Details.html#method-i-disable_cache","()","<p>Temporary skip passing the details_key forward.\n"],["disable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-disable_query_cache-21","()",""],["disable_referential_integrity","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disable_referential_integrity","()","<p>Override to turn off referential integrity while executing\n<code>&amp;block</code>.\n"],["disabled_for?","ActiveModel::Observer","ActiveModel/Observer.html#method-i-disabled_for-3F","(object)",""],["disabled_for?","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-disabled_for-3F","(observer)","<p>Returns true if the given observer is disabled for the model class.\n"],["disabled_observer_stack","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-disabled_observer_stack","()",""],["disabled_observers","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-disabled_observers","()",""],["disconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-disconnect-21","()","<p>Disconnects all connections in the pool, and clears the pool.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["dispatch","ActionController::RackDelegation","ActionController/RackDelegation.html#method-i-dispatch","(action, request, response = ActionDispatch::Response.new)",""],["display","ActionController::Responder","ActionController/Responder.html#method-i-display","(resource, given_options={})","<p>Display is just a shortcut to render a resource with the current format.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">display</span> <span class=\"ruby-ivar\">@user</span>, :<span class=\"ruby-identifier\">status</span> =<span class=\"ruby-operator\">&gt;</span> :<span class=\"ruby-identifier\">ok</span>\n</pre>\n"],["display_errors","ActionController::Responder","ActionController/Responder.html#method-i-display_errors","()",""],["distance_of_time_in_words","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-distance_of_time_in_words","(from_time, to_time = 0, include_seconds = false, options = {})","<p>Reports the approximate distance in time between two Time, Date or DateTime\nobjects or integers as seconds. …\n"],["distance_of_time_in_words_to_now","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-distance_of_time_in_words_to_now","(from_time, include_seconds = false)",""],["distinct","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-distinct","(columns, order_by)","<p>SELECT DISTINCT clause for a given set of columns and a given ORDER BY\nclause. Both PostgreSQL and Oracle …\n"],["div_for","ActionView::Helpers::RecordTagHelper","ActionView/Helpers/RecordTagHelper.html#method-i-div_for","(record, *args, &block)","<p>Produces a wrapper DIV element with id and class parameters that relate to\nthe specified Active Record …\n"],["dom_class","ActionController::RecordIdentifier","ActionController/RecordIdentifier.html#method-i-dom_class","(record_or_class, prefix = nil)","<p>The DOM class convention is to use the singular form of an object or class.\nExamples:\n\n<pre>dom_class(post) ...</pre>\n"],["dom_id","ActionController::RecordIdentifier","ActionController/RecordIdentifier.html#method-i-dom_id","(record, prefix = nil)","<p>The DOM id convention is to use the singular form of an object or class\nwith the id following an underscore. …\n"],["down","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-down","()",""],["downcase","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-downcase","()","<p>Convert characters in the string to lowercase.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'VĚDA A VÝZKUM'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">downcase</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &quot;věda ...</span>\n</pre>\n"],["drop_table","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-drop_table","(table_name, options = {})",""],["drop_table","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-drop_table","(table_name, options = {})",""],["drop_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_table","(table_name, options = {})","<p>Drops a table from the database.\n"],["dst?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-dst-3F","()",""],["dup","ActiveResource::Base","ActiveResource/Base.html#method-i-dup","()","<p>Duplicates the current resource without saving it.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">my_invoice</span> = <span class=\"ruby-constant\">Invoice</span>.<span class=\"ruby-identifier\">create</span>(:<span class=\"ruby-identifier\">customer</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'That ...\n</span></pre>\n"],["dup","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-dup","()","<p>Returns an exact copy of the hash.\n"],["dup","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-dup","()","<p>Returns an exact copy of the hash.\n"],["duplicable?","Class","Class.html#method-i-duplicable-3F","()","<p>Classes are not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">c</span> = <span class=\"ruby-constant\">Class</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-comment\"># =&gt; #&lt;Class:0x10328fd80&gt;</span>\n<span class=\"ruby-identifier\">c</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; #&lt;Class:0x10328fd80&gt;</span>\n</pre>\n"],["duplicable?","FalseClass","FalseClass.html#method-i-duplicable-3F","()","<p><code>false</code> is not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">false</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-keyword\">false</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can't dup FalseClass</span>\n</pre>\n"],["duplicable?","Module","Module.html#method-i-duplicable-3F","()","<p>Modules are not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-constant\">Module</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-comment\"># =&gt; #&lt;Module:0x10328b6e0&gt;</span>\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">dup</span>          <span class=\"ruby-comment\"># =&gt; #&lt;Module:0x10328b6e0&gt;</span>\n</pre>\n"],["duplicable?","NilClass","NilClass.html#method-i-duplicable-3F","()","<p><code>nil</code> is not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can't dup NilClass</span>\n</pre>\n"],["duplicable?","Numeric","Numeric.html#method-i-duplicable-3F","()","<p>Numbers are not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">3</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-value\">3</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can't dup Fixnum</span>\n</pre>\n"],["duplicable?","Object","Object.html#method-i-duplicable-3F","()","<p>Can you safely dup this object?\n<p>False for <code>nil</code>, <code>false</code>, <code>true</code>, symbols,\nnumbers, class and module objects; …\n"],["duplicable?","Symbol","Symbol.html#method-i-duplicable-3F","()","<p>Symbols are not duplicable:\n\n<pre class=\"ruby\">:<span class=\"ruby-identifier\">my_symbol</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n:<span class=\"ruby-identifier\">my_symbol</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can't ...</span>\n</pre>\n"],["duplicable?","TrueClass","TrueClass.html#method-i-duplicable-3F","()","<p><code>true</code> is not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">true</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-keyword\">true</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can't dup TrueClass</span>\n</pre>\n"],["each","ActiveModel::Errors","ActiveModel/Errors.html#method-i-each","()","<p>Iterates through each error key, value pair in the error messages hash.\nYields the attribute and the …\n"],["each","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-i-each","(&block)",""],["each","ActiveRecord::Result","ActiveRecord/Result.html#method-i-each","()",""],["each_subclass_array","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-each_subclass_array","()",""],["each_with_object","Enumerable","Enumerable.html#method-i-each_with_object","(memo, &block)","<p>Iterates over a collection, passing the current element\n<strong>and</strong> the <code>memo</code> to the block. Handy for building\n…\n"],["eager_autoload","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-eager_autoload","()",""],["eager_autoload!","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-c-eager_autoload-21","()",""],["eager_load","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-eager_load","(*args)",""],["eager_loading?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-eager_loading-3F","()",""],["element_name","ActiveResource::Base","ActiveResource/Base.html#method-c-element_name","()",""],["element_path","ActiveResource::Base","ActiveResource/Base.html#method-i-element_path","(options = nil)",""],["element_path","ActiveResource::Base","ActiveResource/Base.html#method-c-element_path","(id, prefix_options = {}, query_options = nil)","<p>Gets the element path for the given ID in <code>id</code>.  If the\n<code>query_options</code> parameter is omitted, Rails will …\n"],["email_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-email_field","(object_name, method, options = {})","<p>Returns a text_field of type “email”.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">email_field</span>(<span class=\"ruby-string\">&quot;user&quot;</span>, <span class=\"ruby-string\">&quot;address&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &lt;input id=&quot;user_address&quot; ...</span>\n</pre>\n"],["email_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-email_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “email”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["emitted_hidden_id?","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-emitted_hidden_id-3F","()",""],["empty?","ActiveModel::Errors","ActiveModel/Errors.html#method-i-empty-3F","()","<p>Returns true if no errors are found, false otherwise.\n"],["empty?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-empty-3F","()","<p>Returns true if there are no records.\n"],["empty?","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-empty-3F","()",""],["empty_insert_statement_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-empty_insert_statement_value","()",""],["empty_insert_statement_value","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-empty_insert_statement_value","()",""],["empty_json_resource","ActionController::Responder","ActionController/Responder.html#method-i-empty_json_resource","()","<p>Return a valid empty JSON resource\n"],["empty_resource","ActionController::Responder","ActionController/Responder.html#method-i-empty_resource","()","<p>Delegate to proper empty resource method\n"],["emulate_booleans","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-c-emulate_booleans","","<p>By default, the MysqlAdapter will consider all columns of type\n<code>tinyint(1)</code> as boolean. If you wish to …\n"],["enable","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-enable","(*observers, &block)","<p>Enables one or more observers.  This supports multiple forms:\n\n<pre>ORM.observers.enable :user_observer\n  # ...</pre>\n"],["enable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-enable_query_cache-21","()",""],["enable_warnings","Kernel","Kernel.html#method-i-enable_warnings","()","<p>Sets $VERBOSE to true for the duration of the block and back to its\noriginal value afterwards.\n"],["enabled","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-enabled","()",""],["enabled=","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-enabled-3D","(flag)",""],["enabled?","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-enabled-3F","()",""],["encode","ActiveResource::Base","ActiveResource/Base.html#method-i-encode","(options={})","<p>Returns the serialized string representation of the resource in the\nconfigured serialization format specified …\n"],["encode","ActiveResource::Formats::JsonFormat","ActiveResource/Formats/JsonFormat.html#method-i-encode","(hash, options = nil)",""],["encode","ActiveResource::Formats::XmlFormat","ActiveResource/Formats/XmlFormat.html#method-i-encode","(hash, options={})",""],["encode","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-encode","(value, options = nil)","<p>Dumps object in JSON (JavaScript Object Notation). See www.json.org for\nmore info.\n"],["encode","ActiveSupport::JSON::Encoding::Encoder","ActiveSupport/JSON/Encoding/Encoder.html#method-i-encode","(value, use_options = true)",""],["encode64","ActiveSupport::Base64","ActiveSupport/Base64.html#method-c-encode64","(data)","<p>Encodes a string to its base 64 representation. Each 60 characters of\noutput is separated by a newline …\n"],["encode64s","ActiveSupport::Base64","ActiveSupport/Base64.html#method-c-encode64s","(value)","<p>Encodes the value as base64 without the newline breaks. This makes the\nbase64 encoding readily usable …\n"],["encode_credentials","ActionController::HttpAuthentication::Basic","ActionController/HttpAuthentication/Basic.html#method-i-encode_credentials","(user_name, password)",""],["encode_credentials","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-encode_credentials","(http_method, credentials, password, password_is_ha1)",""],["encode_credentials","ActionController::HttpAuthentication::Token","ActionController/HttpAuthentication/Token.html#method-i-encode_credentials","(token, options = {})","<p>Encodes the given token and options into an Authorization header value.\n<p>token   - String token. options …\n"],["encode_json","ActiveSupport::JSON::Variable","ActiveSupport/JSON/Variable.html#method-i-encode_json","(encoder)",""],["encode_json","Hash","Hash.html#method-i-encode_json","(encoder)",""],["encode_json","Numeric","Numeric.html#method-i-encode_json","(encoder)",""],["encode_json","String","String.html#method-i-encode_json","(encoder)",""],["encode_with","ActiveRecord::Base","ActiveRecord/Base.html#method-i-encode_with","(coder)","<p>Populate <code>coder</code> with attributes about this record that should\nbe serialized. The structure of <code>coder</code> defined …\n"],["encode_with","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-encode_with","(coder)",""],["encode_with","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-encode_with","(coder)",""],["encode_with","BigDecimal","BigDecimal.html#method-i-encode_with","(coder)",""],["encoding","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-encoding","()","<p>Returns the current database encoding format.\n"],["encoding_aware?","String","String.html#method-i-encoding_aware-3F","()",""],["encrypt","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-encrypt","(value)",""],["encrypt_and_sign","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-encrypt_and_sign","(value)",""],["end_document","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_document","()",""],["end_element","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_element","(name)",""],["end_of_day","Date","Date.html#method-i-end_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the end of the day (23:59:59) …\n"],["end_of_day","DateTime","DateTime.html#method-i-end_of_day","()","<p>Returns a new DateTime representing the end of the day (23:59:59)\n"],["end_of_day","Time","Time.html#method-i-end_of_day","()","<p>Returns a new Time representing the end of the day, 23:59:59.999999\n(.999999999 in ruby1.9)\n"],["end_of_month","Date","Date.html#method-i-end_of_month","()","<p>Returns a new Date/DateTime representing the end of the month (last day of\nthe month; DateTime objects …\n"],["end_of_month","Time","Time.html#method-i-end_of_month","()","<p>Returns a new Time representing the end of the month (end of the last day\nof the month)\n"],["end_of_quarter","Date","Date.html#method-i-end_of_quarter","()","<p>Returns a new Date/DateTime representing the end of the quarter (last day\nof march, june, september, …\n"],["end_of_quarter","Time","Time.html#method-i-end_of_quarter","()","<p>Returns a new Time representing the end of the quarter (end of the last day\nof march, june, september, …\n"],["end_of_week","Date","Date.html#method-i-end_of_week","()","<p>Returns a new Date/DateTime representing the end of this week (Sunday,\nDateTime objects will have time …\n"],["end_of_week","Time","Time.html#method-i-end_of_week","()","<p>Returns a new Time representing the end of this week, (end of Sunday)\n"],["end_of_year","Date","Date.html#method-i-end_of_year","()","<p>Returns a new Time representing the end of the year (31st of december;\nDateTime objects will have time …\n"],["end_of_year","Time","Time.html#method-i-end_of_year","()","<p>Returns a new Time representing the end of the year (end of the 31st of\ndecember)\n"],["end_transaction","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-end_transaction","()",""],["engine","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-engine","()",""],["engine=","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-engine-3D","(name)",""],["entry","ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html#method-i-entry","(record, options = {})","<p>Creates an entry tag for a specific record and prefills the id using class\nand id.\n<p>Options:\n<p><code>:published</code> ...\n"],["env","ActionController::Metal","ActionController/Metal.html#method-i-env","()",""],["env","Rails","Rails.html#method-c-env","()",""],["env=","Rails","Rails.html#method-c-env-3D","(environment)",""],["environment","ActiveSupport::Testing::Performance::Benchmarker","ActiveSupport/Testing/Performance/Benchmarker.html#method-i-environment","()",""],["eql?","ActionView::FileSystemResolver","ActionView/FileSystemResolver.html#method-i-eql-3F","(resolver)",""],["eql?","ActiveRecord::Base","ActiveRecord/Base.html#method-i-eql-3F","(comparison_object)",""],["eql?","ActiveResource::Base","ActiveResource/Base.html#method-i-eql-3F","(other)","<p>Tests for equality (delegates to ==).\n"],["eql?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-eql-3F","(other)",""],["error","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-error","(error_message)",""],["error_message","ActionView::Helpers::ActiveModelInstanceTag","ActionView/Helpers/ActiveModelInstanceTag.html#method-i-error_message","()",""],["error_wrapping","ActionView::Helpers::ActiveModelInstanceTag","ActionView/Helpers/ActiveModelInstanceTag.html#method-i-error_wrapping","(html_tag)",""],["errors","ActiveModel::Validations","ActiveModel/Validations.html#method-i-errors","()","<p>Returns the <code>Errors</code> object that holds all information about\nattribute error messages.\n"],["errors","ActiveResource::Validations","ActiveResource/Validations.html#method-i-errors","()","<p>Returns the Errors object that holds all information about attribute error\nmessages.\n"],["escape","ActiveSupport::JSON::Encoding::Encoder","ActiveSupport/JSON/Encoding/Encoder.html#method-i-escape","(string)",""],["escape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-escape_bytea","(value)","<p>Escapes binary strings for bytea input to the database.\n"],["escape_javascript","ActionView::Helpers::JavaScriptHelper","ActionView/Helpers/JavaScriptHelper.html#method-i-escape_javascript","(javascript)","<p>Escape carrier returns and single and double quotes for JavaScript\nsegments. Also available through the …\n"],["escape_once","ActionView::Helpers::TagHelper","ActionView/Helpers/TagHelper.html#method-i-escape_once","(html)","<p>Returns an escaped version of <code>html</code> without affecting existing\nescaped entities.\n<p>Examples\n\n<pre>escape_once(&quot;1 ...</pre>\n"],["establish_connection","ActiveRecord::Base","ActiveRecord/Base.html#method-c-establish_connection","(spec = nil)","<p>Establishes the connection to the database. Accepts a hash as input where\nthe <code>:adapter</code> key must be specified …\n"],["establish_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-establish_connection","(name, spec)",""],["evaluate_default_scope","ActiveRecord::Base","ActiveRecord/Base.html#method-c-evaluate_default_scope","()","<p>The ignore_default_scope flag is used to prevent an infinite recursion\nsituation where a default scope …\n"],["exabyte","Numeric","Numeric.html#method-i-exabyte","()",""],["exabytes","Numeric","Numeric.html#method-i-exabytes","()",""],["except","ActiveRecord::SpawnMethods","ActiveRecord/SpawnMethods.html#method-i-except","(*skips)","<p>Removes from the query the condition(s) specified in <code>skips</code>.\n<p>Example:\n\n<pre>Post.order('id asc').except(:order) ...</pre>\n"],["except","Hash","Hash.html#method-i-except","(*keys)","<p>Return a hash that includes everything but the given keys. This is useful\nfor limiting a set of parameters …\n"],["except!","Hash","Hash.html#method-i-except-21","(*keys)","<p>Replaces the hash without the given keys.\n"],["excerpt","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-excerpt","(text, phrase, *args)","<p>Extracts an excerpt from <code>text</code> that matches the first instance\nof <code>phrase</code>. The <code>:radius</code> option expands the …\n"],["exclude?","Enumerable","Enumerable.html#method-i-exclude-3F","(object)","<p>The negative of the Enumerable#include?. Returns true if the collection\ndoes not include the object. …\n"],["exclude?","String","String.html#method-i-exclude-3F","(string)","<p>The inverse of <code>String#include?</code>. Returns true if the string\ndoes not include the other string.\n"],["exec_delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_delete","(sql, name, binds)","<p>Executes delete <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_delete","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_delete","(sql, name, binds)",""],["exec_delete","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_delete","(sql, name, binds)",""],["exec_delete","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-exec_delete","(sql, name = 'SQL', binds = [])",""],["exec_delete","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-exec_delete","(sql, name = 'SQL', binds = [])",""],["exec_insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_insert","(sql, name, binds)","<p>Executes insert <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_insert","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_insert","(sql, name, binds)",""],["exec_query","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_query","(sql, name = 'SQL', binds = [])","<p>Executes <code>sql</code> statement in the context of this connection using\n<code>binds</code> as the bind substitutes.  <code>name</code> is …\n"],["exec_query","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-exec_query","(sql, name = nil, binds = [])","<p>DATABASE STATEMENTS ======================================\n"],["exec_update","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_update","(sql, name, binds)","<p>Executes update <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_update","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_update","(sql, name, binds)",""],["exec_update","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_update","(sql, name, binds)",""],["exec_update","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-exec_update","(sql, name = 'SQL', binds = [])",""],["exec_update","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-exec_update","(sql, name = 'SQL', binds = [])",""],["execute","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-execute","(sql, name = nil)","<p>Executes an SQL statement, returning a PGresult object on success or\nraising a PGError exception otherwise. …\n"],["execute_hook","ActiveSupport","ActiveSupport.html#method-c-execute_hook","(base, options, block)",""],["execute_if_updated","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-execute_if_updated","()",""],["exist?","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-exist-3F","(name, options = nil)","<p>Return true if the cache contains an entry for the given key.\n<p>Options are passed to the underlying cache …\n"],["exists?","ActionView::LookupContext::ViewPaths","ActionView/LookupContext/ViewPaths.html#method-i-exists-3F","(name, prefixes = [], partial = false, keys = [])",""],["exists?","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-exists-3F","(id = nil)","<p>Returns true if a record exists in the table that matches the\n<code>id</code> or conditions given, or false otherwise. …\n"],["exists?","ActiveResource::Base","ActiveResource/Base.html#method-c-exists-3F","(id, options = {})","<p>Asserts the existence of a resource, returning <code>true</code> if the\nresource is found.\n<p>Examples\n\n<pre>Note.create(:title ...</pre>\n"],["exists?","ActiveResource::Base","ActiveResource/Base.html#method-i-exists-3F","()","<p>Evaluates to <code>true</code> if this resource is not <code>new?</code>\nand is found on the remote service.  Using this method, …\n"],["expand_cache_key","ActiveSupport::Cache","ActiveSupport/Cache.html#method-c-expand_cache_key","(key, namespace = nil)",""],["expand_hash_conditions_for_aggregates","ActiveRecord::Base","ActiveRecord/Base.html#method-c-expand_hash_conditions_for_aggregates","(attrs)","<p>Accepts a hash of SQL conditions and replaces those attributes that\ncorrespond to a <code>composed_of</code> relationship …\n"],["expected_response","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-expected_response","(http_method, uri, credentials, password, password_is_ha1=true)","<p>Returns the expected response for a request of <code>http_method</code> to\n<code>uri</code> with the decoded <code>credentials</code> and the …\n"],["expire_action","ActionController::Caching::Actions","ActionController/Caching/Actions.html#method-i-expire_action","(options = {})",""],["expire_fragment","ActionController::Caching::Fragments","ActionController/Caching/Fragments.html#method-i-expire_fragment","(key, options = nil)","<p>Removes fragments from the cache.\n<p><code>key</code> can take one of three forms:\n<p>String - This would normally take the …\n"],["expire_page","ActionController::Caching::Pages","ActionController/Caching/Pages.html#method-i-expire_page","(options = {})","<p>Expires the page that was cached with the <code>options</code> as a key.\nExample:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">expire_page</span> :<span class=\"ruby-identifier\">controller</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;lists&quot;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["expire_page","ActionController::Caching::Pages::ClassMethods","ActionController/Caching/Pages/ClassMethods.html#method-i-expire_page","(path)","<p>Expires the page that was cached with the <code>path</code> as a key.\nExample:\n\n<pre>expire_page &quot;/lists/show&quot;</pre>\n"],["expired?","ActiveSupport::Cache::Entry","ActiveSupport/Cache/Entry.html#method-i-expired-3F","()","<p>Check if the entry is expired. The <code>expires_in</code> parameter can\noverride the value set when the entry was …\n"],["expires_at","ActiveSupport::Cache::Entry","ActiveSupport/Cache/Entry.html#method-i-expires_at","()","<p>Seconds since the epoch when the entry will expire.\n"],["expires_at=","ActiveSupport::Cache::Entry","ActiveSupport/Cache/Entry.html#method-i-expires_at-3D","(time)","<p>Set a new time when the entry will expire.\n"],["expires_in","ActionController::ConditionalGet","ActionController/ConditionalGet.html#method-i-expires_in","(seconds, options = {})","<p>Sets a HTTP 1.1 Cache-Control header. Defaults to issuing a\n<code>private</code> instruction, so that intermediate …\n"],["expires_now","ActionController::ConditionalGet","ActionController/ConditionalGet.html#method-i-expires_now","()","<p>Sets a HTTP 1.1 Cache-Control header of <code>no-cache</code> so no caching\nshould occur by the browser or intermediate …\n"],["extended","ActiveModel::Callbacks","ActiveModel/Callbacks.html#method-c-extended","(base)",""],["extended","ActiveSupport::Concern","ActiveSupport/Concern.html#method-c-extended","(base)",""],["extended","ActiveSupport::Testing::Declarative","ActiveSupport/Testing/Declarative.html#method-c-extended","(klass)",""],["extending","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-extending","(*modules)",""],["extension","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-i-extension","()",""],["extension","ActionView::Helpers::AssetTagHelper::JavascriptIncludeTag","ActionView/Helpers/AssetTagHelper/JavascriptIncludeTag.html#method-i-extension","()",""],["extension","ActionView::Helpers::AssetTagHelper::StylesheetIncludeTag","ActionView/Helpers/AssetTagHelper/StylesheetIncludeTag.html#method-i-extension","()",""],["extension","ActiveResource::Formats::JsonFormat","ActiveResource/Formats/JsonFormat.html#method-i-extension","()",""],["extension","ActiveResource::Formats::XmlFormat","ActiveResource/Formats/XmlFormat.html#method-i-extension","()",""],["extract!","Hash","Hash.html#method-i-extract-21","(*keys)","<p>Removes and returns the key/value pairs matching the given keys.\n\n<pre class=\"ruby\">{:<span class=\"ruby-identifier\">a</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>, :<span class=\"ruby-identifier\">b</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>, :<span class=\"ruby-identifier\">c</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">3</span>, :<span class=\"ruby-identifier\">d</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">4</span>}.<span class=\"ruby-identifier\">extract!</span>(:<span class=\"ruby-identifier\">a</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["extract_default","ActiveRecord::ConnectionAdapters::Mysql2Column","ActiveRecord/ConnectionAdapters/Mysql2Column.html#method-i-extract_default","(default)",""],["extract_options!","Array","Array.html#method-i-extract_options-21","()","<p>Extracts options from a set of arguments. Removes and returns the last\nelement in the array if it’s a …\n"],["extract_schema_and_table","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extract_schema_and_table","(name)","<p>Extracts the table and schema name from <code>name</code>\n"],["extractable_options?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-extractable_options-3F","()","<p>Always returns true, so that <code>Array#extract_options!</code> finds\nmembers of this class.\n"],["extractable_options?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-extractable_options-3F","()","<p>Always returns true, so that <code>Array#extract_options!</code> finds\nmembers of this class.\n"],["extractable_options?","Hash","Hash.html#method-i-extractable_options-3F","()","<p>By default, only instances of Hash itself are extractable. Subclasses of\nHash may implement this method …\n"],["favicon_link_tag","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-favicon_link_tag","(source='/favicon.ico', options={})","<p>Web browsers cache favicons. If you just throw a <code>favicon.ico</code>\ninto the document root of your application …\n"],["fetch","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-fetch","(name, options = nil)","<p>Fetches data from the cache, using the given key. If there is data in the\ncache with the given key, then …\n"],["fetch","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch","(key, *extras)","<p>Fetches the value for the specified key, same as doing hash\n"],["fetch","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch","(key, *extras)","<p>Fetches the value for the specified key, same as doing hash\n"],["field_set_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-field_set_tag","(legend = nil, options = nil, &block)","<p>Creates a field set for grouping HTML form elements.\n<p><code>legend</code> will become the fieldset's title (optional ...\n"],["fields_for","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-fields_for","(record_name, record_object = nil, fields_options = {}, &block)",""],["fields_for","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-fields_for","(record_name, record_object = nil, options = {}, &block)","<p>Creates a scope around a specific model object like form_for, but doesn’t\ncreate the form tags themselves. …\n"],["fifth","Array","Array.html#method-i-fifth","()","<p>Equal to <code>self[4]</code>.\n"],["file_field","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-file_field","(method, options = {})",""],["file_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-file_field","(object_name, method, options = {})","<p>Returns a file upload input tag tailored for accessing a specified\nattribute (identified by <code>method</code>) on …\n"],["file_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-file_field_tag","(name, options = {})","<p>Creates a file upload field.  If you are using file uploads then you will\nalso need to set the multipart …\n"],["filename","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-filename","()","<p>Returns the filename for the data file for this version\n"],["filtered_options","ActiveModel::Validations::NumericalityValidator","ActiveModel/Validations/NumericalityValidator.html#method-i-filtered_options","(value)",""],["find","ActionView::LookupContext::ViewPaths","ActionView/LookupContext/ViewPaths.html#method-i-find","(name, prefixes = [], partial = false, keys = [])",""],["find","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find","(*args)","<p>Find operates with four different retrieval approaches:\n<p>Find by id - This can either be a specific id …\n"],["find","ActiveResource::Base","ActiveResource/Base.html#method-c-find","(*arguments)","<p>Core method for finding resources.  Used similarly to Active Record’s\n<code>find</code> method.\n<p>Arguments\n<p>The first …\n"],["find_all","ActionView::LookupContext::ViewPaths","ActionView/LookupContext/ViewPaths.html#method-i-find_all","(name, prefixes = [], partial = false, keys = [])",""],["find_all","ActionView::Resolver","ActionView/Resolver.html#method-i-find_all","(name, prefix=nil, partial=false, details={}, key=nil, locals=[])","<p>Normalizes the arguments and passes it on to find_template.\n"],["find_by_attributes","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_by_attributes","(match, attributes, *args)",""],["find_by_session_id","ActiveRecord::SessionStore::Session","ActiveRecord/SessionStore/Session.html#method-c-find_by_session_id","(session_id)","<p>Hook to set up sessid compatibility.\n"],["find_by_session_id","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-c-find_by_session_id","(session_id)","<p>Look up a session by id and unmarshal its data if found.\n"],["find_by_sql","ActiveRecord::Base","ActiveRecord/Base.html#method-c-find_by_sql","(sql, binds = [])","<p>Executes a custom SQL query against your database and returns all the\nresults. The results will be returned …\n"],["find_each","ActiveRecord::Batches","ActiveRecord/Batches.html#method-i-find_each","(options = {})","<p>Yields each record that was found by the find <code>options</code>. The\nfind is performed by find_in_batches with …\n"],["find_first","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_first","()",""],["find_in_batches","ActiveRecord::Batches","ActiveRecord/Batches.html#method-i-find_in_batches","(options = {})","<p>Yields each batch of records that was found by the find\n<code>options</code> as an array. The size of each batch is …\n"],["find_last","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_last","()",""],["find_one","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_one","(id)",""],["find_or_instantiator_by_attributes","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_or_instantiator_by_attributes","(match, attributes, *args)",""],["find_some","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_some","(ids)",""],["find_template","ActionView::LookupContext::ViewPaths","ActionView/LookupContext/ViewPaths.html#method-i-find_template","(name, prefixes = [], partial = false, keys = [])",""],["find_tzinfo","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-find_tzinfo","(name)","<p>TODO: Preload instead of lazy load for thread safety\n"],["find_with_associations","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_with_associations","()",""],["find_with_ids","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_with_ids","(*ids)",""],["find_zone","Time","Time.html#method-c-find_zone","(time_zone)",""],["find_zone!","Time","Time.html#method-c-find_zone-21","(time_zone)","<p>Returns a TimeZone instance or nil, or raises an ArgumentError for invalid\ntimezones.\n"],["finder?","ActiveRecord::DynamicFinderMatch","ActiveRecord/DynamicFinderMatch.html#method-i-finder-3F","()",""],["first","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-first","(*args)","<p>A convenience wrapper for <code>find(:first, *args)</code>. You can pass in\nall the same arguments to this method …\n"],["first","ActiveResource::Base","ActiveResource/Base.html#method-c-first","(*args)","<p>A convenience wrapper for <code>find(:first, *args)</code>. You can pass in\nall the same arguments to this method …\n"],["first","String","String.html#method-i-first","(limit = 1)","<p>Returns the first character of the string or the first <code>limit</code>\ncharacters.\n<p>Examples:\n\n<pre>&quot;hello&quot;.first     # ...</pre>\n"],["first!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-first-21","()","<p>Same as <code>first</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found. Note that\n<code>first!</code> accepts …\n"],["fixture_is_cached?","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-fixture_is_cached-3F","(connection, table_name)",""],["fixtures","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-fixtures","(*fixture_names)",""],["flush","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-i-flush","()",""],["flush","ActiveSupport::LogSubscriber::TestHelper::MockLogger","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-flush","()",""],["flush_all!","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-c-flush_all-21","()","<p>Flush all log_subscribers’ logger.\n"],["flush_cache","ActiveSupport::Memoizable::InstanceMethods","ActiveSupport/Memoizable/InstanceMethods.html#method-i-flush_cache","(*syms)",""],["flushable_loggers","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-c-flushable_loggers","()",""],["for_class","HTML::Selector","HTML/Selector.html#method-c-for_class","(cls)","<p>Creates a new selector for the given class name.\n"],["for_id","HTML::Selector","HTML/Selector.html#method-c-for_id","(id)","<p>Creates a new selector for the given id.\n"],["for_tag","ActiveSupport::TestCase","ActiveSupport/TestCase.html#method-c-for_tag","(tag)",""],["force_ssl","ActionController::ForceSSL::ClassMethods","ActionController/ForceSSL/ClassMethods.html#method-i-force_ssl","(options = {})","<p>Force the request to this particular controller or specified actions to be\nunder HTTPS protocol.\n<p>Note …\n"],["foreign_key","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-foreign_key","(class_name, separate_class_name_and_id_with_underscore = true)","<p>Creates a foreign key name from a class name.\n<code>separate_class_name_and_id_with_underscore</code> sets whether …\n"],["foreign_key","String","String.html#method-i-foreign_key","(separate_class_name_and_id_with_underscore = true)","<p>Creates a foreign key name from a class name.\n<code>separate_class_name_and_id_with_underscore</code> sets whether …\n"],["forking_env?","ActiveSupport::Testing::Isolation","ActiveSupport/Testing/Isolation.html#method-c-forking_env-3F","()",""],["form_authenticity_param","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-form_authenticity_param","()","<p>The form’s authenticity parameter. Override to provide your own.\n"],["form_authenticity_token","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-form_authenticity_token","()","<p>Sets the token value for the current session.\n"],["form_for","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-form_for","(record, options = {}, &proc)","<p>Creates a form and a scope around a specific model object that is used as a\nbase for questioning about …\n"],["form_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-form_tag","(url_for_options = {}, options = {}, &block)","<p>Starts a form tag that points the action to an url configured with\n<code>url_for_options</code> just like ActionController::Base#url_for …\n"],["format","ActiveResource::Base","ActiveResource/Base.html#method-c-format","()","<p>Returns the current format, default is ActiveResource::Formats::JsonFormat.\n"],["format","ActiveSupport::Testing::Performance::Metrics::Amount","ActiveSupport/Testing/Performance/Metrics/Amount.html#method-i-format","(measurement)",""],["format","ActiveSupport::Testing::Performance::Metrics::DigitalInformationUnit","ActiveSupport/Testing/Performance/Metrics/DigitalInformationUnit.html#method-i-format","(measurement)",""],["format","ActiveSupport::Testing::Performance::Metrics::Time","ActiveSupport/Testing/Performance/Metrics/Time.html#method-i-format","(measurement)",""],["format=","ActiveResource::Base","ActiveResource/Base.html#method-c-format-3D","(mime_type_reference_or_format)","<p>Sets the format that attributes are sent and received in from a mime type\nreference:\n\n<pre>Person.format = :json ...</pre>\n"],["formats=","ActionView::LookupContext::Details","ActionView/LookupContext/Details.html#method-i-formats-3D","(values)","<p>Overload formats= to expand [“<strong>/</strong>”] values and automatically\nadd :html as fallback to :js.\n"],["formatted_offset","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)",""],["formatted_offset","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-formatted_offset","(colon=true, alternate_utc_string = nil)","<p>Returns the offset of this time zone as a formatted string, of the format\n“+HH:MM”.\n"],["formatted_offset","DateTime","DateTime.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns the <code>utc_offset</code> as an +HH:MM formatted string.\nExamples:\n\n<pre>datetime = DateTime.civil(2000, 1, 1, ...</pre>\n"],["formatted_offset","Time","Time.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns the UTC offset as an +HH:MM formatted string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>).<span class=\"ruby-identifier\">formatted_offset</span>         <span class=\"ruby-comment\"># =&gt; &quot;-06:00&quot; ...</span>\n</pre>\n"],["fortnight","Numeric","Numeric.html#method-i-fortnight","()",""],["fortnights","Numeric","Numeric.html#method-i-fortnights","()",""],["forty_two","Array","Array.html#method-i-forty_two","()","<p>Equal to <code>self[41]</code>. Also known as accessing “the reddit”.\n"],["fourth","Array","Array.html#method-i-fourth","()","<p>Equal to <code>self[3]</code>.\n"],["fragment_cache_key","ActionController::Caching::Fragments","ActionController/Caching/Fragments.html#method-i-fragment_cache_key","(key)","<p>Given a key (as described in <code>expire_fragment</code>), returns a key\nsuitable for use in reading, writing, or …\n"],["fragment_exist?","ActionController::Caching::Fragments","ActionController/Caching/Fragments.html#method-i-fragment_exist-3F","(key, options = nil)","<p>Check if a cached fragment from the location signified by  <code>key</code>\nexists (see <code>expire_fragment</code> for acceptable …\n"],["freeze","ActiveRecord::Base","ActiveRecord/Base.html#method-i-freeze","()","<p>Freeze the attributes hash such that associations are still accessible,\neven on destroyed records.\n"],["freeze","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-freeze","()",""],["freeze_with_memoizable","ActiveSupport::Memoizable::InstanceMethods","ActiveSupport/Memoizable/InstanceMethods.html#method-i-freeze_with_memoizable","()",""],["fresh_when","ActionController::ConditionalGet","ActionController/ConditionalGet.html#method-i-fresh_when","(options)","<p>Sets the etag, last_modified, or both on the response and renders a\n<code>304 Not Modified</code> response if the …\n"],["from","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-from","(value)",""],["from","Array","Array.html#method-i-from","(position)","<p>Returns the tail of the array from <code>position</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">from</span>(<span class=\"ruby-value\">0</span>)  <span class=\"ruby-comment\"># =&gt; %w( a b c d )</span>\n<span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">from</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["from","String","String.html#method-i-from","(position)","<p>Returns the remaining of the string from the <code>position</code> treating\nthe string as an array (where 0 is the …\n"],["from_array","ActiveResource::Errors","ActiveResource/Errors.html#method-i-from_array","(messages, save_cache = false)","<p>Grabs errors from an array of messages (like ActiveRecord::Validations).\nThe second parameter directs …\n"],["from_json","ActiveModel::Serializers::JSON","ActiveModel/Serializers/JSON.html#method-i-from_json","(json)",""],["from_json","ActiveResource::Errors","ActiveResource/Errors.html#method-i-from_json","(json, save_cache = false)","<p>Grabs errors from a json response.\n"],["from_now","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-from_now","(time = ::Time.current)",""],["from_now","Numeric","Numeric.html#method-i-from_now","(time = ::Time.current)","<p>Reads best without arguments:  10.minutes.from_now\n"],["from_rails_root","ActionView::LogSubscriber","ActionView/LogSubscriber.html#method-i-from_rails_root","(string)",""],["from_xml","ActiveModel::Serializers::Xml","ActiveModel/Serializers/Xml.html#method-i-from_xml","(xml)",""],["from_xml","ActiveResource::Errors","ActiveResource/Errors.html#method-i-from_xml","(xml, save_cache = false)","<p>Grabs errors from an XML response.\n"],["from_xml","Hash","Hash.html#method-c-from_xml","(xml)",""],["frozen?","ActiveRecord::Base","ActiveRecord/Base.html#method-i-frozen-3F","()","<p>Returns <code>true</code> if the attributes hash has been frozen.\n"],["full_messages","ActiveModel::Errors","ActiveModel/Errors.html#method-i-full_messages","()","<p>Returns all the full error messages in an array.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Company</span>\n  <span class=\"ruby-identifier\">validates_presence_of</span> :<span class=\"ruby-identifier\">name</span>, :<span class=\"ruby-identifier\">address</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["full_profile_options","ActiveSupport::Testing::Performance","ActiveSupport/Testing/Performance.html#method-i-full_profile_options","()",""],["full_test_name","ActiveSupport::Testing::Performance","ActiveSupport/Testing/Performance.html#method-i-full_test_name","()",""],["future?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-future-3F","()",""],["future?","Date","Date.html#method-i-future-3F","()","<p>Returns true if the Date object’s date lies in the future.\n"],["future?","DateTime","DateTime.html#method-i-future-3F","()","<p>Tells whether the DateTime object’s datetime lies in the future\n"],["future?","Time","Time.html#method-i-future-3F","()","<p>Tells whether the Time object’s time lies in the future\n"],["g_length","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-g_length","()","<p>Returns the number of grapheme clusters in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'क्षि'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">length</span>   <span class=\"ruby-comment\"># =&gt; 4</span>\n<span class=\"ruby-string\">'क्षि'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">g_length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["g_pack","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-g_pack","(unpacked)","<p>Reverse operation of g_unpack.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Unicode</span>.<span class=\"ruby-identifier\">g_pack</span>(<span class=\"ruby-constant\">Unicode</span>.<span class=\"ruby-identifier\">g_unpack</span>(<span class=\"ruby-string\">'क्षि'</span>)) <span class=\"ruby-comment\"># =&gt; 'क्षि'</span>\n</pre>\n"],["g_unpack","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-g_unpack","(string)","<p>Unpack the string at grapheme boundaries. Returns a list of character\nlists.\n<p>Example:\n\n<pre>Unicode.g_unpack('क्षि') ...</pre>\n"],["generate","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-i-generate","(value)",""],["generate_message","ActiveModel::Errors","ActiveModel/Errors.html#method-i-generate_message","(attribute, type = :invalid, options = {})","<p>Translates an error message in its default scope\n(<code>activemodel.errors.messages</code>).\n<p>Error messages are first …\n"],["get","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-get","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating GET HTTP method and set/volley the response\n"],["get","ActiveModel::Errors","ActiveModel/Errors.html#method-i-get","(key)","<p>Get messages for <code>key</code>\n"],["get","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-get","(klass, primary_key)",""],["get","ActiveResource::Connection","ActiveResource/Connection.html#method-i-get","(path, headers = {})","<p>Executes a GET request. Used to get (find) resources.\n"],["get","ActiveResource::CustomMethods","ActiveResource/CustomMethods.html#method-c-get","(custom_method_name, options = {})","<p>Invokes a GET to a given custom REST method. For example:\n\n<pre>Person.get(:active)  # GET /people/active.json ...</pre>\n"],["get","ActiveResource::CustomMethods::InstanceMethods","ActiveResource/CustomMethods/InstanceMethods.html#method-i-get","(method_name, options = {})",""],["get","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-get","(key)",""],["getgm","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-getgm","()",""],["getlocal","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-getlocal","()",""],["getutc","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-getutc","()",""],["getutc","DateTime","DateTime.html#method-i-getutc","()",""],["gigabyte","Numeric","Numeric.html#method-i-gigabyte","()",""],["gigabytes","Numeric","Numeric.html#method-i-gigabytes","()",""],["gmt?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-gmt-3F","()",""],["gmt_offset","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-gmt_offset","()",""],["gmtime","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-gmtime","()",""],["gmtoff","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-gmtoff","()",""],["group","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-group","(*args)",""],["group_by","Enumerable","Enumerable.html#method-i-group_by","()","<p>Collect an enumerable into sets, grouped by the result of a block. Useful,\nfor example, for grouping …\n"],["grouped_collection_select","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-grouped_collection_select","(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})",""],["grouped_collection_select","ActionView::Helpers::FormOptionsHelper","ActionView/Helpers/FormOptionsHelper.html#method-i-grouped_collection_select","(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})","<p>Returns <code>&lt;select&gt;</code>, <code>&lt;optgroup&gt;</code> and\n<code>&lt;option&gt;</code> tags for the collection of existing return …\n"],["grouped_options_for_select","ActionView::Helpers::FormOptionsHelper","ActionView/Helpers/FormOptionsHelper.html#method-i-grouped_options_for_select","(grouped_options, selected_key = nil, prompt = nil)","<p>Returns a string of <code>&lt;option&gt;</code> tags, like\n<code>options_for_select</code>, but wraps them with\n<code>&lt;optgroup&gt;</code> …\n"],["groups","Rails","Rails.html#method-c-groups","(*groups)","<p>Returns all rails groups for loading based on:\n<p>The Rails environment;\n<p>The environment variable RAILS_GROUPS …\n"],["h","ERB::Util","ERB/Util.html#method-c-h","(s)",""],["ha1","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-ha1","(credentials, password)",""],["handle_unverified_request","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-handle_unverified_request","()","<p>This is the method that defines the application behavior when a request is\nfound to be unverified. By …\n"],["handler_for_rescue","ActiveSupport::Rescuable","ActiveSupport/Rescuable.html#method-i-handler_for_rescue","(exception)",""],["handles_encoding?","ActionView::Template::Handlers::ERB","ActionView/Template/Handlers/ERB.html#method-i-handles_encoding-3F","()",""],["has_and_belongs_to_many","ActiveRecord::Associations::ClassMethods","ActiveRecord/Associations/ClassMethods.html#method-i-has_and_belongs_to_many","(name, options = {}, &extension)","<p>Specifies a many-to-many relationship with another class. This associates\ntwo classes via an intermediate …\n"],["has_attribute?","ActiveRecord::Base","ActiveRecord/Base.html#method-i-has_attribute-3F","(attr_name)","<p>Returns true if the given attribute is in the attributes hash\n"],["has_default?","ActiveRecord::ConnectionAdapters::Mysql2Column","ActiveRecord/ConnectionAdapters/Mysql2Column.html#method-i-has_default-3F","()",""],["has_empty_resource_definition?","ActionController::Responder","ActionController/Responder.html#method-i-has_empty_resource_definition-3F","()","<p>Check whether resource needs a specific definition of empty resource to be\nvalid\n"],["has_errors?","ActionController::Responder","ActionController/Responder.html#method-i-has_errors-3F","()","<p>Check whether the resource has errors.\n"],["has_key?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-has_key-3F","(key)",""],["has_key?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-has_key-3F","(key)",""],["has_many","ActiveRecord::Associations::ClassMethods","ActiveRecord/Associations/ClassMethods.html#method-i-has_many","(name, options = {}, &extension)","<p>Specifies a one-to-many association. The following methods for retrieval\nand query of collections of …\n"],["has_one","ActiveRecord::Associations::ClassMethods","ActiveRecord/Associations/ClassMethods.html#method-i-has_one","(name, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if the other class …\n"],["has_secure_password","ActiveModel::SecurePassword::ClassMethods","ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password","()","<p>Adds methods to set and authenticate against a BCrypt password. This\nmechanism requires you to have a …\n"],["hash","ActiveRecord::Base","ActiveRecord/Base.html#method-i-hash","()","<p>Delegates to id in order to allow two records of the same type and id to\nwork with something like:\n\n<pre>[ Person.find(1), ...</pre>\n"],["hash","ActiveResource::Base","ActiveResource/Base.html#method-i-hash","()","<p>Delegates to id in order to allow two resources of the same type and id to\nwork with something like: …\n"],["hash","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-hash","()",""],["having","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-having","(opts, *rest)",""],["head","ActionController::Head","ActionController/Head.html#method-i-head","(status, options = {})","<p>Return a response that has no content (merely headers). The options\nargument is interpreted to be a hash …\n"],["head","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-head","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating HEAD HTTP method and set/volley the response\n"],["head","ActiveResource::Connection","ActiveResource/Connection.html#method-i-head","(path, headers = {})","<p>Executes a HEAD request. Used to obtain meta-information about resources,\nsuch as whether they exist …\n"],["headers","ActionMailer::Base","ActionMailer/Base.html#method-i-headers","(args=nil)","<p>Allows you to pass random and unusual headers to the new +Mail::Message+\nobject which will add them to …\n"],["headers","ActiveResource::Base","ActiveResource/Base.html#method-c-headers","()",""],["headers=","ActionController::Testing","ActionController/Testing.html#method-i-headers-3D","(new_headers)","<p>TODO : Rewrite tests using controller.headers= to use Rack env\n"],["helper_attr","ActionController::Helpers::ClassMethods","ActionController/Helpers/ClassMethods.html#method-i-helper_attr","(*attrs)","<p>Declares helper accessors for controller attributes. For example, the\nfollowing adds new <code>name</code> and <code>name=</code> …\n"],["helper_class","ActionView::TestCase::Behavior::ClassMethods","ActionView/TestCase/Behavior/ClassMethods.html#method-i-helper_class","()",""],["helper_method","ActionView::TestCase::Behavior::ClassMethods","ActionView/TestCase/Behavior/ClassMethods.html#method-i-helper_method","(*methods)",""],["helpers","ActionController::Helpers::ClassMethods","ActionController/Helpers/ClassMethods.html#method-i-helpers","()","<p>Provides a proxy to access helpers methods from outside the view.\n"],["hidden_field","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-hidden_field","(method, options = {})",""],["hidden_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-hidden_field","(object_name, method, options = {})","<p>Returns a hidden input tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an …\n"],["hidden_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-hidden_field_tag","(name, value = nil, options = {})","<p>Creates a hidden form input field used to transmit data that would be lost\ndue to HTTP’s statelessness …\n"],["hide_action","ActionController::HideActions::ClassMethods","ActionController/HideActions/ClassMethods.html#method-i-hide_action","(*args)","<p>Sets all of the actions passed in as hidden actions.\n<p>Parameters\n<p><code>args</code> - A list of actions\n"],["highlight","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-highlight","(text, phrases, *args)","<p>Highlights one or more <code>phrases</code> everywhere in <code>text</code>\nby inserting it into a <code>:highlighter</code> string. The highlighter …\n"],["hour","Numeric","Numeric.html#method-i-hour","()",""],["hours","Numeric","Numeric.html#method-i-hours","()",""],["html_escape","ERB::Util","ERB/Util.html#method-c-html_escape","(s)","<p>A utility method for escaping HTML tag characters. This method is also\naliased as <code>h</code>.\n<p>In your ERB templates, …\n"],["html_safe","String","String.html#method-i-html_safe","()",""],["html_safe?","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-html_safe-3F","()",""],["html_safe?","Numeric","Numeric.html#method-i-html_safe-3F","()",""],["html_safe?","Object","Object.html#method-i-html_safe-3F","()",""],["http_basic_authenticate_with","ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods","ActionController/HttpAuthentication/Basic/ControllerMethods/ClassMethods.html#method-i-http_basic_authenticate_with","(options = {})",""],["httpdate","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-httpdate","()",""],["human","ActiveModel::Name","ActiveModel/Name.html#method-i-human","(options={})","<p>Transform the model name into a more humane format, using I18n. By default,\nit will underscore then humanize …\n"],["human","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-human","(rule, replacement)","<p>Specifies a humanized form of a string by a regular expression rule or by a\nstring mapping. When using …\n"],["human_attribute_name","ActiveModel::Translation","ActiveModel/Translation.html#method-i-human_attribute_name","(attribute, options = {})","<p>Transforms attribute names into a more human format, such as “First name”\ninstead of “ …\n"],["humanize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-humanize","(lower_case_and_underscored_word)","<p>Capitalizes the first word and turns underscores into spaces and strips a\ntrailing “_id”, if …\n"],["humanize","String","String.html#method-i-humanize","()","<p>Capitalizes the first word, turns underscores into spaces, and strips\n‘_id’. Like <code>titleize</code>, this is meant …\n"],["i18n_scope","ActiveModel::Translation","ActiveModel/Translation.html#method-i-i18n_scope","()","<p>Returns the <code>i18n_scope</code> for the class. Overwrite if you want\ncustom lookup.\n"],["id","ActiveResource::Base","ActiveResource/Base.html#method-i-id","()","<p>Gets the <code>\\id</code> attribute of the resource.\n"],["id","NilClass","NilClass.html#method-i-id","()","<p>Raises a RuntimeError when you attempt to call <code>id</code> on\n<code>nil</code>.\n"],["id=","ActiveResource::Base","ActiveResource/Base.html#method-i-id-3D","(id)","<p>Sets the <code>\\id</code> attribute of the resource.\n"],["id_from_response","ActiveResource::Base","ActiveResource/Base.html#method-i-id_from_response","(response)","<p>Takes a response from a typical create post and pulls the ID out\n"],["identify","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-identify","(label)","<p>Returns a consistent, platform-independent identifier for\n<code>label</code>. Identifiers are positive integers less …\n"],["identity","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-i-identity","(event)",""],["image_alt","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-image_alt","(src)",""],["image_path","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-image_path","(source)","<p>Computes the path to an image asset in the public images directory. Full\npaths from the document root …\n"],["image_submit_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-image_submit_tag","(source, options = {})","<p>Displays an image which when clicked will submit the form.\n<p><code>source</code> is passed to AssetTagHelper#path_to_image ...\n"],["image_tag","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-image_tag","(source, options = {})","<p>Returns an html image tag for the <code>source</code>. The\n<code>source</code> can be a full path or a file that exists in your …\n"],["in","Date","Date.html#method-i-in","(seconds)",""],["in","DateTime","DateTime.html#method-i-in","(seconds)",""],["in","Time","Time.html#method-i-in","(seconds)",""],["in?","Object","Object.html#method-i-in-3F","(another_object)","<p>Returns true if this object is included in the argument. Argument must be\nany object which responds to …\n"],["in_char_class?","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-in_char_class-3F","(codepoint, classes)","<p>Detect whether the codepoint is in a certain character class. Returns\n<code>true</code> when it’s in the specified …\n"],["in_clause_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-in_clause_length","()","<p>Returns the maximum number of elements in an IN (x,y,z) clause. nil means\nno limit.\n"],["in_groups","Array","Array.html#method-i-in_groups","(number, fill_with = nil)","<p>Splits or iterates over the array in <code>number</code> of groups, padding\nany remaining slots with <code>fill_with</code> unless …\n"],["in_groups_of","Array","Array.html#method-i-in_groups_of","(number, fill_with = nil)","<p>Splits or iterates over the array in groups of size <code>number</code>,\npadding any remaining slots with <code>fill_with</code> …\n"],["in_time_zone","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-in_time_zone","(new_zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>, or the specified\nzone.\n"],["in_time_zone","DateTime","DateTime.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span> = <span class=\"ruby-string\">'Hawaii'</span>             <span class=\"ruby-comment\"># =&gt; 'Hawaii'</span>\n<span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>).<span class=\"ruby-identifier\">in_time_zone</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["in_time_zone","Time","Time.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span> = <span class=\"ruby-string\">'Hawaii'</span>         <span class=\"ruby-comment\"># =&gt; 'Hawaii'</span>\n<span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>).<span class=\"ruby-identifier\">in_time_zone</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["include?","ActiveModel::Errors","ActiveModel/Errors.html#method-i-include-3F","(error)","<p>Do the error messages include an error with key <code>error</code>?\n"],["include?","ActiveModel::MassAssignmentSecurity::PermissionSet","ActiveModel/MassAssignmentSecurity/PermissionSet.html#method-i-include-3F","(key)",""],["include?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-include-3F","(key)",""],["include?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-include-3F","(key)",""],["include?","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-include-3F","(other)","<p>Returns <code>true</code> if contained string contains <em>other</em>.\nReturns <code>false</code> otherwise.\n<p>Example:\n\n<pre>'Café'.mb_chars.include?('é') ...</pre>\n"],["include?","Test::Unit::Collector::ObjectSpace","Test/Unit/Collector/ObjectSpace.html#method-i-include-3F","(test)",""],["include_fallbacks_module","I18n::Railtie","I18n/Railtie.html#method-c-include_fallbacks_module","()",""],["include_tag","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-i-include_tag","(*sources)",""],["include_with_range?","Range","Range.html#method-i-include_with_range-3F","(value)","<p>Extends the default Range#include? to support range comparisons.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>) <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">2</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["included","ActionController::TestCase::RaiseActionExceptions","ActionController/TestCase/RaiseActionExceptions.html#method-c-included","(base)",""],["included","ActionView::Template::Handlers::Compilable","ActionView/Template/Handlers/Compilable.html#method-c-included","(base)",""],["included","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-included","(base)",""],["included","ActiveSupport::Concern","ActiveSupport/Concern.html#method-i-included","(base = nil, &block)",""],["included","ActiveSupport::Memoizable::InstanceMethods","ActiveSupport/Memoizable/InstanceMethods.html#method-c-included","(base)",""],["included","ActiveSupport::Testing::Isolation","ActiveSupport/Testing/Isolation.html#method-c-included","(base)",""],["includes","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-includes","(*args)",""],["increment","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-increment","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and adds the\nvalue passed as <code>by</code> (default is 1). The increment is …\n"],["increment","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-increment","(name, amount = 1, options = nil)",""],["increment","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increment an integer value in the cache.\n"],["increment","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increment an integer value in the cache.\n<p>Options are passed to the underlying cache implementation.\n<p>All …\n"],["increment!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-increment-21","(attribute, by = 1)","<p>Wrapper around <code>increment</code> that saves the record. This method\ndiffers from its non-bang version in that …\n"],["increment_counter","ActiveRecord::CounterCache","ActiveRecord/CounterCache.html#method-i-increment_counter","(counter_name, id)","<p>Increment a number field by one, usually representing a count.\n<p>This is used for caching aggregate values, …\n"],["increment_open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-increment_open_transactions","()",""],["index","ActionController::Middleware","ActionController/Middleware.html#method-i-index","()",""],["index","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-index","(column_name, options = {})","<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols. See SchemaStatements#add_index …\n"],["index","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-index","(needle, offset=0)","<p>Returns the position <em>needle</em> in the string, counting in codepoints.\nReturns <code>nil</code> if <em>needle</em> isn’t found. …\n"],["index_by","Enumerable","Enumerable.html#method-i-index_by","()","<p>Convert an enumerable to a hash. Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">people</span>.<span class=\"ruby-identifier\">index_by</span>(&amp;:<span class=\"ruby-identifier\">login</span>)\n  =<span class=\"ruby-operator\">&gt;</span> { <span class=\"ruby-string\">&quot;nextangle&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">&lt;</span><span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">...</span><span class=\"ruby-operator\">&gt;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["index_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_exists-3F","(table_name, column_name, options = {})","<p>Checks to see if an index exists on a table for a given index definition.\n<p>Examples\n\n<pre># Check an index exists ...</pre>\n"],["index_exists?","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-index_exists-3F","(column_name, options = {})","<p>Checks to see if an index exists. See SchemaStatements#index_exists?\n"],["index_name_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_exists-3F","(table_name, index_name, default)","<p>Verify the existence of an index with a given name.\n<p>The default argument is returned if the underlying …\n"],["index_name_for_remove","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_for_remove","(table_name, options = {})",""],["index_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-index_name_length","()","<p>Returns the maximum length of an index name.\n"],["index_name_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-index_name_length","()",""],["indexes","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-indexes","(table_name, name = nil)","<p>Returns an array of indexes for the given table.\n"],["indexes","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-indexes","(table_name, name = nil)","<p>Returns an array of indexes for the given table.\n"],["indexes_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-indexes_per_table","()","<p>Returns the maximum number of indexes per table.\n"],["inflections","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-inflections","()","<p>Yields a singleton instance of Inflector::Inflections so you can specify\nadditional inflector rules. …\n"],["inheritable_copy","ActiveSupport::InheritableOptions","ActiveSupport/InheritableOptions.html#method-i-inheritable_copy","()",""],["inheritance_column","ActiveRecord::Base","ActiveRecord/Base.html#method-c-inheritance_column","()","<p>Defines the column name for use with single table inheritance. Use\n<code>set_inheritance_column</code> to set a different …\n"],["inheritance_column=","ActiveRecord::Base","ActiveRecord/Base.html#method-c-inheritance_column-3D","(value = nil, &block)",""],["inherited","ActionController::HideActions::ClassMethods","ActionController/HideActions/ClassMethods.html#method-i-inherited","(klass)",""],["inherited","ActionController::ParamsWrapper::ClassMethods","ActionController/ParamsWrapper/ClassMethods.html#method-i-inherited","(klass)","<p>Sets the default wrapper key or model which will be used to determine\nwrapper key and attribute names. …\n"],["inherited","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-c-inherited","(base)",""],["inherited","ActionView::Template::ActionView::Template::Template::Handler","ActionView/Template/ActionView/Template/Template/Handler.html#method-c-inherited","(base)",""],["inherited","ActiveModel::Observing::ClassMethods","ActiveModel/Observing/ClassMethods.html#method-i-inherited","(subclass)","<p>Notify observers when the observed class is subclassed.\n"],["inherited","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-inherited","(base)","<p>Copy validators on inheritance.\n"],["inherited","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-i-inherited","(base)",""],["init_fallbacks","I18n::Railtie","I18n/Railtie.html#method-c-init_fallbacks","(fallbacks)",""],["init_with","ActiveRecord::Base","ActiveRecord/Base.html#method-i-init_with","(coder)","<p>Initialize an empty model object from <code>coder</code>.\n<code>coder</code> must contain the attributes necessary for initializing …\n"],["initialize!","Rails","Rails.html#method-c-initialize-21","()",""],["initialize_copy","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-initialize_copy","(other)",""],["initialize_dup","ActiveRecord::Base","ActiveRecord/Base.html#method-i-initialize_dup","(other)","<p>Duped objects have no id assigned and are treated as new records. Note that\nthis is a “shallow” …\n"],["initialize_i18n","I18n::Railtie","I18n/Railtie.html#method-c-initialize_i18n","(app)","<p>Setup i18n configuration\n"],["initialize_schema_migrations_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-initialize_schema_migrations_table","()","<p>Should not be called normally, but this operation is non-destructive. The\nmigrations module handles this …\n"],["initialize_template_class","ActionController::Compatibility","ActionController/Compatibility.html#method-i-initialize_template_class","(*)","<p>For old tests\n"],["initialized=","Rails","Rails.html#method-c-initialized-3D","(initialized)",""],["initialized?","Rails","Rails.html#method-c-initialized-3F","()",""],["inquiry","String","String.html#method-i-inquiry","()","<p>Wraps the current string in the <code>ActiveSupport::StringInquirer</code>\nclass, which gives you a prettier way to …\n"],["insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert","(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = [])","<p>Returns the last auto-generated ID from the affected table.\n<p><code>id_value</code> will be returned unless the value ...\n"],["insert","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-insert","(values)",""],["insert","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-insert","(offset, fragment)","<p>Inserts the passed string at specified codepoint offsets.\n<p>Example:\n\n<pre>'Café'.mb_chars.insert(4, ' périferôl').to_s ...</pre>\n"],["insert_fixture","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_fixture","(fixture, table_name)","<p>Inserts the given fixture into the table. Overridden in adapters that\nrequire something beyond a simple …\n"],["insert_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Returns the last auto-generated ID from the affected table.\n"],["insert_sql","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)",""],["insert_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Executes an INSERT query and returns the new record’s ID\n"],["inspect","ActionView::Template","ActionView/Template.html#method-i-inspect","()",""],["inspect","ActiveRecord::Base","ActiveRecord/Base.html#method-c-inspect","()","<p>Returns a string like ‘Post(id:integer, title:string, body:text)’\n"],["inspect","ActiveRecord::Base","ActiveRecord/Base.html#method-i-inspect","()","<p>Returns the contents of the record as a nicely formatted string.\n"],["inspect","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-inspect","()",""],["inspect","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-inspect","()",""],["inspect","Date","Date.html#method-i-inspect","()",""],["inspect","DateTime","DateTime.html#method-i-inspect","()",""],["instance","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-c-instance","()",""],["instance_method_already_implemented?","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-instance_method_already_implemented-3F","(method_name)",""],["instance_method_already_implemented?","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-instance_method_already_implemented-3F","(method_name)","<p>Checks whether the method is defined in the model or any of its subclasses\nthat also derive from Active …\n"],["instance_method_names","Module","Module.html#method-i-instance_method_names","(*args)",""],["instance_variable_names","Object","Object.html#method-i-instance_variable_names","()",""],["instantiate","ActiveRecord::Base","ActiveRecord/Base.html#method-c-instantiate","(record)","<p>Finder methods must instantiate through this method to work with the\nsingle-table inheritance model that …\n"],["instantiate_all_loaded_fixtures","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-instantiate_all_loaded_fixtures","(object, load_instances = true)",""],["instantiate_fixtures","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-instantiate_fixtures","(object, fixture_name, fixtures, load_instances = true)",""],["instantiate_observers","ActiveModel::Observing::ClassMethods","ActiveModel/Observing/ClassMethods.html#method-i-instantiate_observers","()","<p>Instantiate the global observers.\n"],["instantiator?","ActiveRecord::DynamicFinderMatch","ActiveRecord/DynamicFinderMatch.html#method-i-instantiator-3F","()",""],["instrument","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-c-instrument","()",""],["instrument","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-c-instrument","(name, payload = {})",""],["instrument","ActiveSupport::Notifications::Instrumenter","ActiveSupport/Notifications/Instrumenter.html#method-i-instrument","(name, payload={})","<p>Instrument the given block by measuring the time taken to execute it and\npublish it. Notice that events …\n"],["instrument=","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-c-instrument-3D","(boolean)","<p>Set to true if cache stores should be instrumented. Default is false.\n"],["instrument_fragment_cache","ActionController::Caching::Fragments","ActionController/Caching/Fragments.html#method-i-instrument_fragment_cache","(name, key)",""],["instrumenter","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-c-instrumenter","()",""],["invalid?","ActiveModel::Validations","ActiveModel/Validations.html#method-i-invalid-3F","(context = nil)","<p>Performs the opposite of <code>valid?</code>. Returns true if errors were\nadded, false otherwise.\n"],["inverse","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-inverse","()","<p>Returns a list that represents commands that are the inverse of the\ncommands stored in <code>commands</code>.  For …\n"],["irregular","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-irregular","(singular, plural)","<p>Specifies a new irregular that applies to both pluralization and\nsingularization at the same time. This …\n"],["is_a?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-is_a-3F","(klass)","<p>Say we’re a Time to thwart type checking.\n"],["is_missing?","LoadError","LoadError.html#method-i-is_missing-3F","(location)",""],["is_missing?","LoadError","LoadError.html#method-i-is_missing-3F","(location)",""],["is_utf8?","String","String.html#method-i-is_utf8-3F","()",""],["isdst","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-isdst","()",""],["iso8601","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-iso8601","(fraction_digits = 0)",""],["iso8601","Date","Date.html#method-i-iso8601","()",""],["j","ActionView::Helpers::JavaScriptHelper","ActionView/Helpers/JavaScriptHelper.html#method-i-j","(javascript)",""],["j","ERB::Util","ERB/Util.html#method-c-j","(s)",""],["javascript_include_tag","ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers","ActionView/Helpers/AssetTagHelper/JavascriptTagHelpers.html#method-i-javascript_include_tag","(*sources)","<p>Returns an HTML script tag for each of the <code>sources</code> provided.\n<p>Sources may be paths to JavaScript files. …\n"],["javascript_path","ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers","ActionView/Helpers/AssetTagHelper/JavascriptTagHelpers.html#method-i-javascript_path","(source)","<p>Computes the path to a javascript asset in the public javascripts\ndirectory. If the <code>source</code> filename has …\n"],["javascript_tag","ActionView::Helpers::JavaScriptHelper","ActionView/Helpers/JavaScriptHelper.html#method-i-javascript_tag","(content_or_options_with_block = nil, html_options = {}, &block)","<p>Returns a JavaScript tag with the <code>content</code> inside. Example:\n\n<pre>javascript_tag &quot;alert('All is good')&quot;</pre>\n<p>Returns: …\n"],["joined_includes_values","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-joined_includes_values","()","<p>Joins that are also marked for preloading. In which case we should just\neager load them. Note that this …\n"],["joins","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-joins","(*args)",""],["joins_per_query","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-joins_per_query","()","<p>Returns maximum number of joins in a single query.\n"],["json_escape","ERB::Util","ERB/Util.html#method-c-json_escape","(s)","<p>A utility method for escaping HTML entities in JSON strings using uXXXX\nJavaScript escape sequences for …\n"],["key?","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-key-3F","(key)",""],["key?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-key-3F","(key)","<p>Checks the hash for a key matching the argument passed in:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[&quot;key&quot;] ...</pre>\n"],["key?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-key-3F","(key)","<p>Checks the hash for a key matching the argument passed in:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[&quot;key&quot;] ...</pre>\n"],["key_matcher","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-key_matcher","(pattern, options)","<p>Add the namespace defined in the options to a pattern designed to match\nkeys. Implementations that support …\n"],["keys","ActiveModel::Errors","ActiveModel/Errors.html#method-i-keys","()","<p>Returns all message keys\n"],["kilobyte","Numeric","Numeric.html#method-i-kilobyte","()",""],["kilobytes","Numeric","Numeric.html#method-i-kilobytes","()",""],["kind","ActiveModel::Validator","ActiveModel/Validator.html#method-i-kind","()","<p>Return the kind for this validator.\n"],["kind","ActiveModel::Validator","ActiveModel/Validator.html#method-c-kind","()","<p>Returns the kind of the validator. Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">PresenceValidator</span>.<span class=\"ruby-identifier\">kind</span>   <span class=\"ruby-comment\"># =&gt; :presence</span>\n<span class=\"ruby-constant\">UniquenessValidator</span>.<span class=\"ruby-identifier\">kind</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["kind_of?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-kind_of-3F","(klass)",""],["klass","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-i-klass","()","<p>Returns the class for the macro.\n<p><code>composed_of :balance, :class_name =&gt; 'Money'</code> returns the\nMoney class ...\n"],["known_attributes","ActiveResource::Base","ActiveResource/Base.html#method-c-known_attributes","()","<p>Returns the list of known attributes for this resource, gathered from the\nprovided <code>schema</code> Attributes …\n"],["known_attributes","ActiveResource::Base","ActiveResource/Base.html#method-i-known_attributes","()","<p>This is a list of known attributes for this resource. Either gathered from\nthe provided <code>schema</code>, or from …\n"],["l","ActionView::Helpers::TranslationHelper","ActionView/Helpers/TranslationHelper.html#method-i-l","(*args)",""],["label","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-label","(method, text = nil, options = {}, &block)",""],["label","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-label","(object_name, method, content_or_options = nil, options = nil, &block)","<p>Returns a label tag tailored for labelling an input field for a specified\nattribute (identified by <code>method</code> …\n"],["label_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-label_tag","(name = nil, content_or_options = nil, options = nil, &block)","<p>Creates a label element. Accepts a block.\n<p>Options\n<p>Creates standard HTML attributes for the tag.\n"],["last","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-last","(*args)","<p>A convenience wrapper for <code>find(:last, *args)</code>. You can pass in\nall the same arguments to this method as …\n"],["last","ActiveResource::Base","ActiveResource/Base.html#method-c-last","(*args)","<p>A convenience wrapper for <code>find(:last, *args)</code>. You can pass in\nall the same arguments to this method as …\n"],["last","String","String.html#method-i-last","(limit = 1)","<p>Returns the last character of the string or the last <code>limit</code>\ncharacters.\n<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">last</span>     <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["last!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-last-21","()","<p>Same as <code>last</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found. Note that\n<code>last!</code> accepts no …\n"],["last_inserted_id","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-last_inserted_id","(result)",""],["limit","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-limit","(value)",""],["limit","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-limit","(limit)","<p>Limit the byte size of the string to a number of bytes without breaking\ncharacters. Usable when the storage …\n"],["limited_update_conditions","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-limited_update_conditions","(where_sql, quoted_table_name, quoted_primary_key)",""],["limited_update_conditions","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-limited_update_conditions","(where_sql, quoted_table_name, quoted_primary_key)",""],["limited_update_conditions","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-limited_update_conditions","(where_sql, quoted_table_name, quoted_primary_key)",""],["link_to","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-link_to","(*args, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code>. See the valid options …\n"],["link_to_function","ActionView::Helpers::JavaScriptHelper","ActionView/Helpers/JavaScriptHelper.html#method-i-link_to_function","(name, function, html_options={})","<p>Returns a link whose <code>onclick</code> handler triggers the passed\nJavaScript.\n<p>The helper receives a name, JavaScript …\n"],["link_to_if","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-link_to_if","(condition, name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> if <code>condition</code> is true, …\n"],["link_to_unless","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-link_to_unless","(condition, name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> unless <code>condition</code> is true, …\n"],["link_to_unless_current","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-link_to_unless_current","(name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> unless the current request …\n"],["listeners_for","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-listeners_for","(name)",""],["listening?","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-listening-3F","(name)",""],["ljust","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-ljust","(integer, padstr=' ')","<p>Works just like <code>String#ljust</code>, only integer specifies\ncharacters instead of bytes.\n<p>Example:\n\n<pre>&quot;¾ cup&quot;.mb_chars.rjust(8).to_s ...</pre>\n"],["load","ActiveResource::Base","ActiveResource/Base.html#method-i-load","(attributes, remove_root = false)","<p>A method to manually load attributes from a hash. Recursively loads\ncollections of resources.  This method …\n"],["load","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-i-load","()","<p>Loads the Unicode database and returns all the internal objects of\nUnicodeDatabase.\n"],["load_attributes_from_response","ActiveResource::Base","ActiveResource/Base.html#method-i-load_attributes_from_response","(response)",""],["loaded?","ActiveRecord::SessionStore::Session","ActiveRecord/SessionStore/Session.html#method-i-loaded-3F","()","<p>Has the session been loaded yet?\n"],["loaded?","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-i-loaded-3F","()",""],["local","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-local","(*args)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from given values. …\n"],["local_constant_names","Module","Module.html#method-i-local_constant_names","()","<p>Returns the names of the constants defined locally rather than the\nconstants themselves. See <code>local_constants</code> …\n"],["local_constants","Module","Module.html#method-i-local_constants","()","<p>Returns the constants that have been defined locally by this object and not\nin an ancestor. This method …\n"],["local_offset","DateTime","DateTime.html#method-c-local_offset","()","<p>DateTimes aren’t aware of DST rules, so use a consistent non-DST offset\nwhen creating a DateTime with …\n"],["local_time","Time","Time.html#method-c-local_time","(*args)","<p>Wraps class method <code>time_with_datetime_fallback</code> with\n<code>utc_or_local</code> set to <code>:local</code>.\n"],["local_to_utc","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-local_to_utc","(time, dst=true)","<p>Adjust the given time to the simultaneous time in UTC. Returns a Time.utc()\ninstance.\n"],["locale","ActionView::LookupContext::Details","ActionView/LookupContext/Details.html#method-i-locale","()","<p>Overload locale to return a symbol instead of array.\n"],["locale=","ActionView::LookupContext::Details","ActionView/LookupContext/Details.html#method-i-locale-3D","(value)","<p>Overload locale= to also set the I18n.locale. If the current I18n.config\nobject responds to original_config …\n"],["localize","ActionView::Helpers::TranslationHelper","ActionView/Helpers/TranslationHelper.html#method-i-localize","(*args)","<p>Delegates to <code>I18n.localize</code> with no additional functionality.\n"],["locals","ActionView::TestCase::Behavior","ActionView/TestCase/Behavior.html#method-i-locals","()",""],["localtime","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-localtime","()","<p>Returns a <code>Time.local()</code> instance of the simultaneous time in\nyour system’s <code>ENV['TZ']</code> zone\n"],["location","ActionController::Metal","ActionController/Metal.html#method-i-location","()",""],["location=","ActionController::Metal","ActionController/Metal.html#method-i-location-3D","(url)",""],["lock","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-lock","(locks = true)",""],["lock!","ActiveRecord::Locking::Pessimistic","ActiveRecord/Locking/Pessimistic.html#method-i-lock-21","(lock = true)","<p>Obtain a row lock on this record. Reloads the record to obtain the\nrequested lock. Pass an SQL locking …\n"],["locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column","()","<p>The version column used for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["locking_enabled?","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_enabled-3F","()","<p>Returns true if the <code>lock_optimistically</code> flag is set to true\n(which it is, by default) and the table includes …\n"],["log","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-log","(sql, name = \"SQL\", binds = [])",""],["log_process_action","ActiveRecord::Railties::ControllerRuntime::ClassMethods","ActiveRecord/Railties/ControllerRuntime/ClassMethods.html#method-i-log_process_action","(payload)",""],["log_subscribers","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-c-log_subscribers","()",""],["logged","ActiveSupport::LogSubscriber::TestHelper::MockLogger","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-logged","(level)",""],["logger","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-logger","()",""],["logger","ActionView::LogSubscriber","ActionView/LogSubscriber.html#method-i-logger","()","<p>TODO: Ideally, ActionView should have its own logger so it does not depend\non AC.logger\n"],["logger","ActiveRecord::Base","ActiveRecord/Base.html#method-c-logger","","<p>Accepts a logger conforming to the interface of Log4r or the default Ruby\n1.8+ Logger class, which is …\n"],["logger","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-i-logger","()",""],["logger","ActiveResource::Base","ActiveResource/Base.html#method-c-logger","","<p>The logger for diagnosing and tracing Active Resource calls.\n"],["logger","ActiveResource::LogSubscriber","ActiveResource/LogSubscriber.html#method-i-logger","()",""],["logger","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-c-logger","()",""],["logger","Rails","Rails.html#method-c-logger","()",""],["logger=","Rails","Rails.html#method-c-logger-3D","(logger)",""],["lookup_ancestors","ActiveModel::Translation","ActiveModel/Translation.html#method-i-lookup_ancestors","()","<p>When localizing a string, it goes through the lookup returned by this\nmethod, which is used in ActiveModel::Name#human …\n"],["lookup_store","ActiveSupport::Cache","ActiveSupport/Cache.html#method-c-lookup_store","(*store_option)","<p>Creates a new CacheStore object according to the given options.\n<p>If no arguments are passed to this method, …\n"],["lstrip","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-lstrip","()","<p>Strips entire range of Unicode whitespace from the left of the string.\n"],["mail","ActionMailer::Base","ActionMailer/Base.html#method-i-mail","(headers={}, &block)","<p>The main method that creates the message and renders the email templates.\nThere are two ways to call …\n"],["mail_to","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-mail_to","(email_address, name = nil, html_options = {})","<p>Creates a mailto link tag to the specified <code>email_address</code>,\nwhich is also used as the name of the link …\n"],["mailer_name","ActionMailer::Base","ActionMailer/Base.html#method-i-mailer_name","()",""],["mailer_name","ActionMailer::Base","ActionMailer/Base.html#method-c-mailer_name","()",""],["many?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-many-3F","()",""],["many?","Enumerable","Enumerable.html#method-i-many-3F","(&block)","<p>Returns true if the collection has more than 1 element. Functionally\nequivalent to collection.size &gt; …\n"],["mark_for_destruction","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-mark_for_destruction","()","<p>Marks this record to be destroyed as part of the parents save transaction.\nThis does <em>not</em> actually destroy …\n"],["marked_for_destruction?","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-marked_for_destruction-3F","()","<p>Returns whether or not this record will be destroyed as part of the parents\nsave transaction.\n<p>Only useful …\n"],["marshal_dump","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-marshal_dump","()",""],["marshal_load","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-marshal_load","(variables)",""],["mass_assignment_authorizer","ActiveModel::MassAssignmentSecurity","ActiveModel/MassAssignmentSecurity.html#method-i-mass_assignment_authorizer","(role = :default)",""],["mass_assignment_options","ActiveRecord::Base","ActiveRecord/Base.html#method-i-mass_assignment_options","()",""],["mass_assignment_role","ActiveRecord::Base","ActiveRecord/Base.html#method-i-mass_assignment_role","()",""],["match","ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html#method-i-match","(method_name)",""],["match","ActiveRecord::DynamicFinderMatch","ActiveRecord/DynamicFinderMatch.html#method-c-match","(method)",""],["match","ActiveRecord::DynamicScopeMatch","ActiveRecord/DynamicScopeMatch.html#method-c-match","(method)",""],["match","HTML::Selector","HTML/Selector.html#method-i-match","(element, first_only = false)","<p>Matches an element against the selector.\n<p>For a simple selector this method returns an array with the element …\n"],["mattr_accessor","Module","Module.html#method-i-mattr_accessor","(*syms)","<p>Extends the module object with module and instance accessors for class\nattributes, just like the native …\n"],["mattr_reader","Module","Module.html#method-i-mattr_reader","(*syms)",""],["mattr_writer","Module","Module.html#method-i-mattr_writer","(*syms)",""],["maximum","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-maximum","(column_name, options = {})","<p>Calculates the maximum value on a given column. The value is returned with\nthe same data type of the …\n"],["mb_chars","String","String.html#method-i-mb_chars","()","<p>Multibyte proxy\n<p><code>mb_chars</code> is a multibyte safe proxy for string methods.\n<p>In Ruby 1.8 and older it creates …\n"],["measure","ActiveSupport::Testing::Performance::Metrics::CpuTime","ActiveSupport/Testing/Performance/Metrics/CpuTime.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::GcRuns","ActiveSupport/Testing/Performance/Metrics/GcRuns.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::GcTime","ActiveSupport/Testing/Performance/Metrics/GcTime.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::Memory","ActiveSupport/Testing/Performance/Metrics/Memory.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::Objects","ActiveSupport/Testing/Performance/Metrics/Objects.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::ProcessTime","ActiveSupport/Testing/Performance/Metrics/ProcessTime.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::Time","ActiveSupport/Testing/Performance/Metrics/Time.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::UserTime","ActiveSupport/Testing/Performance/Metrics/UserTime.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::WallTime","ActiveSupport/Testing/Performance/Metrics/WallTime.html#method-i-measure","()",""],["measure_mode","ActiveSupport::Testing::Performance::Metrics::Base","ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-measure_mode","()",""],["megabyte","Numeric","Numeric.html#method-i-megabyte","()",""],["megabytes","Numeric","Numeric.html#method-i-megabytes","()",""],["member?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-member-3F","(key)",""],["member?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-member-3F","(key)",""],["memoize","ActiveSupport::Memoizable","ActiveSupport/Memoizable.html#method-i-memoize","(*symbols)",""],["memoize_all","ActiveSupport::Memoizable::InstanceMethods","ActiveSupport/Memoizable/InstanceMethods.html#method-i-memoize_all","()",""],["memoized_ivar_for","ActiveSupport::Memoizable","ActiveSupport/Memoizable.html#method-c-memoized_ivar_for","(symbol)",""],["merge","ActiveRecord::SpawnMethods","ActiveRecord/SpawnMethods.html#method-i-merge","(r)",""],["merge","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-merge","(hash)","<p>Merges the instantized and the specified hashes together, giving precedence\nto the values from the second …\n"],["merge","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-merge","(hash)","<p>Merges the instantized and the specified hashes together, giving precedence\nto the values from the second …\n"],["merge!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-merge-21","(other_hash)",""],["merge!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-merge-21","(other_hash)",""],["method_for_action","ActionController::Compatibility","ActionController/Compatibility.html#method-i-method_for_action","(action_name)",""],["method_for_action","ActionController::ImplicitRender","ActionController/ImplicitRender.html#method-i-method_for_action","(action_name)",""],["method_missing","ActiveModel::AttributeMethods","ActiveModel/AttributeMethods.html#method-i-method_missing","(method_id, *args, &block)","<p>Allows access to the object attributes, which are held in the\n<code>@attributes</code> hash, as though they were first-class …\n"],["method_missing","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-method_missing","(method, *arguments, &block)",""],["method_missing","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-method_missing","(method, *args, &block)",""],["method_missing","ActiveSupport::LogSubscriber::TestHelper::MockLogger","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-method_missing","(level, message)",""],["method_missing","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-method_missing","(method, *args, &block)","<p>Forward all undefined methods to the wrapped string.\n"],["method_missing","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-method_missing","(name, *args)",""],["method_missing","ActiveSupport::StringInquirer","ActiveSupport/StringInquirer.html#method-i-method_missing","(method_name, *arguments)",""],["method_missing","ActiveSupport::Testing::ProxyTestResult","ActiveSupport/Testing/ProxyTestResult.html#method-i-method_missing","(name, *args)",""],["method_missing","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-method_missing","(sym, *args, &block)","<p>Send the missing method to <code>time</code> instance, and wrap result in a\nnew TimeWithZone with the existing <code>time_zone</code> …\n"],["method_name","ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html#method-i-method_name","(attr_name)",""],["method_names","Module","Module.html#method-i-method_names","(*args)",""],["middleware","ActionController::Metal","ActionController/Metal.html#method-c-middleware","()","<p>Alias for middleware_stack\n"],["middleware","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-middleware","()","<p>Middleware class can be inserted as a Rack handler to be local cache for\nthe duration of request.\n"],["midnight","Date","Date.html#method-i-midnight","()",""],["midnight","DateTime","DateTime.html#method-i-midnight","()",""],["midnight","Time","Time.html#method-i-midnight","()",""],["migrate","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-migrate","(direction)","<p>Execute this migration in the named direction\n"],["migrate","ActiveRecord::Migration","ActiveRecord/Migration.html#method-c-migrate","(direction)",""],["migrations_paths","ActiveRecord::Schema","ActiveRecord/Schema.html#method-i-migrations_paths","()",""],["mime_type","ActionView::Template","ActionView/Template.html#method-i-mime_type","()",""],["mime_type","ActiveResource::Formats::JsonFormat","ActiveResource/Formats/JsonFormat.html#method-i-mime_type","()",""],["mime_type","ActiveResource::Formats::XmlFormat","ActiveResource/Formats/XmlFormat.html#method-i-mime_type","()",""],["minimum","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-minimum","(column_name, options = {})","<p>Calculates the minimum value on a given column.  The value is returned with\nthe same data type of the …\n"],["minus_with_coercion","Time","Time.html#method-i-minus_with_coercion","(other)","<p>Time#- can also be used to determine the number of seconds between two Time\ninstances. We’re layering …\n"],["minus_without_coercion","Time","Time.html#method-i-minus_without_coercion","(other)",""],["minus_without_duration","Time","Time.html#method-i-minus_without_duration","(other)",""],["minute","Numeric","Numeric.html#method-i-minute","()",""],["minutes","Numeric","Numeric.html#method-i-minutes","()",""],["missing_name","NameError","NameError.html#method-i-missing_name","()","<p>Extract the name of the missing constant from the exception message.\n"],["missing_name?","NameError","NameError.html#method-i-missing_name-3F","(name)","<p>Was this exception raised because the given name was missing?\n"],["model_name","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-c-model_name","()",""],["model_name","ActiveModel::Naming","ActiveModel/Naming.html#method-i-model_name","()","<p>Returns an ActiveModel::Name object for module. It can be used to retrieve\nall kinds of naming-related …\n"],["modules_for_helpers","ActionController::Helpers::ClassMethods","ActionController/Helpers/ClassMethods.html#method-i-modules_for_helpers","(args)","<p>Overwrite modules_for_helpers to accept :all as argument, which loads all\nhelpers in helpers_path.\n<p>Parameters …\n"],["monday","Date","Date.html#method-i-monday","()",""],["monday","Time","Time.html#method-i-monday","()",""],["month","Integer","Integer.html#method-i-month","()",""],["months","Integer","Integer.html#method-i-months","()","<p>Enables the use of time calculations and declarations, like 45.minutes +\n2.hours + 4.years.\n<p>These methods …\n"],["months_ago","Date","Date.html#method-i-months_ago","(months)","<p>Returns a new Date/DateTime representing the time a number of specified\nmonths ago.\n"],["months_ago","Time","Time.html#method-i-months_ago","(months)","<p>Returns a new Time representing the time a number of specified months ago\n"],["months_since","Date","Date.html#method-i-months_since","(months)","<p>Returns a new Date/DateTime representing the time a number of specified\nmonths in the future.\n"],["months_since","Time","Time.html#method-i-months_since","(months)","<p>Returns a new Time representing the time a number of specified months in\nthe future\n"],["ms","Benchmark","Benchmark.html#method-c-ms","()",""],["multipart=","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-multipart-3D","(multipart)",""],["multiple_of?","Integer","Integer.html#method-i-multiple_of-3F","(number)","<p>Check whether the integer is evenly divisible by the argument.\n"],["mute","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-mute","()","<p>Silence the logger within a block.\n"],["mysql2_connection","ActiveRecord::Base","ActiveRecord/Base.html#method-c-mysql2_connection","(config)","<p>Establishes a connection to the database that’s used by all Active Record\nobjects.\n"],["name","ActiveSupport::Testing::Performance::Metrics::Base","ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-name","()",""],["name","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-c-name","()",""],["native_database_types","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-native_database_types","()",""],["native_database_types","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-native_database_types","()","<p>Returns a Hash of mappings from the abstract data types to the native\ndatabase types.  See TableDefinition#column …\n"],["navigation_behavior","ActionController::Responder","ActionController/Responder.html#method-i-navigation_behavior","(error)","<p>This is the common behavior for formats associated with browsing, like\n:html, :iphone and so forth.\n"],["navigation_location","ActionController::Responder","ActionController/Responder.html#method-i-navigation_location","()",""],["nested_under_indifferent_access","Hash","Hash.html#method-i-nested_under_indifferent_access","()","<p>Called when object is nested under an object that receives\n#with_indifferent_access. This method will …\n"],["new","ActionController::Caching::Actions::ActionCachePath","ActionController/Caching/Actions/ActionCachePath.html#method-c-new","(controller, options = {}, infer_extension = true)","<p>If <code>infer_extension</code> is true, the cache path extension is looked\nup from the request’s path and format. …\n"],["new","ActionController::Metal","ActionController/Metal.html#method-c-new","()",""],["new","ActionController::Middleware","ActionController/Middleware.html#method-c-new","(app)",""],["new","ActionController::Middleware","ActionController/Middleware.html#method-c-new","(app)",""],["new","ActionController::Middleware::ActionMiddleware","ActionController/Middleware/ActionMiddleware.html#method-c-new","(controller, app)",""],["new","ActionController::Responder","ActionController/Responder.html#method-c-new","(controller, resources, options={})",""],["new","ActionMailer::Base","ActionMailer/Base.html#method-c-new","(method_name=nil, *args)","<p>Instantiate a new mailer object. If <code>method_name</code> is not\n<code>nil</code>, the mailer will be initialized according …\n"],["new","ActionView::FileSystemResolver","ActionView/FileSystemResolver.html#method-c-new","(path, pattern=nil)",""],["new","ActionView::FixtureResolver","ActionView/FixtureResolver.html#method-c-new","(hash = {}, pattern=nil)",""],["new","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-c-new","(config, asset_paths)",""],["new","ActionView::Helpers::AtomFeedHelper::AtomBuilder","ActionView/Helpers/AtomFeedHelper/AtomBuilder.html#method-c-new","(xml)",""],["new","ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html#method-c-new","(xml, view, feed_options = {})",""],["new","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-c-new","(object_name, object, template, options, proc)",""],["new","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-c-new","(object_name, method_name, template_object, object = nil)",""],["new","ActionView::Helpers::NumberHelper::InvalidNumberError","ActionView/Helpers/NumberHelper/InvalidNumberError.html#method-c-new","(number)",""],["new","ActionView::Renderer","ActionView/Renderer.html#method-c-new","(lookup_context)",""],["new","ActionView::Resolver","ActionView/Resolver.html#method-c-new","()",""],["new","ActionView::Resolver::Path","ActionView/Resolver/Path.html#method-c-new","(name, prefix, partial, virtual)",""],["new","ActionView::Template","ActionView/Template.html#method-c-new","(source, identifier, handler, details)",""],["new","ActionView::TestCase::Behavior::ClassMethods","ActionView/TestCase/Behavior/ClassMethods.html#method-i-new","(*)",""],["new","ActionView::TestCase::TestController","ActionView/TestCase/TestController.html#method-c-new","()",""],["new","ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html#method-c-new","(options = {})",""],["new","ActiveModel::BlockValidator","ActiveModel/BlockValidator.html#method-c-new","(options, &block)",""],["new","ActiveModel::EachValidator","ActiveModel/EachValidator.html#method-c-new","(options)","<p>Returns a new validator instance. All options will be available via the\n<code>options</code> reader, however the  …\n"],["new","ActiveModel::Errors","ActiveModel/Errors.html#method-c-new","(base)","<p>Pass in the instance of the object that is using the errors object.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">initialize</span>\n    <span class=\"ruby-operator\">...</span>\n</pre>\n"],["new","ActiveModel::Name","ActiveModel/Name.html#method-c-new","(klass, namespace = nil, name = nil)",""],["new","ActiveModel::Observer","ActiveModel/Observer.html#method-c-new","()","<p>Start observing the declared classes and their subclasses.\n"],["new","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-c-new","(model_class, *args)",""],["new","ActiveModel::Validations::AcceptanceValidator","ActiveModel/Validations/AcceptanceValidator.html#method-c-new","(options)",""],["new","ActiveModel::Validations::LengthValidator","ActiveModel/Validations/LengthValidator.html#method-c-new","(options)",""],["new","ActiveModel::Validator","ActiveModel/Validator.html#method-c-new","(options)","<p>Accepts options that will be made available through the\n<code>options</code> reader.\n"],["new","ActiveRecord::AttributeAssignmentError","ActiveRecord/AttributeAssignmentError.html#method-c-new","(message, exception, attribute)",""],["new","ActiveRecord::Base","ActiveRecord/Base.html#method-c-new","(attributes = nil, options = {})","<p>New objects can be instantiated as either empty (pass no construction\nparameter) or pre-set with attributes …\n"],["new","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-c-new","(pools = {})",""],["new","ActiveRecord::ConnectionAdapters::ConnectionManagement","ActiveRecord/ConnectionAdapters/ConnectionManagement.html#method-c-new","(app)",""],["new","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-c-new","(spec)","<p>Creates a new ConnectionPool object. <code>spec</code> is a\nConnectionSpecification object which describes database …\n"],["new","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-c-new","(connection, logger, connection_parameters, config)","<p>Initializes and connects a PostgreSQL adapter.\n"],["new","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-c-new","(connection, logger, config)",""],["new","ActiveRecord::ConnectionAdapters::SQLiteAdapter::Version","ActiveRecord/ConnectionAdapters/SQLiteAdapter/Version.html#method-c-new","(version_string)",""],["new","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-c-new","(table_name, base)",""],["new","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-c-new","(base)",""],["new","ActiveRecord::DynamicFinderMatch","ActiveRecord/DynamicFinderMatch.html#method-c-new","(finder, instantiator, bang, attribute_names)",""],["new","ActiveRecord::DynamicScopeMatch","ActiveRecord/DynamicScopeMatch.html#method-c-new","(scope, attribute_names)",""],["new","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-new","(connection, table_name, class_name, fixture_path)",""],["new","ActiveRecord::HasManyThroughNestedAssociationsAreReadonly","ActiveRecord/HasManyThroughNestedAssociationsAreReadonly.html#method-c-new","(owner, reflection)",""],["new","ActiveRecord::IdentityMap::Middleware","ActiveRecord/IdentityMap/Middleware.html#method-c-new","(app)",""],["new","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-c-new","()",""],["new","ActiveRecord::Migration","ActiveRecord/Migration.html#method-c-new","()",""],["new","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-c-new","(delegate = nil)",""],["new","ActiveRecord::MigrationProxy","ActiveRecord/MigrationProxy.html#method-c-new","(name, version, filename)",""],["new","ActiveRecord::MultiparameterAssignmentErrors","ActiveRecord/MultiparameterAssignmentErrors.html#method-c-new","(errors)",""],["new","ActiveRecord::QueryCache","ActiveRecord/QueryCache.html#method-c-new","(app)",""],["new","ActiveRecord::RecordInvalid","ActiveRecord/RecordInvalid.html#method-c-new","(record)",""],["new","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-c-new","(macro, name, options, active_record)",""],["new","ActiveRecord::Relation","ActiveRecord/Relation.html#method-c-new","(klass, table)",""],["new","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-new","(*args, &block)",""],["new","ActiveRecord::Result","ActiveRecord/Result.html#method-c-new","(columns, rows)",""],["new","ActiveRecord::SessionStore::Session","ActiveRecord/SessionStore/Session.html#method-c-new","(attributes = nil, options = {})",""],["new","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-c-new","(attributes)","<p>Look for normal and marshaled data, self.find_by_session_id’s way of\ntelling us to postpone unmarshaling …\n"],["new","ActiveRecord::Validations::UniquenessValidator","ActiveRecord/Validations/UniquenessValidator.html#method-c-new","(options)",""],["new","ActiveRecord::WrappedDatabaseException","ActiveRecord/WrappedDatabaseException.html#method-c-new","(message, original_exception)",""],["new","ActiveResource::Base","ActiveResource/Base.html#method-c-new","(attributes = {}, persisted = false)","<p>Constructor method for new resources; the optional <code>attributes</code>\nparameter takes a hash of attributes for …\n"],["new","ActiveResource::Connection","ActiveResource/Connection.html#method-c-new","(site, format = ActiveResource::Formats::JsonFormat)","<p>The <code>site</code> parameter is required and will set the\n<code>site</code> attribute to the URI for the remote resource service. …\n"],["new","ActiveResource::Request","ActiveResource/Request.html#method-c-new","(method, path, body = nil, headers = {})",""],["new","ActiveResource::Response","ActiveResource/Response.html#method-c-new","(body, message = 200, headers = {})",""],["new","ActiveResource::SSLError","ActiveResource/SSLError.html#method-c-new","(message)",""],["new","ActiveResource::TimeoutError","ActiveResource/TimeoutError.html#method-c-new","(message)",""],["new","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-c-new","()",""],["new","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-c-new","(log, level = DEBUG)",""],["new","ActiveSupport::Cache::CompressedMemCacheStore","ActiveSupport/Cache/CompressedMemCacheStore.html#method-c-new","(*args)",""],["new","ActiveSupport::Cache::Entry","ActiveSupport/Cache/Entry.html#method-c-new","(value, options = {})","<p>Create a new cache entry for the specified value. Options supported are\n<code>:compress</code>, <code>:compress_threshold</code> …\n"],["new","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-c-new","(cache_path, options = nil)",""],["new","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-c-new","(*addresses)","<p>Creates a new MemCacheStore object, with the given memcached server\naddresses. Each address is either …\n"],["new","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-c-new","(options = nil)",""],["new","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-c-new","(options = nil)","<p>Create a new cache. The options will be passed to any write method calls\nexcept for :namespace which …\n"],["new","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-c-new","()",""],["new","ActiveSupport::Cache::SynchronizedMemoryStore","ActiveSupport/Cache/SynchronizedMemoryStore.html#method-c-new","(*args)",""],["new","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-new","(name)",""],["new","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-c-new","()",""],["new","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-c-new","()","<p>@watching is a stack of lists of constants being watched. For instance, if\nparent.rb is autoloaded, the …\n"],["new","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-c-new","(paths, calculate=false, &block)",""],["new","ActiveSupport::FileWatcher","ActiveSupport/FileWatcher.html#method-c-new","()",""],["new","ActiveSupport::FileWatcher::Backend","ActiveSupport/FileWatcher/Backend.html#method-c-new","(path, watcher)",""],["new","ActiveSupport::Gzip::Stream","ActiveSupport/Gzip/Stream.html#method-c-new","(*)",""],["new","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-c-new","(constructor = {})",""],["new","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-c-new","(constructor = {})",""],["new","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-c-new","()",""],["new","ActiveSupport::InheritableOptions","ActiveSupport/InheritableOptions.html#method-c-new","(parent = nil)",""],["new","ActiveSupport::JSON::Encoding::Encoder","ActiveSupport/JSON/Encoding/Encoder.html#method-c-new","(options = nil)",""],["new","ActiveSupport::LogSubscriber::TestHelper::MockLogger","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-c-new","(level = DEBUG)",""],["new","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-c-new","(secret, cipher = 'aes-256-cbc')",""],["new","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-c-new","(secret, digest = 'SHA1')",""],["new","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-c-new","(string)","<p>Creates a new Chars instance by wrapping <em>string</em>.\n"],["new","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-new","()",""],["new","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-c-new","(name, start, ending, transaction_id, payload)",""],["new","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-c-new","()",""],["new","ActiveSupport::Notifications::Instrumenter","ActiveSupport/Notifications/Instrumenter.html#method-c-new","(notifier)",""],["new","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-c-new","(*)",""],["new","ActiveSupport::SafeBuffer::SafeConcatError","ActiveSupport/SafeBuffer/SafeConcatError.html#method-c-new","()",""],["new","ActiveSupport::Testing::Performance::Benchmarker","ActiveSupport/Testing/Performance/Benchmarker.html#method-c-new","(*args)",""],["new","ActiveSupport::Testing::Performance::Metrics::Base","ActiveSupport/Testing/Performance/Metrics/Base.html#method-c-new","()",""],["new","ActiveSupport::Testing::Performance::Metrics::CpuTime","ActiveSupport/Testing/Performance/Metrics/CpuTime.html#method-c-new","(*args)",""],["new","ActiveSupport::Testing::Performance::Performer","ActiveSupport/Testing/Performance/Performer.html#method-c-new","(harness, metric)",""],["new","ActiveSupport::Testing::Performance::Profiler","ActiveSupport/Testing/Performance/Profiler.html#method-c-new","(*args)",""],["new","ActiveSupport::Testing::ProxyTestResult","ActiveSupport/Testing/ProxyTestResult.html#method-c-new","()",""],["new","ActiveSupport::Testing::RemoteError","ActiveSupport/Testing/RemoteError.html#method-c-new","(exception)",""],["new","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-c-new","(utc_time, time_zone, local_time = nil, period = nil)",""],["new","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-new","(name)","<p>Return a TimeZone instance with the given name, or <code>nil</code> if no\nsuch TimeZone instance exists. (This exists …\n"],["new","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-new","(name, utc_offset = nil, tzinfo = nil)","<p>Create a new TimeZone object with the given name and offset. The offset is\nthe number of seconds that …\n"],["new","ArJdbcMySQL::Error","ArJdbcMySQL/Error.html#method-c-new","(msg)",""],["new","HTML::Selector","HTML/Selector.html#method-c-new","(selector, *values)","<p>Creates a new selector from a CSS 2 selector expression.\n<p>The first argument is the selector expression. …\n"],["new?","ActiveResource::Base","ActiveResource/Base.html#method-i-new-3F","()","<p>Returns <code>true</code> if this object hasn’t yet been saved, otherwise,\nreturns <code>false</code>.\n<p>Examples\n\n<pre>not_new = Computer.create(:brand ...</pre>\n"],["new_constants","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-i-new_constants","()","<p>return a list of new constants found since the last call to\nwatch_namespaces\n"],["new_element_path","ActiveResource::Base","ActiveResource/Base.html#method-i-new_element_path","()",""],["new_element_path","ActiveResource::Base","ActiveResource/Base.html#method-c-new_element_path","(prefix_options = {})","<p>Gets the new element path for REST resources.\n<p>Options\n<p><code>prefix_options</code> - A hash to add a prefix to the request ...\n"],["new_from_hash_copying_default","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-c-new_from_hash_copying_default","(hash)",""],["new_from_hash_copying_default","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-c-new_from_hash_copying_default","(hash)",""],["new_record?","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-new_record-3F","()","<p>Returns true if this object hasn’t been saved yet – that is, a record for\nthe object doesn’t exist in …\n"],["new_record?","ActiveResource::Base","ActiveResource/Base.html#method-i-new_record-3F","()",""],["next_element","HTML::Selector","HTML/Selector.html#method-i-next_element","(element, name = nil)","<p>Return the next element after this one. Skips sibling text nodes.\n<p>With the <code>name</code> argument, returns the …\n"],["next_migration_number","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-next_migration_number","(number)",""],["next_month","Date","Date.html#method-i-next_month","()","<p>Shorthand for months_since(1)\n"],["next_month","Time","Time.html#method-i-next_month","()","<p>Short-hand for months_since(1)\n"],["next_selector","HTML::Selector","HTML/Selector.html#method-i-next_selector","(statement, values)","<p>Called to create a dependent selector (sibling, descendant, etc). Passes\nthe remainder of the statement …\n"],["next_week","Date","Date.html#method-i-next_week","(day = :monday)","<p>Returns a new Date/DateTime representing the start of the given day in next\nweek (default is Monday). …\n"],["next_week","Time","Time.html#method-i-next_week","(day = :monday)","<p>Returns a new Time representing the start of the given day in next week\n(default is Monday).\n"],["next_year","Date","Date.html#method-i-next_year","()","<p>Shorthand for years_since(1)\n"],["next_year","Time","Time.html#method-i-next_year","()","<p>Short-hand for years_since(1)\n"],["nonce","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-nonce","(secret_key, time = Time.now)","<p>Uses an MD5 digest based on time to generate a value to be used only once.\n<p>A server-specified data string …\n"],["normalize","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-normalize","(form = nil)","<p>Returns the KC normalization of the string by default. NFKC is considered\nthe best normalization form …\n"],["normalize","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-normalize","(string, form=nil)","<p>Returns the KC normalization of the string by default. NFKC is considered\nthe best normalization form …\n"],["notify_observers","ActiveModel::Observing::ClassMethods","ActiveModel/Observing/ClassMethods.html#method-i-notify_observers","(*arg)","<p>Notify list of observers of a change.\n"],["now","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-now","()","<p>Returns an ActiveSupport::TimeWithZone instance representing the current\ntime in the time zone represented …\n"],["nth_child","HTML::Selector","HTML/Selector.html#method-i-nth_child","(a, b, of_type, reverse)","<p>Returns a lambda that can match an element against the nth-child pseudo\nclass, given the following arguments: …\n"],["number_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-number_field","(object_name, method, options = {})","<p>Returns an input tag of type “number”.\n<p>Options\n<p>Accepts same options as number_field_tag\n"],["number_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-number_field_tag","(name, value = nil, options = {})","<p>Creates a number field.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["number_to_currency","ActionView::Helpers::NumberHelper","ActionView/Helpers/NumberHelper.html#method-i-number_to_currency","(number, options = {})","<p>Formats a <code>number</code> into a currency string (e.g., $13.65). You\ncan customize the format in the <code>options</code> hash. …\n"],["number_to_human","ActionView::Helpers::NumberHelper","ActionView/Helpers/NumberHelper.html#method-i-number_to_human","(number, options = {})","<p>Pretty prints (formats and approximates) a number in a way it is more\nreadable by humans (eg.: 1200000000 …\n"],["number_to_human_size","ActionView::Helpers::NumberHelper","ActionView/Helpers/NumberHelper.html#method-i-number_to_human_size","(number, options = {})","<p>Formats the bytes in <code>number</code> into a more understandable\nrepresentation (e.g., giving it 1500 yields 1.5 …\n"],["number_to_percentage","ActionView::Helpers::NumberHelper","ActionView/Helpers/NumberHelper.html#method-i-number_to_percentage","(number, options = {})","<p>Formats a <code>number</code> as a percentage string (e.g., 65%). You can\ncustomize the format in the <code>options</code> hash. …\n"],["number_to_phone","ActionView::Helpers::NumberHelper","ActionView/Helpers/NumberHelper.html#method-i-number_to_phone","(number, options = {})","<p>Formats a <code>number</code> into a US phone number (e.g., (555)\n123-9876). You can customize the format in the  …\n"],["number_with_delimiter","ActionView::Helpers::NumberHelper","ActionView/Helpers/NumberHelper.html#method-i-number_with_delimiter","(number, options = {})","<p>Formats a <code>number</code> with grouped thousands using\n<code>delimiter</code> (e.g., 12,324). You can customize the format …\n"],["number_with_precision","ActionView::Helpers::NumberHelper","ActionView/Helpers/NumberHelper.html#method-i-number_with_precision","(number, options = {})","<p>Formats a <code>number</code> with the specified level of\n<code>:precision</code> (e.g., 112.32 has a precision of 2 if\n<code>:significant</code> …\n"],["object","ActionView::Helpers::ActiveModelInstanceTag","ActionView/Helpers/ActiveModelInstanceTag.html#method-i-object","()",""],["observe","ActiveModel::Observer","ActiveModel/Observer.html#method-c-observe","(*models)","<p>Attaches the observer to the supplied model classes.\n"],["observed_class","ActiveModel::Observer","ActiveModel/Observer.html#method-c-observed_class","()","<p>The class observed by default is inferred from the observer’s class name:\n\n<pre>assert_equal Person, PersonObserver.observed_class</pre>\n"],["observed_classes","ActiveModel::Observer","ActiveModel/Observer.html#method-c-observed_classes","()","<p>Returns an array of Classes to observe.\n<p>You can override this instead of using the <code>observe</code> helper.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["observed_classes","ActiveRecord::Observer","ActiveRecord/Observer.html#method-i-observed_classes","()",""],["observer_class_for","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-observer_class_for","(observer)",""],["observer_instances","ActiveModel::Observing::ClassMethods","ActiveModel/Observing/ClassMethods.html#method-i-observer_instances","()","<p>Gets the current observer instances.\n"],["observers","ActiveModel::Observing::ClassMethods","ActiveModel/Observing/ClassMethods.html#method-i-observers","()","<p>Gets an array of observers observing this model. The array also provides\n<code>enable</code> and <code>disable</code> methods that …\n"],["observers=","ActiveModel::Observing::ClassMethods","ActiveModel/Observing/ClassMethods.html#method-i-observers-3D","(*values)","<p>Active Model Observers Activation\n<p>Activates the observers assigned. Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">ORM</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Observing</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["odd?","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-i-odd-3F","()",""],["offset","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-offset","(value)",""],["on_cdata_block","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_cdata_block","(string)",""],["on_characters","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_characters","(string)",""],["on_end_document","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_document","()",""],["on_end_element","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_element","(name)",""],["on_load","ActiveSupport","ActiveSupport.html#method-c-on_load","(name, options = {}, &block)",""],["on_start_document","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_document","()",""],["on_start_element","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_element","(name, attrs = {})",""],["only","ActiveRecord::SpawnMethods","ActiveRecord/SpawnMethods.html#method-i-only","(*onlies)","<p>Removes any condition from the query other than the one(s) specified in\n<code>onlies</code>.\n<p>Example:\n\n<pre>Post.order('id ...</pre>\n"],["only_child","HTML::Selector","HTML/Selector.html#method-i-only_child","(of_type)","<p>Creates a only child lambda. Pass <code>of-type</code> to only look at\nelements of its type.\n"],["opaque","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-opaque","(secret_key)","<p>Opaque based on random generation - but changing each request?\n"],["open_log","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-i-open_log","(log, mode)",""],["open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-open_transactions","()",""],["option_groups_from_collection_for_select","ActionView::Helpers::FormOptionsHelper","ActionView/Helpers/FormOptionsHelper.html#method-i-option_groups_from_collection_for_select","(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil)","<p>Returns a string of <code>&lt;option&gt;</code> tags, like\n<code>options_from_collection_for_select</code>, but groups them by …\n"],["options_for","ActiveSupport::JSON::Encoding::Encoder","ActiveSupport/JSON/Encoding/Encoder.html#method-i-options_for","(value)",""],["options_for_select","ActionView::Helpers::FormOptionsHelper","ActionView/Helpers/FormOptionsHelper.html#method-i-options_for_select","(container, selected = nil)","<p>Accepts a container (hash, array, enumerable, your type) and returns a\nstring of option tags. Given a …\n"],["options_from_collection_for_select","ActionView::Helpers::FormOptionsHelper","ActionView/Helpers/FormOptionsHelper.html#method-i-options_from_collection_for_select","(collection, value_method, text_method, selected = nil)","<p>Returns a string of option tags that have been compiled by iterating over\nthe <code>collection</code> and assigning …\n"],["options_include_default?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-options_include_default-3F","(options)",""],["ord","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-ord","()","<p>Returns the codepoint of the first character in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'こんにちは'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">ord</span> <span class=\"ruby-comment\"># =&gt; 12371</span>\n</pre>\n"],["ord","String","String.html#method-i-ord","()","<p>Returns the codepoint of the first character of the string, assuming a\nsingle-byte character encoding: …\n"],["order","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-order","(*args)",""],["ordinalize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-ordinalize","(number)","<p>Turns a number into an ordinal string used to denote the position in an\nordered sequence such as 1st, …\n"],["ordinalize","Integer","Integer.html#method-i-ordinalize","()","<p>Ordinalize turns a number into an ordinal string used to denote the\nposition in an ordered sequence such …\n"],["orig_delete","ActiveResource::CustomMethods","ActiveResource/CustomMethods.html#method-c-orig_delete","(custom_method_name, options = {})",""],["original_concat","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-original_concat","(value)",""],["output_filename","ActiveSupport::Testing::Performance::Benchmarker","ActiveSupport/Testing/Performance/Benchmarker.html#method-i-output_filename","()",""],["output_filename","ActiveSupport::Testing::Performance::Performer","ActiveSupport/Testing/Performance/Performer.html#method-i-output_filename","()",""],["output_filename","ActiveSupport::Testing::Performance::Profiler","ActiveSupport/Testing/Performance/Profiler.html#method-i-output_filename","(printer_class)",""],["outside_transaction?","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-outside_transaction-3F","()","<p>Checks whether there is currently no transaction active. This is done by\nquerying the database driver, …\n"],["outside_transaction?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-outside_transaction-3F","()",""],["overlaps?","Range","Range.html#method-i-overlaps-3F","(other)","<p>Compare two ranges and see if they overlap each other\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">overlaps?</span>(<span class=\"ruby-value\">4</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">6</span>) <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">overlaps?</span>(<span class=\"ruby-value\">7</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">9</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["param_key","ActiveModel::Naming","ActiveModel/Naming.html#method-c-param_key","(record_or_class)","<p>Returns string to use for params names. It differs for namespaced models\nregarding whether it’s inside …\n"],["parameterize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-parameterize","(string, sep = '-')","<p>Replaces special characters in a string so that it may be used as part of a\n‘pretty’ URL.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parameterize","String","String.html#method-i-parameterize","(sep = '-')","<p>Replaces special characters in a string so that it may be used as part of a\n‘pretty’ URL.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["paramify_values","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-paramify_values","(hash_or_array_or_value)",""],["params","ActionController::Metal","ActionController/Metal.html#method-i-params","()",""],["params=","ActionController::Metal","ActionController/Metal.html#method-i-params-3D","(val)",""],["parent","Module","Module.html#method-i-parent","()","<p>Returns the module which contains this one according to its name.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M</span>\n  <span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">N</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">X</span> = <span class=\"ruby-constant\">M</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">N</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parent_name","Module","Module.html#method-i-parent_name","()","<p>Returns the name of the module containing this one.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">M</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">N</span>.<span class=\"ruby-identifier\">parent_name</span> <span class=\"ruby-comment\"># =&gt; &quot;M&quot;</span>\n</pre>\n"],["parent_of?","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-i-parent_of-3F","(event)",""],["parents","Module","Module.html#method-i-parents","()","<p>Returns all the parents of this module according to its name, ordered from\nnested outwards. The receiver …\n"],["parse","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-parse","(str, now=now)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from parsed string. …\n"],["parse","ActiveSupport::XmlMini_LibXMLSAX","ActiveSupport/XmlMini_LibXMLSAX.html#method-i-parse","(data)",""],["parse","ActiveSupport::XmlMini_NokogiriSAX","ActiveSupport/XmlMini_NokogiriSAX.html#method-i-parse","(data)",""],["parse_error","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-parse_error","()",""],["parse_raw_value_as_a_number","ActiveModel::Validations::NumericalityValidator","ActiveModel/Validations/NumericalityValidator.html#method-i-parse_raw_value_as_a_number","(raw_value)",""],["parse_raw_value_as_an_integer","ActiveModel::Validations::NumericalityValidator","ActiveModel/Validations/NumericalityValidator.html#method-i-parse_raw_value_as_an_integer","(raw_value)",""],["parser","URI","URI.html#method-c-parser","()",""],["password","ActiveResource::Base","ActiveResource/Base.html#method-c-password","()","<p>Gets the password for REST HTTP authentication.\n"],["password=","ActiveModel::SecurePassword::InstanceMethodsOnActivation","ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-password-3D","(unencrypted_password)","<p>Encrypts the password into the password_digest attribute.\n"],["password=","ActiveResource::Base","ActiveResource/Base.html#method-c-password-3D","(password)","<p>Sets the password for REST HTTP authentication.\n"],["password=","ActiveResource::Connection","ActiveResource/Connection.html#method-i-password-3D","(password)","<p>Sets the password for remote service.\n"],["password_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-password_field","(object_name, method, options = {})","<p>Returns an input tag of the “password” type tailored for accessing a\nspecified attribute (identified …\n"],["password_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-password_field_tag","(name = \"password\", value = nil, options = {})","<p>Creates a password field, a masked text field that will hide the users\ninput behind a mask character. …\n"],["past?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-past-3F","()",""],["past?","Date","Date.html#method-i-past-3F","()","<p>Returns true if the Date object’s date lies in the past. Otherwise returns\nfalse.\n"],["past?","DateTime","DateTime.html#method-i-past-3F","()","<p>Tells whether the DateTime object’s datetime lies in the past\n"],["past?","Time","Time.html#method-i-past-3F","()","<p>Tells whether the Time object’s time lies in the past\n"],["path","LoadError","LoadError.html#method-i-path","()",""],["path","LoadError","LoadError.html#method-i-path","()",""],["path_to_audio","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-path_to_audio","(source)",""],["path_to_image","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-path_to_image","(source)",""],["path_to_javascript","ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers","ActionView/Helpers/AssetTagHelper/JavascriptTagHelpers.html#method-i-path_to_javascript","(source)",""],["path_to_stylesheet","ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers","ActionView/Helpers/AssetTagHelper/StylesheetTagHelpers.html#method-i-path_to_stylesheet","(source)",""],["path_to_video","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-path_to_video","(source)",""],["pending","ActiveSupport::Testing::Pending","ActiveSupport/Testing/Pending.html#method-i-pending","(description = \"\", &block)",""],["perform_validations","ActiveRecord::Validations","ActiveRecord/Validations.html#method-i-perform_validations","(options={})",""],["performed?","ActionController::Compatibility","ActionController/Compatibility.html#method-i-performed-3F","()",""],["period","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-period","()","<p>Returns the underlying TZInfo::TimezonePeriod.\n"],["period_for_local","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-period_for_local","(time, dst=true)","<p>Available so that TimeZone instances respond like TZInfo::Timezone\ninstances\n"],["period_for_utc","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-period_for_utc","(time)","<p>Available so that TimeZone instances respond like TZInfo::Timezone\ninstances\n"],["persisted?","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-persisted-3F","()","<p>Returns if the record is persisted, i.e. it’s not a new record and it was\nnot destroyed.\n"],["persisted?","ActiveResource::Base","ActiveResource/Base.html#method-i-persisted-3F","()","<p>Returns <code>true</code> if this object has been saved, otherwise returns\n<code>false</code>.\n<p>Examples\n\n<pre>persisted = Computer.create(:brand ...</pre>\n"],["petabyte","Numeric","Numeric.html#method-i-petabyte","()",""],["petabytes","Numeric","Numeric.html#method-i-petabytes","()",""],["phone_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-phone_field","(object_name, method, options = {})",""],["phone_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-phone_field_tag","(name, value = nil, options = {})",""],["pk_and_sequence_for","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-pk_and_sequence_for","(table)","<p>Returns a table’s primary key and belonging sequence.\n"],["plural","ActiveModel::Naming","ActiveModel/Naming.html#method-c-plural","(record_or_class)","<p>Returns the plural class name of a record or class. Examples:\n\n<pre>ActiveModel::Naming.plural(post)        ...</pre>\n"],["plural","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-plural","(rule, replacement)","<p>Specifies a new pluralization rule and its replacement. The rule can either\nbe a string or a regular …\n"],["pluralize","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-pluralize","(count, singular, plural = nil)","<p>Attempts to pluralize the <code>singular</code> word unless\n<code>count</code> is 1. If <code>plural</code> is supplied, it will use\nthat when …\n"],["pluralize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-pluralize","(word)","<p>Returns the plural form of the word in the string.\n<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;post&quot;</span>.<span class=\"ruby-identifier\">pluralize</span>             <span class=\"ruby-comment\"># =&gt; &quot;posts&quot; ...</span>\n</pre>\n"],["pluralize","String","String.html#method-i-pluralize","()","<p>Returns the plural form of the word in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;post&quot;</span>.<span class=\"ruby-identifier\">pluralize</span>             <span class=\"ruby-comment\"># =&gt; &quot;posts&quot;</span>\n<span class=\"ruby-string\">&quot;octopus&quot;</span>.<span class=\"ruby-identifier\">pluralize</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["pluralize_table_names","ActiveRecord::Base","ActiveRecord/Base.html#method-c-pluralize_table_names","","<p>Indicates whether table names should be the pluralized versions of the\ncorresponding class names. If …\n"],["pop_modules","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-i-pop_modules","(modules)",""],["post","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-post","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating POST HTTP method and set/volley the response\n"],["post","ActiveResource::Connection","ActiveResource/Connection.html#method-i-post","(path, body = '', headers = {})","<p>Executes a POST request. Used to create new resources.\n"],["post","ActiveResource::CustomMethods","ActiveResource/CustomMethods.html#method-c-post","(custom_method_name, options = {}, body = '')",""],["post","ActiveResource::CustomMethods::InstanceMethods","ActiveResource/CustomMethods/InstanceMethods.html#method-i-post","(method_name, options = {}, body = nil)",""],["postgresql_version","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-postgresql_version","()","<p>Returns the version of the connected PostgreSQL server.\n"],["precisionless_round","Float","Float.html#method-i-precisionless_round","(precision = nil)",""],["prefetch_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-prefetch_primary_key-3F","(table_name = nil)","<p>Should primary key values be selected from their corresponding sequence\nbefore the insert statement? …\n"],["prefix","ActiveResource::Base","ActiveResource/Base.html#method-c-prefix","(options={})","<p>Gets the prefix for a resource’s nested URL (e.g.,\n<code>prefix/collectionname/1.json</code>) This method is regenerated …\n"],["prefix=","ActiveResource::Base","ActiveResource/Base.html#method-c-prefix-3D","(value = '/')","<p>Sets the prefix for a resource’s nested URL (e.g.,\n<code>prefix/collectionname/1.json</code>). Default value is\n<code>site.path</code> …\n"],["prefix_source","ActiveResource::Base","ActiveResource/Base.html#method-c-prefix_source","()","<p>An attribute reader for the source string for the resource path prefix. \nThis method is regenerated at …\n"],["preload","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-preload","(*args)",""],["prepare_controller_class","ActionController::TestCase::Behavior::ClassMethods","ActionController/TestCase/Behavior/ClassMethods.html#method-i-prepare_controller_class","(new_class)",""],["presence","Object","Object.html#method-i-presence","()","<p>Returns object if it’s <code>present?</code> otherwise returns\n<code>nil</code>. <code>object.presence</code> is equivalent to\n<code>object.present</code> …\n"],["present?","Object","Object.html#method-i-present-3F","()","<p>An object is present if it’s not <code>blank?</code>.\n"],["prev_month","Date","Date.html#method-i-prev_month","()","<p>Shorthand for months_ago(1)\n"],["prev_month","Time","Time.html#method-i-prev_month","()","<p>Short-hand for months_ago(1)\n"],["prev_week","Date","Date.html#method-i-prev_week","(day = :monday)","<p>Returns a new Date/DateTime representing the start of the given day in the\nprevious week (default is …\n"],["prev_week","Time","Time.html#method-i-prev_week","(day = :monday)","<p>Returns a new Time representing the start of the given day in the previous\nweek (default is Monday). …\n"],["prev_year","Date","Date.html#method-i-prev_year","()","<p>Shorthand for years_ago(1)\n"],["prev_year","Time","Time.html#method-i-prev_year","()","<p>Short-hand for years_ago(1)\n"],["previous_changes","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-previous_changes","()","<p>Map of attributes that were changed when the model was saved.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-comment\"># =&gt; 'bob'</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> = <span class=\"ruby-string\">'robert'</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key","()","<p>Defines the primary key field – can be overridden in subclasses.\nOverwriting will negate any effect …\n"],["primary_key","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-primary_key","(table)","<p>Returns just a table’s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-primary_key","(table)","<p>Returns just a table’s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-primary_key","(table)","<p>Returns just a table’s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-primary_key","(name)","<p>Appends a primary key definition to the table definition. Can be called\nmultiple times, but this is probably …\n"],["primary_key","ActiveResource::Base","ActiveResource/Base.html#method-c-primary_key","()",""],["primary_key=","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key-3D","(value)","<p>Attribute writer for the primary key column\n"],["primary_key_prefix_type","ActiveRecord::Base","ActiveRecord/Base.html#method-c-primary_key_prefix_type","","<p>Accessor for the prefix type that will be prepended to every primary key\ncolumn name. The options are …\n"],["prime_cache","ActiveSupport::Memoizable::InstanceMethods","ActiveSupport/Memoizable/InstanceMethods.html#method-i-prime_cache","(*syms)",""],["process","ActionController::Middleware","ActionController/Middleware.html#method-i-process","(action)",""],["process","ActionController::TemplateAssertions","ActionController/TemplateAssertions.html#method-i-process","(*args)",""],["process","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-process","(action, parameters = nil, session = nil, flash = nil, http_method = 'GET')",""],["process_action","ActionController::Instrumentation","ActionController/Instrumentation.html#method-i-process_action","(*args)",""],["process_action","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-process_action","(event)",""],["process_action","ActionController::ParamsWrapper","ActionController/ParamsWrapper.html#method-i-process_action","(*args)","<p>Performs parameters wrapping upon the request. Will be called automatically\nby the metal call stack. …\n"],["process_attributes_for","HTML::WhiteListSanitizer","HTML/WhiteListSanitizer.html#method-i-process_attributes_for","(node, options)",""],["process_node","HTML::FullSanitizer","HTML/FullSanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::LinkSanitizer","HTML/LinkSanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::Sanitizer","HTML/Sanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::WhiteListSanitizer","HTML/WhiteListSanitizer.html#method-i-process_node","(node, result, options)",""],["process_view_paths","ActionView::Base","ActionView/Base.html#method-c-process_view_paths","(value)",""],["process_with_new_base_test","ActionController::Testing","ActionController/Testing.html#method-i-process_with_new_base_test","(request, response)","<p>TODO: Clean this up\n"],["profile","ActiveSupport::Testing::Performance::Metrics::Base","ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-profile","()","<p>overridden by each implementation\n"],["protect_against_forgery?","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-protect_against_forgery-3F","()",""],["protect_from_forgery","ActionController::RequestForgeryProtection::ClassMethods","ActionController/RequestForgeryProtection/ClassMethods.html#method-i-protect_from_forgery","(options = {})","<p>Turn on request forgery protection. Bear in mind that only non-GET,\nHTML/JavaScript requests are checked. …\n"],["protected_attributes","ActiveModel::MassAssignmentSecurity::ClassMethods","ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-protected_attributes","(role = :default)",""],["provide","ActionView::Helpers::CaptureHelper","ActionView/Helpers/CaptureHelper.html#method-i-provide","(name, content = nil, &block)","<p>The same as <code>content_for</code> but when used with streaming flushes\nstraight back to the layout. In other words, …\n"],["proxy","ActiveResource::Base","ActiveResource/Base.html#method-c-proxy","()","<p>Gets the proxy variable if a proxy is required\n"],["proxy=","ActiveResource::Base","ActiveResource/Base.html#method-c-proxy-3D","(proxy)","<p>Sets the URI of the http proxy to the value in the <code>proxy</code>\nargument.\n"],["proxy=","ActiveResource::Connection","ActiveResource/Connection.html#method-i-proxy-3D","(proxy)","<p>Set the proxy for remote service.\n"],["proxy_class","ActiveSupport::Multibyte","ActiveSupport/Multibyte.html#method-c-proxy_class","()","<p>Returns the current proxy class\n"],["proxy_class=","ActiveSupport::Multibyte","ActiveSupport/Multibyte.html#method-c-proxy_class-3D","(klass)","<p>The proxy class returned when calling mb_chars. You can use this accessor\nto configure your own proxy …\n"],["prune","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-prune","(target_size, max_time = nil)","<p>To ensure entries fit within the specified memory prune the cache by\nremoving the least recently accessed …\n"],["pruning?","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-pruning-3F","()","<p>Returns true if the cache is currently being pruned.\n"],["public_path","Rails","Rails.html#method-c-public_path","()",""],["publish","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-c-publish","(name, *args)",""],["publish","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-publish","(name, *args)",""],["put","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-put","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating PUT HTTP method and set/volley the response\n"],["put","ActiveResource::Connection","ActiveResource/Connection.html#method-i-put","(path, body = '', headers = {})","<p>Executes a PUT request (see HTTP protocol documentation if unfamiliar).\nUsed to update resources.\n"],["put","ActiveResource::CustomMethods","ActiveResource/CustomMethods.html#method-c-put","(custom_method_name, options = {}, body = '')",""],["put","ActiveResource::CustomMethods::InstanceMethods","ActiveResource/CustomMethods/InstanceMethods.html#method-i-put","(method_name, options = {}, body = '')",""],["query","ActionView::NullResolver","ActionView/NullResolver.html#method-i-query","(path, exts, formats)",""],["query_attribute","ActiveRecord::AttributeMethods::Query","ActiveRecord/AttributeMethods/Query.html#method-i-query_attribute","(attr_name)",""],["quietly","Kernel","Kernel.html#method-i-quietly","()","<p>Silences both STDOUT and STDERR, even for subprocesses.\n\n<pre>quietly { system 'bundle install' }</pre>\n"],["quote","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-quote","(value, column = nil)","<p>QUOTING ==================================================\n"],["quote","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-quote","(value, column = nil)","<p>QUOTING ==================================================\n"],["quote","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote","(value, column = nil)","<p>Quotes the column value to help prevent SQL injection attacks.\n"],["quote_column_name","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_column_name","(column_name)","<p>Quotes the column name. Defaults to no quoting.\n"],["quote_string","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-quote_string","(string)",""],["quote_string","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_string","(s)","<p>Quotes a string, escaping any ‘ (single quote) and \\ (backslash)\ncharacters.\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-quote_table_name","(name)","<p>Override to return the quoted table name. Defaults to column quoting.\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-quote_table_name","(name)","<p>Checks the following cases:\n<p>table_name\n<p>\"table.name\"\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name","(table_name)","<p>Quotes the table name. Defaults to column name quoting.\n"],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-quoted_columns_for_index","(column_names, options = {})",""],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-quoted_columns_for_index","(column_names, options = {})",""],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-quoted_columns_for_index","(column_names, options = {})","<p>Overridden by the mysql adapter for supporting index lengths\n"],["quoted_date","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_date","(value)",""],["quoted_false","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-quoted_false","()",""],["quoted_false","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-quoted_false","()",""],["quoted_false","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_false","()",""],["quoted_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-quoted_locking_column","()","<p>Quote the column name used for optimistic locking.\n"],["quoted_primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-quoted_primary_key","()","<p>Returns a quoted version of the primary key name, used to construct SQL\nstatements.\n"],["quoted_table_name","ActiveRecord::Base","ActiveRecord/Base.html#method-c-quoted_table_name","()","<p>Returns a quoted version of the table name, used to construct SQL\nstatements.\n"],["quoted_true","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-quoted_true","()",""],["quoted_true","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-quoted_true","()",""],["quoted_true","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_true","()",""],["radio_button","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-radio_button","(method, tag_value, options = {})",""],["radio_button","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-radio_button","(object_name, method, tag_value, options = {})","<p>Returns a radio button tag for accessing a specified attribute (identified\nby <code>method</code>) on an object assigned …\n"],["radio_button_checked?","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-c-radio_button_checked-3F","(value, checked_value)",""],["radio_button_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-radio_button_tag","(name, value, checked = false, options = {})","<p>Creates a radio button; use groups of radio buttons named the same to allow\nusers to select from a group …\n"],["raise","ActiveSupport::BasicObject","ActiveSupport/BasicObject.html#method-i-raise","(*args)","<p>Let ActiveSupport::BasicObject at least raise exceptions.\n"],["range_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-range_field","(object_name, method, options = {})","<p>Returns an input tag of type “range”.\n<p>Options\n<p>Accepts same options as range_field_tag\n"],["range_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-range_field_tag","(name, value = nil, options = {})","<p>Creates a range form element.\n<p>Options\n<p>Accepts the same options as number_field_tag.\n"],["raw","ActionView::Helpers::OutputSafetyHelper","ActionView/Helpers/OutputSafetyHelper.html#method-i-raw","(stringish)","<p>This method outputs without escaping a string. Since escaping tags is now\ndefault, this can be used when …\n"],["raw_connection","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-raw_connection","()","<p>Provides access to the underlying database driver for this adapter. For\nexample, this method returns …\n"],["raw_value","ActiveSupport::Cache::Entry","ActiveSupport/Cache/Entry.html#method-i-raw_value","()","<p>Get the raw value. This value may be serialized and compressed.\n"],["raw_write_attribute","ActiveRecord::AttributeMethods::Write","ActiveRecord/AttributeMethods/Write.html#method-i-raw_write_attribute","(attr_name, value)",""],["read","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-read","(name, options = nil)","<p>Fetches data from the cache, using the given key. If there is data in the\ncache with the given key, then …\n"],["read_attribute","ActiveRecord::AttributeMethods::Read","ActiveRecord/AttributeMethods/Read.html#method-i-read_attribute","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nafter it has been typecast (for example, “2004-12-12” …\n"],["read_attribute_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-read_attribute_before_type_cast","(attr_name)",""],["read_entry","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-read_entry","(key, options)",""],["read_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-read_entry","(key, options)",""],["read_fragment","ActionController::Caching::Fragments","ActionController/Caching/Fragments.html#method-i-read_fragment","(key, options = nil)","<p>Reads a cached fragment from the location signified by <code>key</code>\n(see <code>expire_fragment</code> for acceptable formats). …\n"],["read_multi","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-read_multi","(*names)","<p>Reads multiple values from the cache using a single call to the servers for\nall keys. Options can be …\n"],["read_multi","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-read_multi","(*names)","<p>Read multiple values at once from the cache. Options can be passed in the\nlast argument.\n<p>Some cache implementation …\n"],["readable_inspect","Date","Date.html#method-i-readable_inspect","()","<p>Overrides the default inspect method with a human readable one, e.g., “Mon,\n21 Feb 2005”\n"],["readable_inspect","DateTime","DateTime.html#method-i-readable_inspect","()","<p>Overrides the default inspect method with a human readable one, e.g., “Mon,\n21 Feb 2005 14:30:00 …\n"],["readonly","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-readonly","(value = true)",""],["readonly!","ActiveRecord::Base","ActiveRecord/Base.html#method-i-readonly-21","()","<p>Marks this record as read only.\n"],["readonly?","ActiveRecord::Base","ActiveRecord/Base.html#method-i-readonly-3F","()","<p>Returns <code>true</code> if the record is read only. Records loaded\nthrough joins with piggy-back attributes will …\n"],["readonly_attributes","ActiveRecord::Base","ActiveRecord/Base.html#method-c-readonly_attributes","()","<p>Returns an array of all the attributes that have been specified as\nreadonly.\n"],["receive","ActionMailer::Base","ActionMailer/Base.html#method-c-receive","(raw_mail)","<p>Receives a raw email, parses it into an email object, decodes it,\ninstantiates a new mailer, and passes …\n"],["reconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reconnect-21","()","<p>Disconnects from the database if already connected, and establishes a new\nconnection with the database. …\n"],["reconnect!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reconnect-21","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-reconnect-21","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reconnect-21","()","<p>Close then reopen the connection.\n"],["record","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-record","(*command)","<p>record <code>command</code>.  <code>command</code> should be a method name\nand arguments. For example:\n\n<pre>recorder.record(:method_name, ...</pre>\n"],["record","ActiveSupport::Testing::Performance::Benchmarker","ActiveSupport/Testing/Performance/Benchmarker.html#method-i-record","()",""],["record","ActiveSupport::Testing::Performance::Profiler","ActiveSupport/Testing/Performance/Profiler.html#method-i-record","()",""],["record_key_for_dom_id","ActionController::RecordIdentifier","ActionController/RecordIdentifier.html#method-i-record_key_for_dom_id","(record)","<p>Returns a string representation of the key attribute(s) that is suitable\nfor use in an HTML DOM id.  …\n"],["recreate_database","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-recreate_database","(name, options = {})","<p>Drops the database specified on the <code>name</code> attribute and creates\nit again using the provided <code>options</code>.\n"],["recycle!","ActionController::TestResponse","ActionController/TestResponse.html#method-i-recycle-21","()",""],["recycle!","ActionController::Testing","ActionController/Testing.html#method-i-recycle-21","()",""],["redefine_method","Module","Module.html#method-i-redefine_method","(method, &block)",""],["redirect_to","ActionController::Flash","ActionController/Flash.html#method-i-redirect_to","(options = {}, response_status_and_flash = {})",""],["redirect_to","ActionController::Instrumentation","ActionController/Instrumentation.html#method-i-redirect_to","(*args)",""],["redirect_to","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-redirect_to","(event)",""],["redirect_to","ActionController::Redirecting","ActionController/Redirecting.html#method-i-redirect_to","(options = {}, response_status = {})","<p>Redirects the browser to the target specified in <code>options</code>. This\nparameter can take one of three forms: …\n"],["references","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-references","(*args)","<p>Adds a reference. Optionally adds a <code>type</code> column, if\n<code>:polymorphic</code> option is provided. <code>references</code> and \n…\n"],["references","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-references","(*args)",""],["reflect_on_aggregation","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_aggregation","(aggregation)","<p>Returns the AggregateReflection object for the named\n<code>aggregation</code> (use the symbol).\n\n<pre>Account.reflect_on_aggregation(:balance) ...</pre>\n"],["reflect_on_all_aggregations","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_aggregations","()","<p>Returns an array of AggregateReflection objects for all the aggregations in\nthe class.\n"],["reflect_on_all_associations","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_associations","(macro = nil)","<p>Returns an array of AssociationReflection objects for all the associations\nin the class. If you only …\n"],["reflect_on_all_autosave_associations","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_autosave_associations","()","<p>Returns an array of AssociationReflection objects for all associations\nwhich have <code>:autosave</code> enabled. …\n"],["reflect_on_association","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_association","(association)","<p>Returns the AssociationReflection object for the <code>association</code>\n(use the symbol).\n\n<pre>Account.reflect_on_association(:owner) ...</pre>\n"],["refresh","ActionView::Template","ActionView/Template.html#method-i-refresh","(view)","<p>Receives a view object and return a template similar to self by using\n@virtual_path.\n<p>This method is useful …\n"],["register_interceptor","ActionMailer::Base","ActionMailer/Base.html#method-c-register_interceptor","(interceptor)","<p>Register an Interceptor which will be called before mail is sent. Either a\nclass or a string can be passed …\n"],["register_interceptors","ActionMailer::Base","ActionMailer/Base.html#method-c-register_interceptors","(*interceptors)","<p>Register one or more Interceptors which will be called before mail is sent.\n"],["register_javascript_expansion","ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers::ClassMethods","ActionView/Helpers/AssetTagHelper/JavascriptTagHelpers/ClassMethods.html#method-i-register_javascript_expansion","(expansions)","<p>Register one or more javascript files to be included when\n<code>symbol</code> is passed to <code>javascript_include_tag</code> …\n"],["register_observer","ActionMailer::Base","ActionMailer/Base.html#method-c-register_observer","(observer)","<p>Register an Observer which will be notified when mail is delivered. Either\na class or a string can be …\n"],["register_observers","ActionMailer::Base","ActionMailer/Base.html#method-c-register_observers","(*observers)","<p>Register one or more Observers which will be notified when mail is\ndelivered.\n"],["register_stylesheet_expansion","ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers::ClassMethods","ActionView/Helpers/AssetTagHelper/StylesheetTagHelpers/ClassMethods.html#method-i-register_stylesheet_expansion","(expansions)","<p>Register one or more stylesheet files to be included when\n<code>symbol</code> is passed to <code>stylesheet_link_tag</code>. This …\n"],["regular_update","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_update","(other_hash)",""],["regular_update","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_update","(other_hash)",""],["regular_writer","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_writer","(key, value)",""],["regular_writer","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_writer","(key, value)",""],["reinit_with","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-i-reinit_with","(coder)","<p>Reinitialize an Identity Map model object from <code>coder</code>.\n<code>coder</code> must contain the attributes necessary for …\n"],["release_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-release_connection","(with_id = current_connection_id)","<p>Signal that the thread is finished with the current connection.\n#release_connection releases the connection-thread …\n"],["release_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-release_savepoint","()",""],["reload","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-reload","(options = nil)","<p>Reloads the attributes of the object as usual and clears\n<code>marked_for_destruction</code> flag.\n"],["reload","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-reload","(options = nil)","<p>Reloads the attributes of this object from the database. The optional\noptions argument is passed to find …\n"],["reload","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-reload","()",""],["reload","ActiveResource::Base","ActiveResource/Base.html#method-i-reload","()","<p>A method to reload the attributes of this object from the remote web\nservice.\n<p>Examples\n\n<pre>my_branch = Branch.find(:first) ...</pre>\n"],["reloader","I18n::Railtie","I18n/Railtie.html#method-c-reloader","()",""],["remember_transaction_record_state","ActiveRecord::Transactions","ActiveRecord/Transactions.html#method-i-remember_transaction_record_state","()","<p>Save the new record state and id of a record so it can be restored later if\na transaction fails.\n"],["remove","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove","(*column_names)","<p>Removes the column(s) from the table definition.\n<p>Examples\n\n<pre>t.remove(:qualification)\nt.remove(:qualification, ...</pre>\n"],["remove","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-remove","(record)",""],["remove_belongs_to","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_belongs_to","(*args)",""],["remove_by_id","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-remove_by_id","(symbolized_sti_name, id)",""],["remove_column","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_column","(table_name, *column_names)","<p>Removes the column(s) from the table definition.\n<p>Examples\n\n<pre>remove_column(:suppliers, :qualification)\nremove_columns(:suppliers, ...</pre>\n"],["remove_column_sql","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-remove_column_sql","(table_name, *column_names)",""],["remove_columns","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_columns","(table_name, *column_names)",""],["remove_connection","ActiveRecord::Base","ActiveRecord/Base.html#method-c-remove_connection","(klass = self)",""],["remove_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-remove_connection","(klass)","<p>Remove the connection for this class. This will close the active connection\nand the defined connection …\n"],["remove_filters!","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-remove_filters-21","()",""],["remove_index","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_index","(table_name, options = {})","<p>Remove the given index from the table.\n<p>Remove the index_accounts_on_column in the accounts table.\n\n<pre>remove_index ...</pre>\n"],["remove_index","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_index","(options = {})","<p>Removes the given index from the table.\n<p>Examples\n<p>Remove the index_table_name_on_column in the table_name …\n"],["remove_index_sql","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-remove_index_sql","(table_name, options = {})",""],["remove_multiparameter_id","ActiveModel::MassAssignmentSecurity::PermissionSet","ActiveModel/MassAssignmentSecurity/PermissionSet.html#method-i-remove_multiparameter_id","(key)",""],["remove_possible_method","Module","Module.html#method-i-remove_possible_method","(method)",""],["remove_references","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_references","(*args)","<p>Removes a reference. Optionally removes a <code>type</code> column.\n<code>remove_references</code> and <code>remove_belongs_to</code> are\nacceptable. …\n"],["remove_root","ActiveResource::Formats","ActiveResource/Formats.html#method-c-remove_root","(data)",""],["remove_silencers!","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-remove_silencers-21","()","<p>Will remove all silencers, but leave in the filters. This is useful if your\ncontext of debugging suddenly …\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_timestamps","(table_name)","<p>Removes the timestamp columns (created_at and updated_at) from the table\ndefinition.\n<p>Examples\n\n<pre>remove_timestamps(:suppliers)</pre>\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_timestamps","()","<p>Removes the timestamp columns (<code>created_at</code> and\n<code>updated_at</code>) from the table.\n<p>Example\n\n<pre>t.remove_timestamps</pre>\n"],["remove_timestamps_sql","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-remove_timestamps_sql","(table_name)",""],["rename","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-rename","(column_name, new_column_name)","<p>Renames a column.\n<p>Example\n\n<pre>t.rename(:description, :name)</pre>\n"],["rename_column","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-rename_column","(table_name, column_name, new_column_name)",""],["rename_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column in a table.\n"],["rename_column","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column.\n<p>Example\n\n<pre>rename_column(:suppliers, :description, :name)</pre>\n"],["rename_column_sql","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-rename_column_sql","(table_name, column_name, new_column_name)",""],["rename_index","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rename_index","(table_name, old_name, new_name)",""],["rename_index","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_index","(table_name, old_name, new_name)","<p>Rename an index.\n<p>Rename the index_people_on_last_name index to index_users_on_last_name\n\n<pre>rename_index :people, ...</pre>\n"],["rename_key","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-rename_key","(key, options = {})",""],["rename_table","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre>rename_table('octopuses', 'octopi')</pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre>rename_table('octopuses', 'octopi')</pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rename_table","(name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre>rename_table('octopuses', 'octopi')</pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-rename_table","(name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre>rename_table('octopuses', 'octopi')</pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example\n\n<pre>rename_table('octopuses', 'octopi')</pre>\n"],["render","ActionController::Instrumentation","ActionController/Instrumentation.html#method-i-render","(*args)",""],["render","ActionView::Helpers::RenderingHelper","ActionView/Helpers/RenderingHelper.html#method-i-render","(options = {}, locals = {}, &block)","<p>Returns the result of a render that’s dictated by the options hash. The\nprimary options are:\n<p><code>:partial</code> ...\n"],["render","ActionView::Renderer","ActionView/Renderer.html#method-i-render","(context, options)","<p>Main render entry point shared by AV and AC.\n"],["render","ActionView::Template","ActionView/Template.html#method-i-render","(view, locals, buffer=nil, &block)","<p>Render a template. If the template was not compiled yet, it is done exactly\nbefore rendering.\n<p>This method …\n"],["render","ActionView::Template::ActionView::Template::Template::Handler","ActionView/Template/ActionView/Template/Template/Handler.html#method-i-render","(template, local_assigns)",""],["render","ActionView::TestCase::Behavior","ActionView/TestCase/Behavior.html#method-i-render","(options = {}, local_assigns = {}, &block)",""],["render","ActionView::TestCase::Behavior::Locals","ActionView/TestCase/Behavior/Locals.html#method-i-render","(options = {}, local_assigns = {})",""],["render_body","ActionView::Renderer","ActionView/Renderer.html#method-i-render_body","(context, options)","<p>Render but returns a valid Rack body. If fibers are defined, we return a\nstreaming body that renders …\n"],["render_collection","ActionView::LogSubscriber","ActionView/LogSubscriber.html#method-i-render_collection","(event)",""],["render_partial","ActionView::LogSubscriber","ActionView/LogSubscriber.html#method-i-render_partial","(event)",""],["render_template","ActionView::LogSubscriber","ActionView/LogSubscriber.html#method-i-render_template","(event)",""],["render_to_body","ActionController::Compatibility","ActionController/Compatibility.html#method-i-render_to_body","(options)",""],["render_to_body","ActionController::Renderers","ActionController/Renderers.html#method-i-render_to_body","(options)",""],["render_to_string","ActionController::Rendering","ActionController/Rendering.html#method-i-render_to_string","(*)","<p>Overwrite render_to_string because body can now be set to a rack body.\n"],["reorder","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-reorder","(*args)",""],["reorder_characters","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-reorder_characters","(codepoints)","<p>Re-order codepoints so the string becomes canonical.\n"],["report","ActiveSupport::Testing::Performance::Performer","ActiveSupport/Testing/Performance/Performer.html#method-i-report","()",""],["repository","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-repository","()",""],["request","ActiveResource::LogSubscriber","ActiveResource/LogSubscriber.html#method-i-request","(event)",""],["request_http_basic_authentication","ActionController::HttpAuthentication::Basic::ControllerMethods","ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-request_http_basic_authentication","(realm = \"Application\")",""],["request_http_digest_authentication","ActionController::HttpAuthentication::Digest::ControllerMethods","ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-request_http_digest_authentication","(realm = \"Application\", message = nil)","<p>Render output including the HTTP Digest authentication header\n"],["request_http_token_authentication","ActionController::HttpAuthentication::Token::ControllerMethods","ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-request_http_token_authentication","(realm = \"Application\")",""],["requests","ActiveResource::Connection","ActiveResource/Connection.html#method-c-requests","()",""],["requests","ActiveResource::HttpMock","ActiveResource/HttpMock.html#method-c-requests","()","<p>Returns an array of all request objects that have been sent to the mock.\nYou can use this to check if …\n"],["require_fixture_classes","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-require_fixture_classes","(fixture_names = nil)",""],["require_library_or_gem","Kernel","Kernel.html#method-i-require_library_or_gem","(library_name)","<p>Require a library with fallback to RubyGems.  Warnings during library\nloading are silenced to increase …\n"],["require_tzinfo","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-require_tzinfo","()",""],["requires_reloading?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-requires_reloading-3F","()","<p>Returns true if its required to reload the connection between requests for\ndevelopment mode. This is …\n"],["requires_reloading?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-requires_reloading-3F","()","<p>this is set to true in 2.3, but we don’t want it to be\n"],["requires_reloading?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-requires_reloading-3F","()",""],["rescue_action","ActionController::Compatibility","ActionController/Compatibility.html#method-i-rescue_action","(env)",""],["rescue_action_in_public!","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-rescue_action_in_public-21","()","<p>Cause the action to be rescued according to the regular rules for\nrescue_action when the visitor is not …\n"],["rescue_action_without_handler","ActionController::TestCase::RaiseActionExceptions","ActionController/TestCase/RaiseActionExceptions.html#method-i-rescue_action_without_handler","(e)",""],["rescue_from","ActiveSupport::Rescuable::ClassMethods","ActiveSupport/Rescuable/ClassMethods.html#method-i-rescue_from","(*klasses, &block)","<p>Rescue exceptions raised in controller actions.\n<p><code>rescue_from</code> receives a series of exception classes or ...\n"],["rescue_with_handler","ActionController::Rescue","ActionController/Rescue.html#method-i-rescue_with_handler","(exception)",""],["rescue_with_handler","ActiveSupport::Rescuable","ActiveSupport/Rescuable.html#method-i-rescue_with_handler","(exception)","<p>Tries to rescue the exception by looking up and calling a registered\nhandler.\n"],["reset","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-reset","()",""],["reset!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reset-21","()","<p>Reset the state of this connection, directing the DBMS to clear\ntransactions and other connection-related …\n"],["reset!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reset-21","()",""],["reset!","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-reset-21","()",""],["reset!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reset-21","()",""],["reset!","ActiveResource::HttpMock","ActiveResource/HttpMock.html#method-c-reset-21","()","<p>Deletes all logged requests and responses.\n"],["reset_cache","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-reset_cache","()",""],["reset_callbacks","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-reset_callbacks","(symbol)","<p>Remove all set callbacks for the given event.\n"],["reset_column_information","ActiveRecord::Base","ActiveRecord/Base.html#method-c-reset_column_information","()","<p>Resets all the cached information about columns, which will cause them to\nbe reloaded on the next request. …\n"],["reset_counters","ActiveRecord::CounterCache","ActiveRecord/CounterCache.html#method-i-reset_counters","(id, *counters)","<p>Resets one or more counter caches to their correct value using an SQL count\nquery.  This is useful when …\n"],["reset_cycle","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-reset_cycle","(name = \"default\")","<p>Resets a cycle so that it starts from the first element the next time it is\ncalled. Pass in <code>name</code> to reset …\n"],["reset_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-reset_locking_column","()","<p>Reset the column used for optimistic locking back to the\n<code>lock_version</code> default.\n"],["reset_runtime","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-c-reset_runtime","()",""],["reset_sequence!","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-reset_sequence-21","(table, column, sequence = nil)","<p>Set the sequence to the max value of the table’s column.\n"],["reset_session","ActionController::RackDelegation","ActionController/RackDelegation.html#method-i-reset_session","()",""],["resource_location","ActionController::Responder","ActionController/Responder.html#method-i-resource_location","()","<p>Returns the resource location by retrieving it from the options or\nreturning the resources array.\n"],["resourceful?","ActionController::Responder","ActionController/Responder.html#method-i-resourceful-3F","()","<p>Checks whether the resource responds to the current format or not.\n"],["respond","ActionController::Responder","ActionController/Responder.html#method-i-respond","()","<p>Main entry point for responder responsible to dispatch to the proper\nformat.\n"],["respond_to","ActionController::MimeResponds","ActionController/MimeResponds.html#method-i-respond_to","(*mimes, &block)","<p>Without web-service support, an action which collects the data for\ndisplaying a list of people might …\n"],["respond_to","ActionController::MimeResponds::ClassMethods","ActionController/MimeResponds/ClassMethods.html#method-i-respond_to","(*mimes)","<p>Defines mime types that are rendered by default when invoking\n<code>respond_with</code>.\n<p>Examples:\n\n<pre>respond_to :html, ...</pre>\n"],["respond_to","ActiveResource::HttpMock","ActiveResource/HttpMock.html#method-c-respond_to","(*args)","<p>Accepts a block which declares a set of requests and responses for the\nHttpMock to respond to in the …\n"],["respond_to?","ActiveModel::AttributeMethods","ActiveModel/AttributeMethods.html#method-i-respond_to-3F","(method, include_private_methods = false)",""],["respond_to?","ActiveRecord::Base","ActiveRecord/Base.html#method-c-respond_to-3F","(method_id, include_private = false)",""],["respond_to?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-respond_to-3F","(method, include_private = false)",""],["respond_to?","ActiveResource::Base","ActiveResource/Base.html#method-i-respond_to-3F","(method, include_priv = false)","<p>A method to determine if an object responds to a message (e.g., a method\ncall). In Active Resource, a …\n"],["respond_to?","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-respond_to-3F","(method, include_private=false)","<p>Returns <code>true</code> if <em>obj</em> responds to the given method.\nPrivate methods are included in the search only if …\n"],["respond_to?","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-respond_to-3F","(name)",""],["respond_to?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-respond_to-3F","(sym, include_priv = false)","<p>Ensure proxy class responds to all methods that underlying time instance\nresponds to.\n"],["respond_to_without_attributes?","ActiveModel::AttributeMethods","ActiveModel/AttributeMethods.html#method-i-respond_to_without_attributes-3F","(method, include_private_methods = false)","<p>A Person object with a name attribute can ask\n<code>person.respond_to?(:name)</code>,\n<code>person.respond_to?(:name=)</code>, …\n"],["respond_to_without_attributes?","ActiveResource::Base","ActiveResource/Base.html#method-i-respond_to_without_attributes-3F","(method, include_priv = false)","<p>For checking <code>respond_to?</code> without searching the attributes\n(which is faster).\n"],["respond_with","ActionController::MimeResponds","ActionController/MimeResponds.html#method-i-respond_with","(*resources, &block)","<p>respond_with wraps a resource around a responder for default\nrepresentation. First it invokes respond_to …\n"],["response_body=","ActionController::Metal","ActionController/Metal.html#method-i-response_body-3D","(val)",""],["response_body=","ActionController::RackDelegation","ActionController/RackDelegation.html#method-i-response_body-3D","(body)",""],["responses","ActiveResource::HttpMock","ActiveResource/HttpMock.html#method-c-responses","()","<p>Returns the list of requests and their mocked responses. Look up a response\nfor a request using <code>responses.assoc</code> …\n"],["restore_transaction_record_state","ActiveRecord::Transactions","ActiveRecord/Transactions.html#method-i-restore_transaction_record_state","(force = false)","<p>Restore the new record state and id of a record that was previously saved\nby a call to save_record_state. …\n"],["retrieve_autoindex","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-retrieve_autoindex","(pre_match)",""],["retrieve_connection","ActiveRecord::Base","ActiveRecord/Base.html#method-c-retrieve_connection","()",""],["retrieve_connection_pool","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-retrieve_connection_pool","(klass)",""],["retrieve_object","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-retrieve_object","(object)",""],["reverse","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-reverse","()","<p>Reverses all characters in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'Café'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">reverse</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; 'éfaC'</span>\n</pre>\n"],["reverse_merge","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge","(other_hash)","<p>Performs the opposite of merge, with the keys and values from the first\nhash taking precedence over the …\n"],["reverse_merge","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge","(other_hash)","<p>Performs the opposite of merge, with the keys and values from the first\nhash taking precedence over the …\n"],["reverse_merge","Hash","Hash.html#method-i-reverse_merge","(other_hash)","<p>Merges the caller into <code>other_hash</code>. For example,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">options</span> = <span class=\"ruby-identifier\">options</span>.<span class=\"ruby-identifier\">reverse_merge</span>(:<span class=\"ruby-identifier\">size</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">25</span>, :<span class=\"ruby-identifier\">velocity</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["reverse_merge!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge-21","(other_hash)",""],["reverse_merge!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge-21","(other_hash)",""],["reverse_merge!","Hash","Hash.html#method-i-reverse_merge-21","(other_hash)","<p>Destructive <code>reverse_merge</code>.\n"],["reverse_order","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-reverse_order","()",""],["reverse_update","Hash","Hash.html#method-i-reverse_update","(other_hash)",""],["rfc2822","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-rfc2822","()",""],["rfc3339","Date","Date.html#method-i-rfc3339","()",""],["rfc822","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-rfc822","()",""],["rindex","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-rindex","(needle, offset=nil)","<p>Returns the position <em>needle</em> in the string, counting in codepoints,\nsearching backward from <em>offset</em> or …\n"],["rjust","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-rjust","(integer, padstr=' ')","<p>Works just like <code>String#rjust</code>, only integer specifies\ncharacters instead of bytes.\n<p>Example:\n\n<pre>&quot;¾ cup&quot;.mb_chars.rjust(8).to_s ...</pre>\n"],["rollback_active_record_state!","ActiveRecord::Transactions","ActiveRecord/Transactions.html#method-i-rollback_active_record_state-21","()","<p>Reset id and @new_record if the transaction rolls back.\n"],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-rollback_db_transaction","()","<p>Rolls back the transaction (and turns on auto-committing). Must be done if\nthe transaction block raises …\n"],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-rollback_db_transaction","()",""],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rollback_db_transaction","()","<p>Aborts a transaction.\n"],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_transaction_records","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-rollback_transaction_records","(rollback)","<p>Send a rollback message to all records after they have been rolled back. If\nrollback is false, only rollback …\n"],["root","Rails","Rails.html#method-c-root","()",""],["round","Float","Float.html#method-i-round","(precision = nil)","<p>Rounds the float with the specified precision.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">x</span> = <span class=\"ruby-value\">1.337</span>\n<span class=\"ruby-identifier\">x</span>.<span class=\"ruby-identifier\">round</span>    <span class=\"ruby-comment\"># =&gt; 1</span>\n<span class=\"ruby-identifier\">x</span>.<span class=\"ruby-identifier\">round</span>(<span class=\"ruby-value\">1</span>) <span class=\"ruby-comment\"># =&gt; 1.3</span>\n<span class=\"ruby-identifier\">x</span>.<span class=\"ruby-identifier\">round</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["route_key","ActiveModel::Naming","ActiveModel/Naming.html#method-c-route_key","(record_or_class)","<p>Returns string to use while generating route names. It differs for\nnamespaced models regarding whether …\n"],["rstrip","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-rstrip","()","<p>Strips entire range of Unicode whitespace from the right of the string.\n"],["run","ActiveSupport::Testing::Isolation::MiniTest","ActiveSupport/Testing/Isolation/MiniTest.html#method-i-run","(runner)",""],["run","ActiveSupport::Testing::Isolation::TestUnit","ActiveSupport/Testing/Isolation/TestUnit.html#method-i-run","(result)",""],["run","ActiveSupport::Testing::Performance::Benchmarker","ActiveSupport/Testing/Performance/Benchmarker.html#method-i-run","()",""],["run","ActiveSupport::Testing::Performance::ForClassicTestUnit","ActiveSupport/Testing/Performance/ForClassicTestUnit.html#method-i-run","(result)",""],["run","ActiveSupport::Testing::Performance::ForMiniTest","ActiveSupport/Testing/Performance/ForMiniTest.html#method-i-run","(runner)",""],["run","ActiveSupport::Testing::Performance::Profiler","ActiveSupport/Testing/Performance/Profiler.html#method-i-run","()",""],["run","ActiveSupport::Testing::SetupAndTeardown::ForClassicTestUnit","ActiveSupport/Testing/SetupAndTeardown/ForClassicTestUnit.html#method-i-run","(result)","<p>This redefinition is unfortunate but test/unit shows us no alternative.\nDoubly unfortunate: hax to support …\n"],["run","ActiveSupport::Testing::SetupAndTeardown::ForMiniTest","ActiveSupport/Testing/SetupAndTeardown/ForMiniTest.html#method-i-run","(runner)",""],["run_callbacks","ActiveSupport::Callbacks","ActiveSupport/Callbacks.html#method-i-run_callbacks","(kind, *args, &block)","<p>Runs the callbacks for the given event.\n<p>Calls the before and around callbacks in the order they were set, …\n"],["run_gc","ActiveSupport::Testing::Performance","ActiveSupport/Testing/Performance.html#method-i-run_gc","()","<p>overridden by each implementation\n"],["run_in_isolation","ActiveSupport::Testing::Isolation::Forking","ActiveSupport/Testing/Isolation/Forking.html#method-i-run_in_isolation","(&blk)",""],["run_in_isolation","ActiveSupport::Testing::Isolation::Subprocess","ActiveSupport/Testing/Isolation/Subprocess.html#method-i-run_in_isolation","(&blk)","<p>Crazy H4X to get this working in windows / jruby with no forking.\n"],["run_in_transaction?","ActiveRecord::TestFixtures","ActiveRecord/TestFixtures.html#method-i-run_in_transaction-3F","()",""],["run_load_hooks","ActiveSupport","ActiveSupport.html#method-c-run_load_hooks","(name, base = Object)",""],["run_profile","ActiveSupport::Testing::Performance","ActiveSupport/Testing/Performance.html#method-i-run_profile","(metric)",""],["run_test","ActiveSupport::Testing::Performance::ForClassicTestUnit","ActiveSupport/Testing/Performance/ForClassicTestUnit.html#method-i-run_test","(metric, mode)",""],["run_test","ActiveSupport::Testing::Performance::ForMiniTest","ActiveSupport/Testing/Performance/ForMiniTest.html#method-i-run_test","(metric, mode)",""],["run_validations!","ActiveModel::Validations","ActiveModel/Validations.html#method-i-run_validations-21","()",""],["run_validations!","ActiveModel::Validations::Callbacks","ActiveModel/Validations/Callbacks.html#method-i-run_validations-21","()","<p>Overwrite run validations to include callbacks.\n"],["run_warmup","ActiveSupport::Testing::Performance","ActiveSupport/Testing/Performance.html#method-i-run_warmup","()",""],["runtime","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-c-runtime","()",""],["runtime=","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-c-runtime-3D","(value)",""],["safe_concat","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-safe_concat","(string)",""],["safe_concat","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-safe_concat","(value)",""],["safe_join","ActionView::Helpers::OutputSafetyHelper","ActionView/Helpers/OutputSafetyHelper.html#method-i-safe_join","(array, sep=$,)","<p>This method returns a html safe string similar to what\n<code>Array#join</code> would return. All items in the array, …\n"],["sample","Array","Array.html#method-i-sample","(n=nil)","<p>Backport of Array#sample based on Marc-Andre Lafortune’s\ngithub.com/marcandre/backports/ Returns a random …\n"],["sanitize","ActionView::Helpers::SanitizeHelper","ActionView/Helpers/SanitizeHelper.html#method-i-sanitize","(html, options = {})","<p>This <code>sanitize</code> helper will html encode all tags and strip all\nattributes that aren’t specifically allowed. …\n"],["sanitize","ActiveModel::MassAssignmentSecurity::Sanitizer","ActiveModel/MassAssignmentSecurity/Sanitizer.html#method-i-sanitize","(attributes)","<p>Returns all attributes not denied by the authorizer.\n"],["sanitize","HTML::FullSanitizer","HTML/FullSanitizer.html#method-i-sanitize","(text, options = {})",""],["sanitize","HTML::Sanitizer","HTML/Sanitizer.html#method-i-sanitize","(text, options = {})",""],["sanitize_conditions","ActiveRecord::Base","ActiveRecord/Base.html#method-c-sanitize_conditions","(condition, table_name = self.table_name)",""],["sanitize_css","ActionView::Helpers::SanitizeHelper","ActionView/Helpers/SanitizeHelper.html#method-i-sanitize_css","(style)","<p>Sanitizes a block of CSS code. Used by <code>sanitize</code> when it comes\nacross a style attribute.\n"],["sanitize_css","HTML::WhiteListSanitizer","HTML/WhiteListSanitizer.html#method-i-sanitize_css","(style)","<p>Sanitizes a block of css code.  Used by #sanitize when it comes across a\nstyle attribute\n"],["sanitize_dom_id","ActionController::RecordIdentifier","ActionController/RecordIdentifier.html#method-i-sanitize_dom_id","(candidate_id)","<p>Replaces characters that are invalid in HTML DOM ids with valid ones.\n"],["sanitize_for_mass_assignment","ActiveModel::MassAssignmentSecurity","ActiveModel/MassAssignmentSecurity.html#method-i-sanitize_for_mass_assignment","(attributes, role = :default)",""],["sanitize_limit","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-sanitize_limit","(limit)","<p>Sanitizes the given LIMIT parameter in order to prevent SQL injection.\n<p>The <code>limit</code> may be anything that …\n"],["sanitize_sql","ActiveRecord::Base","ActiveRecord/Base.html#method-c-sanitize_sql","(condition, table_name = self.table_name)",""],["sanitize_sql_array","ActiveRecord::Base","ActiveRecord/Base.html#method-c-sanitize_sql_array","(ary)","<p>Accepts an array of conditions. The array has each value sanitized and\ninterpolated into the SQL statement. …\n"],["sanitize_sql_for_assignment","ActiveRecord::Base","ActiveRecord/Base.html#method-c-sanitize_sql_for_assignment","(assignments)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_for_conditions","ActiveRecord::Base","ActiveRecord/Base.html#method-c-sanitize_sql_for_conditions","(condition, table_name = self.table_name)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_hash","ActiveRecord::Base","ActiveRecord/Base.html#method-c-sanitize_sql_hash","(attrs, default_table_name = self.table_name)",""],["sanitize_sql_hash_for_assignment","ActiveRecord::Base","ActiveRecord/Base.html#method-c-sanitize_sql_hash_for_assignment","(attrs)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a SET\nclause.\n\n<pre class=\"ruby\">{ :<span class=\"ruby-identifier\">status</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">nil</span>, :<span class=\"ruby-identifier\">group_id</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["sanitize_sql_hash_for_conditions","ActiveRecord::Base","ActiveRecord/Base.html#method-c-sanitize_sql_hash_for_conditions","(attrs, default_table_name = self.table_name)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a WHERE\nclause.\n\n<pre class=\"ruby\">{ :<span class=\"ruby-identifier\">name</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;foo'bar&quot;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["sanitizeable?","HTML::LinkSanitizer","HTML/LinkSanitizer.html#method-i-sanitizeable-3F","(text)",""],["sanitizeable?","HTML::Sanitizer","HTML/Sanitizer.html#method-i-sanitizeable-3F","(text)",""],["save","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-save","(*)","<p>Saves the model.\n<p>If the model is new a record gets created in the database, otherwise the\nexisting record …\n"],["save","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-i-save","()",""],["save","ActiveRecord::Validations","ActiveRecord/Validations.html#method-i-save","(options={})","<p>The validation process on save can be skipped by passing <code>:validate\n=&gt; false</code>. The regular Base#save …\n"],["save","ActiveResource::Base","ActiveResource/Base.html#method-i-save","()","<p>Saves (<code>POST</code>) or updates (<code>PUT</code>) a resource. \nDelegates to <code>create</code> if the object is new, <code>update</code>\nif it exists. …\n"],["save!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-save-21","(*)","<p>Saves the model.\n<p>If the model is new a record gets created in the database, otherwise the\nexisting record …\n"],["save!","ActiveRecord::Validations","ActiveRecord/Validations.html#method-i-save-21","(options={})","<p>Attempts to save the record just like Base#save but will raise a\n<code>RecordInvalid</code> exception instead of returning …\n"],["save!","ActiveResource::Base","ActiveResource/Base.html#method-i-save-21","()","<p>Saves the resource.\n<p>If the resource is new, it is created via <code>POST</code>, otherwise the\nexisting resource is …\n"],["save_with_validation","ActiveResource::Validations","ActiveResource/Validations.html#method-i-save_with_validation","(options={})","<p>Validate a resource and save (POST) it to the remote web service. If any\nlocal validations fail - the …\n"],["say","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-say","(message, subitem=false)",""],["say_with_time","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-say_with_time","(message)",""],["schema","ActiveResource::Base","ActiveResource/Base.html#method-c-schema","(&block)","<p>Creates a schema for this resource - setting the attributes that are known\nprior to fetching an instance …\n"],["schema","ActiveResource::Base","ActiveResource/Base.html#method-i-schema","()","<p>If no schema has been defined for the class (see\n<code>ActiveResource::schema=</code>), the default automatic schema …\n"],["schema=","ActiveResource::Base","ActiveResource/Base.html#method-c-schema-3D","(the_schema)","<p>Alternative, direct way to specify a <code>schema</code> for this Resource.\n<code>schema</code> is more flexible, but this is quick …\n"],["schema_format","ActiveRecord::Base","ActiveRecord/Base.html#method-c-schema_format","","<p>Specifies the format to use when dumping the database schema with Rails’\nRakefile. If :sql, the schema …\n"],["schema_search_path","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-schema_search_path","()","<p>Returns the active schema search path.\n"],["schema_search_path=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-schema_search_path-3D","(schema_csv)","<p>Sets the schema search path to a string of comma-separated schema names.\nNames beginning with $ have …\n"],["scope","ActiveRecord::NamedScope::ClassMethods","ActiveRecord/NamedScope/ClassMethods.html#method-i-scope","(name, scope_options = {})","<p>Adds a class method for retrieving and querying objects. A scope represents\na narrowing of a database …\n"],["scope_for_create","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-scope_for_create","()",""],["scoped","ActiveRecord::NamedScope::ClassMethods","ActiveRecord/NamedScope/ClassMethods.html#method-i-scoped","(options = nil)","<p>Returns an anonymous scope.\n\n<pre>posts = Post.scoped\nposts.size # Fires &quot;select count(*) from  posts&quot; and returns ...</pre>\n"],["scoping","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-scoping","()","<p>Scope all queries to the current scope.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Comment</span>.<span class=\"ruby-identifier\">where</span>(:<span class=\"ruby-identifier\">post_id</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">scoping</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-constant\">Comment</span>.<span class=\"ruby-identifier\">first</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["search_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-search_field","(object_name, method, options = {})","<p>Returns an input of type “search” for accessing a specified attribute\n(identified by <code>method</code> …\n"],["search_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-search_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “search”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["second","Array","Array.html#method-i-second","()","<p>Equal to <code>self[1]</code>.\n"],["second","Numeric","Numeric.html#method-i-second","()",""],["seconds","Numeric","Numeric.html#method-i-seconds","()","<p>Enables the use of time calculations and declarations, like 45.minutes +\n2.hours + 4.years.\n<p>These methods …\n"],["seconds_since_midnight","DateTime","DateTime.html#method-i-seconds_since_midnight","()","<p>Seconds since midnight: DateTime.now.seconds_since_midnight\n"],["seconds_since_midnight","Time","Time.html#method-i-seconds_since_midnight","()","<p>Seconds since midnight: Time.now.seconds_since_midnight\n"],["seconds_to_utc_offset","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-seconds_to_utc_offset","(seconds, colon = true)","<p>Assumes self represents an offset from UTC in seconds (as returned from\nTime#utc_offset) and turns this …\n"],["secret_token","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-secret_token","(request)",""],["select","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-select","(method, choices, options = {}, html_options = {})",""],["select","ActionView::Helpers::FormOptionsHelper","ActionView/Helpers/FormOptionsHelper.html#method-i-select","(object, method, choices, options = {}, html_options = {})","<p>Create a select tag and a series of contained option tags for the provided\nobject and method. The option …\n"],["select","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select","(sql, name = nil, binds = [])","<p>Returns an array of record hashes with the column names as keys and column\nvalues as values.\n"],["select","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-select","(value = Proc.new)",""],["select","HTML::Selector","HTML/Selector.html#method-i-select","(root)","<p>Selects and returns an array with all matching elements, beginning with one\nnode and traversing through …\n"],["select","HTML::Tag","HTML/Tag.html#method-i-select","(selector, *values)",""],["select_all","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_all","(arel, name = nil, binds = [])","<p>Returns an array of record hashes with the column names as keys and column\nvalues as values.\n"],["select_all","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-select_all","(arel, name = nil, binds = [])",""],["select_date","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-select_date","(date = Date.current, options = {}, html_options = {})","<p>Returns a set of html select-tags (one for year, month, and day)\npre-selected with the <code>date</code>. It’s possible …\n"],["select_datetime","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-select_datetime","(datetime = Time.current, options = {}, html_options = {})","<p>Returns a set of html select-tags (one for year, month, day, hour, minute\nand second) pre-selected with …\n"],["select_day","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-select_day","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the days 1 through 31 with\nthe current day selected. The …\n"],["select_first","HTML::Selector","HTML/Selector.html#method-i-select_first","(root)","<p>Similar to #select but returns the first matching element. Returns\n<code>nil</code> if no element matches the selector. …\n"],["select_hour","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-select_hour","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the hours 0 through 23 with\nthe current hour selected. …\n"],["select_minute","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-select_minute","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the minutes 0 through 59 with\nthe current minute selected. …\n"],["select_month","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-select_month","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the months January through\nDecember with the current month …\n"],["select_one","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_one","(arel, name = nil)","<p>Returns a record hash with the column names as keys and column values as\nvalues.\n"],["select_rows","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_rows","(sql, name = nil)","<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],["select_rows","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-select_rows","(sql, name = nil)","<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],["select_rows","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-select_rows","(sql, name = nil)","<p>DATABASE STATEMENTS ======================================\n"],["select_rows","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-select_rows","(sql, name = nil)","<p>Executes a SELECT query and returns an array of rows. Each row is an array\nof field values.\n"],["select_rows","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-select_rows","(sql, name = nil)",""],["select_second","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-select_second","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the seconds 0 through 59 with\nthe current second selected. …\n"],["select_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-select_tag","(name, option_tags = nil, options = {})","<p>Creates a dropdown selection box, or if the <code>:multiple</code> option\nis set to true, a multiple choice selection …\n"],["select_time","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-select_time","(datetime = Time.current, options = {}, html_options = {})","<p>Returns a set of html select-tags (one for hour and minute). You can set\n<code>:time_separator</code> key to format …\n"],["select_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_value","(arel, name = nil)","<p>Returns a single value from a record\n"],["select_values","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_values","(arel, name = nil)","<p>Returns an array of the values of the first column in a select:\n\n<pre>select_values(&quot;SELECT id FROM companies ...</pre>\n"],["select_year","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-select_year","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the five years on each side\nof the current, which is selected. …\n"],["selector","HTML","HTML.html#method-c-selector","(statement, *values)","<p>See HTML::Selector.new\n"],["send_action","ActionController::ImplicitRender","ActionController/ImplicitRender.html#method-i-send_action","(method, *args)",""],["send_data","ActionController::DataStreaming","ActionController/DataStreaming.html#method-i-send_data","(data, options = {})","<p>Sends the given binary data to the browser. This method is similar to\n<code>render :text =&gt; data</code>, but also …\n"],["send_data","ActionController::Instrumentation","ActionController/Instrumentation.html#method-i-send_data","(data, options = {})",""],["send_data","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-send_data","(event)",""],["send_file","ActionController::DataStreaming","ActionController/DataStreaming.html#method-i-send_file","(path, options = {})","<p>Sends the file. This uses a server-appropriate method (such as X-Sendfile)\nvia the Rack::Sendfile middleware. …\n"],["send_file","ActionController::Instrumentation","ActionController/Instrumentation.html#method-i-send_file","(path, options={})",""],["send_file","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-send_file","(event)",""],["sequence_name=","ActiveRecord::Base","ActiveRecord/Base.html#method-c-sequence_name-3D","(value = nil, &block)",""],["serial_sequence","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-serial_sequence","(table, column)",""],["serializable_hash","ActiveModel::Serialization","ActiveModel/Serialization.html#method-i-serializable_hash","(options = nil)",""],["serializable_hash","ActiveRecord::Serialization","ActiveRecord/Serialization.html#method-i-serializable_hash","(options = nil)",""],["serialize","ActiveRecord::Base","ActiveRecord/Base.html#method-c-serialize","(attr_name, class_name = Object)","<p>If you have an attribute that needs to be saved to the database as an\nobject, and retrieved as the same …\n"],["session_auth=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-session_auth-3D","(user)","<p>Set the authorized user for this session\n"],["session_id_column","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-c-session_id_column","","<p>The session id field defaults to ‘session_id’.\n"],["set","ActiveModel::Errors","ActiveModel/Errors.html#method-i-set","(key, value)","<p>Set messages for <code>key</code> to <code>value</code>\n"],["set_callback","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-set_callback","(name, *filter_list, &block)","<p>Install a callback for the given event.\n\n<pre>set_callback :save, :before, :before_meth\nset_callback :save, ...</pre>\n"],["set_content_type","ActionMailer::Base","ActionMailer/Base.html#method-i-set_content_type","(m, user_content_type, class_default)",""],["set_enablement","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-set_enablement","(enabled, observers)",""],["set_fixture_class","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-set_fixture_class","(class_names = {})",""],["set_inheritance_column","ActiveRecord::Base","ActiveRecord/Base.html#method-c-set_inheritance_column","(value = nil, &block)","<p>Sets the name of the inheritance column to use to the given value, or (if\nthe value # is nil or false) …\n"],["set_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-set_locking_column","(value = nil, &block)","<p>Set the column to use for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["set_logger","ActiveSupport::LogSubscriber::TestHelper","ActiveSupport/LogSubscriber/TestHelper.html#method-i-set_logger","(logger)","<p>Overwrite if you use another logger in your log subscriber:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">logger</span>\n  <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>.<span class=\"ruby-identifier\">logger</span> = <span class=\"ruby-ivar\">@logger</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_prefix","ActiveResource::Base","ActiveResource/Base.html#method-c-set_prefix","(value = '/')",""],["set_primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-set_primary_key","(value = nil, &block)","<p>Sets the name of the primary key column to use to the given value, or (if\nthe value is nil or false) …\n"],["set_sequence_name","ActiveRecord::Base","ActiveRecord/Base.html#method-c-set_sequence_name","(value = nil, &block)","<p>Sets the name of the sequence to use when generating ids to the given\nvalue, or (if the value is nil …\n"],["set_standard_conforming_strings","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-set_standard_conforming_strings","()","<p>Enable standard-conforming strings if available.\n"],["set_table_name","ActiveRecord::Base","ActiveRecord/Base.html#method-c-set_table_name","(value = nil, &block)","<p>Sets the table name. If the value is nil or false then the value returned\nby the given block is used. …\n"],["setup","ActiveModel::Validations::AcceptanceValidator","ActiveModel/Validations/AcceptanceValidator.html#method-i-setup","(klass)",""],["setup","ActiveModel::Validations::ConfirmationValidator","ActiveModel/Validations/ConfirmationValidator.html#method-i-setup","(klass)",""],["setup","ActiveRecord::Validations::UniquenessValidator","ActiveRecord/Validations/UniquenessValidator.html#method-i-setup","(klass)","<p>Unfortunately, we have to tie Uniqueness validators to a class.\n"],["setup","ActiveSupport::LogSubscriber::TestHelper","ActiveSupport/LogSubscriber/TestHelper.html#method-i-setup","()",""],["setup","ActiveSupport::Testing::SetupAndTeardown::ClassMethods","ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html#method-i-setup","(*args, &block)",""],["setup_controller_request_and_response","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-setup_controller_request_and_response","()",""],["setup_fixture_accessors","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-setup_fixture_accessors","(fixture_names = nil)",""],["setup_fixtures","ActiveRecord::TestFixtures","ActiveRecord/TestFixtures.html#method-i-setup_fixtures","()",""],["setup_subscriptions","ActionController::TemplateAssertions","ActionController/TemplateAssertions.html#method-i-setup_subscriptions","()",""],["setup_with_controller","ActionView::TestCase::Behavior","ActionView/TestCase/Behavior.html#method-i-setup_with_controller","()",""],["show_variable","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-show_variable","(name)","<p>SHOW VARIABLES LIKE ‘name’.\n"],["show_variable","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-show_variable","(name)","<p>SHOW VARIABLES LIKE ‘name’\n"],["silence","ActiveSupport::Benchmarkable","ActiveSupport/Benchmarkable.html#method-i-silence","()","<p>Silence the logger during the execution of the block.\n"],["silence","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-i-silence","(temporary_level = ERROR)","<p>Silences the logger for the duration of the block.\n"],["silence","ActiveSupport::Deprecation","ActiveSupport/Deprecation.html#method-c-silence","()","<p>Silence deprecation warnings within the block.\n"],["silence","Kernel","Kernel.html#method-i-silence","(stream)",""],["silence!","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-silence-21","()","<p>Silence the logger.\n"],["silence_stream","Kernel","Kernel.html#method-i-silence_stream","(stream)","<p>Silences any stream for the duration of the block.\n\n<pre>silence_stream(STDOUT) do\n  puts 'This will never be ...</pre>\n"],["silence_warnings","Kernel","Kernel.html#method-i-silence_warnings","()","<p>Sets $VERBOSE to nil for the duration of the block and back to its original\nvalue afterwards.\n\n<pre>silence_warnings ...</pre>\n"],["silencer","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-c-silencer","","<p>Set to false to disable the silencer\n"],["simple_format","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-simple_format","(text, html_options={}, options={})","<p>Returns <code>text</code> transformed into HTML using simple formatting\nrules. Two or more consecutive newlines(<code>\\n\\n</code> …\n"],["simple_selector","HTML::Selector","HTML/Selector.html#method-i-simple_selector","(statement, values, can_negate = true)","<p>Creates a simple selector given the statement and array of substitution\nvalues.\n<p>Returns a hash with the …\n"],["since","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-since","(time = ::Time.current)","<p>Calculates a new Time or Date that is as far in the future as this Duration\nrepresents.\n"],["since","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-since","(other)",""],["since","Date","Date.html#method-i-since","(seconds)","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["since","DateTime","DateTime.html#method-i-since","(seconds)","<p>Returns a new DateTime representing the time a number of seconds since the\ninstance time Do not use this …\n"],["since","Numeric","Numeric.html#method-i-since","(time = ::Time.current)","<p>Reads best with argument:  10.minutes.since(time)\n"],["since","Time","Time.html#method-i-since","(seconds)","<p>Returns a new Time representing the time a number of seconds since the\ninstance time\n"],["singleton_class","Kernel","Kernel.html#method-i-singleton_class","()","<p>Returns the object’s singleton class.\n"],["singular","ActiveModel::Naming","ActiveModel/Naming.html#method-c-singular","(record_or_class)","<p>Returns the singular class name of a record or class. Examples:\n\n<pre>ActiveModel::Naming.singular(post)    ...</pre>\n"],["singular","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-singular","(rule, replacement)","<p>Specifies a new singularization rule and its replacement. The rule can\neither be a string or a regular …\n"],["singularize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-singularize","(word)","<p>The reverse of <code>pluralize</code>, returns the singular form of a word\nin a string.\n<p>Examples:\n\n<pre>&quot;posts&quot;.singularize ...</pre>\n"],["singularize","String","String.html#method-i-singularize","()","<p>The reverse of <code>pluralize</code>, returns the singular form of a word\nin a string.\n\n<pre>&quot;posts&quot;.singularize        ...</pre>\n"],["site","ActiveResource::Base","ActiveResource/Base.html#method-c-site","()","<p>Gets the URI of the REST resources to map for this class.  The site\nvariable is required for Active Resource’s …\n"],["site=","ActiveResource::Base","ActiveResource/Base.html#method-c-site-3D","(site)","<p>Sets the URI of the REST resources to map for this class to the value in\nthe <code>site</code> argument. The site …\n"],["site=","ActiveResource::Connection","ActiveResource/Connection.html#method-i-site-3D","(site)","<p>Set URI for remote service.\n"],["size","ActiveModel::Errors","ActiveModel/Errors.html#method-i-size","()","<p>Returns the number of error messages.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">add</span>(:<span class=\"ruby-identifier\">name</span>, <span class=\"ruby-string\">&quot;can't be blank&quot;</span>)\n<span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">size</span> <span class=\"ruby-comment\"># =&gt; 1</span>\n<span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">add</span>(:<span class=\"ruby-identifier\">name</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["size","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-i-size","()",""],["size","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-size","()","<p>Returns size of the records.\n"],["size","ActiveSupport::Cache::Entry","ActiveSupport/Cache/Entry.html#method-i-size","()","<p>Returns the size of the cached value. This could be less than value.size if\nthe data is compressed.\n"],["size","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-size","()","<p>Returns the number of codepoints in the string\n"],["skip_callback","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-skip_callback","(name, *filter_list, &block)","<p>Skip a previously set callback. Like <code>set_callback</code>,\n<code>:if</code> or <code>:unless</code> options may be passed in order to\ncontrol …\n"],["skip_default_locale!","ActionView::LookupContext::Details","ActionView/LookupContext/Details.html#method-i-skip_default_locale-21","()","<p>Do not use the default locale on template lookup.\n"],["slice","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-slice","(*args)","<p>Implements Unicode-aware slice with codepoints. Slicing on one point\nreturns the codepoints for that …\n"],["slice","Hash","Hash.html#method-i-slice","(*keys)","<p>Slice a hash to include only the given keys. This is useful for limiting an\noptions hash to valid keys …\n"],["slice!","Hash","Hash.html#method-i-slice-21","(*keys)","<p>Replaces the hash with only the given keys. Returns a hash contained the\nremoved key/value pairs\n\n<pre class=\"ruby\">{:<span class=\"ruby-identifier\">a</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["split","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-split","(*args)","<p>Works just like <code>String#split</code>, with the exception that the\nitems in the resulting list are Chars instances …\n"],["split","Array","Array.html#method-i-split","(value = nil)","<p>Divides the array into one or more subarrays based on a delimiting\n<code>value</code> or the result of an optional …\n"],["sql","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-i-sql","(event)",""],["sql_for_insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-sql_for_insert","(sql, pk, id_value, sequence_name, binds)",""],["sql_for_insert","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-sql_for_insert","(sql, pk, id_value, sequence_name, binds)",""],["sql_query_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-sql_query_length","()","<p>Returns the maximum length of an SQL query.\n"],["sqlite_version","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-sqlite_version","()",""],["squish","String","String.html#method-i-squish","()","<p>Returns the string, first removing all whitespace on both ends of the\nstring, and then changing remaining …\n"],["squish!","String","String.html#method-i-squish-21","()","<p>Performs a destructive squish. See String#squish.\n"],["ssl_options","ActiveResource::Base","ActiveResource/Base.html#method-c-ssl_options","()","<p>Returns the SSL options hash.\n"],["ssl_options=","ActiveResource::Base","ActiveResource/Base.html#method-c-ssl_options-3D","(opts={})","<p>Options that will get applied to an SSL connection.\n<p><code>:key</code> - An OpenSSL::PKey::RSA or OpenSSL::PKey::DSA ...\n"],["ssl_options=","ActiveResource::Connection","ActiveResource/Connection.html#method-i-ssl_options-3D","(opts={})","<p>Hash of options applied to Net::HTTP instance when <code>site</code>\nprotocol is ‘https’.\n"],["stale?","ActionController::ConditionalGet","ActionController/ConditionalGet.html#method-i-stale-3F","(options)","<p>Sets the etag and/or last_modified on the response and checks it against\nthe client request. If the request …\n"],["start_document","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_document","()",""],["start_element","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_element","(name, attrs = [])",""],["start_processing","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-start_processing","(event)",""],["start_transaction","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-start_transaction","()",""],["stats","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-stats","()","<p>Get the statistics from the memcached servers.\n"],["status","ActionController::Metal","ActionController/Metal.html#method-i-status","()",""],["status=","ActionController::Metal","ActionController/Metal.html#method-i-status-3D","(status)",""],["step_with_blockless","Range","Range.html#method-i-step_with_blockless","(*args, &block)","<p>Return an array when step is called without a block.\n"],["sti_name","ActiveRecord::Base","ActiveRecord/Base.html#method-c-sti_name","()",""],["store","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-store","(name)",""],["store","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-store","(key, value)",""],["store","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-store","(key, value)",""],["stream","ActionController::Streaming::ClassMethods","ActionController/Streaming/ClassMethods.html#method-i-stream","(options={})","<p>Render streaming templates. It accepts :only, :except, :if and :unless as\noptions to specify when to …\n"],["strftime","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-strftime","(format)","<p>Replaces <code>%Z</code> and <code>%z</code> directives with\n<code>zone</code> and <code>formatted_offset</code>, respectively, before\npassing to Time#strftime …\n"],["stringify_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys","()",""],["stringify_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys","()",""],["stringify_keys","Hash","Hash.html#method-i-stringify_keys","()","<p>Return a new hash with all keys converted to strings.\n"],["stringify_keys!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys-21","()",""],["stringify_keys!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys-21","()",""],["stringify_keys!","Hash","Hash.html#method-i-stringify_keys-21","()","<p>Destructively convert all keys to strings.\n"],["strip","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-strip","()","<p>Strips entire range of Unicode whitespace from the right and left of the\nstring.\n"],["strip_heredoc","String","String.html#method-i-strip_heredoc","()","<p>Strips indentation in heredocs.\n<p>For example in\n\n<pre>if options[:usage]\n  puts &lt;&lt;-USAGE.strip_heredoc\n    This ...</pre>\n"],["strip_links","ActionView::Helpers::SanitizeHelper","ActionView/Helpers/SanitizeHelper.html#method-i-strip_links","(html)","<p>Strips all link tags from <code>text</code> leaving just the link text.\n<p>Examples\n\n<pre>strip_links('&lt;a href=&quot;http://www.rubyonrails.org&quot;&gt;Ruby ...</pre>\n"],["strip_tags","ActionView::Helpers::SanitizeHelper","ActionView/Helpers/SanitizeHelper.html#method-i-strip_tags","(html)","<p>Strips all HTML tags from the <code>html</code>, including comments.  This\nuses the html-scanner tokenizer and so …\n"],["structure_dump","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-structure_dump","()","<p>SCHEMA STATEMENTS ========================================\n"],["structure_dump","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-structure_dump","()","<p>Returns a string of <code>CREATE TABLE</code> SQL statement(s) for\nrecreating the entire structure of the database. …\n"],["stylesheet_link_tag","ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers","ActionView/Helpers/AssetTagHelper/StylesheetTagHelpers.html#method-i-stylesheet_link_tag","(*sources)","<p>Returns a stylesheet link tag for the sources specified as arguments. If\nyou don’t specify an extension, …\n"],["stylesheet_path","ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers","ActionView/Helpers/AssetTagHelper/StylesheetTagHelpers.html#method-i-stylesheet_path","(source)","<p>Computes the path to a stylesheet asset in the public stylesheets\ndirectory. If the <code>source</code> filename has …\n"],["submit","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-submit","(value=nil, options={})","<p>Add the submit button for the given form. When no value is given, it checks\nif the object is a new resource …\n"],["submit_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-submit_tag","(value = \"Save changes\", options = {})","<p>Creates a submit button with the text <code>value</code> as the caption.\n<p>Options\n<p><code>:confirm =&gt; 'question?'</code> - If present ...\n"],["subscribe","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-c-subscribe","(*args, &block)",""],["subscribe","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-subscribe","(pattern = nil, block = Proc.new)",""],["substitute_at","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-substitute_at","(column, index)","<p>Returns a bind substitution value given a <code>column</code> and list of\ncurrent <code>binds</code>\n"],["substitute_at","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-substitute_at","(column, index)",""],["substitute_at","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-substitute_at","(column, index)",""],["success?","ActiveResource::Response","ActiveResource/Response.html#method-i-success-3F","()","<p>Returns true if code is 2xx, false otherwise.\n"],["sum","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-sum","(column_name, options = {})","<p>Calculates the sum of values on a given column. The value is returned with\nthe same data type of the …\n"],["sum","Enumerable","Enumerable.html#method-i-sum","(identity = 0, &block)","<p>Calculates a sum from the elements. Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">payments</span>.<span class=\"ruby-identifier\">sum</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">p</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">price</span> * <span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">tax_rate</span> }\n<span class=\"ruby-identifier\">payments</span>.<span class=\"ruby-identifier\">sum</span>(&amp;:<span class=\"ruby-identifier\">price</span>)\n</pre>\n"],["sunday","Date","Date.html#method-i-sunday","()",""],["superclass_delegating_accessor","Class","Class.html#method-i-superclass_delegating_accessor","(name, options = {})",""],["supports_add_column?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_add_column-3F","()","<p>Returns true if SQLite version is ‘3.1.6’ or greater, false otherwise.\n"],["supports_bulk_alter?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_bulk_alter-3F","()",""],["supports_count_distinct?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_count_distinct-3F","()","<p>Does this adapter support using DISTINCT within COUNT? This is\n<code>true</code> for all adapters except sqlite.\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_ddl_transactions-3F","()","<p>Does this adapter support DDL rollbacks in transactions? That is, would\nCREATE TABLE or ALTER TABLE get …\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_ddl_transactions-3F","()",""],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_ddl_transactions-3F","()","<p>Returns true if SQLite version is ‘2.0.0’ or greater, false otherwise.\n"],["supports_insert_with_returning?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_insert_with_returning-3F","()",""],["supports_migrations?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_migrations-3F","()","<p>Does this adapter support migrations? Backend specific, as the abstract\nadapter always returns <code>false</code> …\n"],["supports_migrations?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_migrations-3F","()","<p>Returns true, since this connection adapter supports migrations.\n"],["supports_migrations?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_migrations-3F","()","<p>Returns true, since this connection adapter supports migrations.\n"],["supports_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_primary_key-3F","()","<p>Can this adapter determine the primary key for tables not attached to an\nActive Record class, such as …\n"],["supports_primary_key?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_primary_key-3F","()",""],["supports_savepoints?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_savepoints-3F","()","<p>Does this adapter support savepoints? PostgreSQL and MySQL do, SQLite &lt;\n3.6.8 does not.\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_savepoints-3F","()","<p>Returns true, since this connection adapter supports savepoints.\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_savepoints-3F","()","<p>Returns true, since this connection adapter supports savepoints.\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_savepoints-3F","()","<p>Returns true if SQLite version is ‘3.6.8’ or greater, false otherwise.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-supports_statement_cache-3F","()","<p>Returns <code>true</code> when the connection adapter supports prepared\nstatement caching, otherwise returns <code>false</code> …\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-supports_statement_cache-3F","()","<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_statement_cache-3F","()","<p>Returns <code>true</code>, since this connection adapter supports prepared\nstatement caching.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_statement_cache-3F","()","<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],["supports_streaming?","ActionView::Template","ActionView/Template.html#method-i-supports_streaming-3F","()","<p>Returns if the underlying handler supports streaming. If so, a streaming\nbuffer <strong>may</strong> be passed when it …\n"],["supports_streaming?","ActionView::Template::Handlers::ERB","ActionView/Template/Handlers/ERB.html#method-i-supports_streaming-3F","()",""],["suppress","Kernel","Kernel.html#method-i-suppress","(*exception_classes)","<p>Blocks and ignores any exception passed as argument if raised within the\nblock.\n\n<pre>suppress(ZeroDivisionError) ...</pre>\n"],["suppress_messages","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-suppress_messages","()",""],["symbolize_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-symbolize_keys","()",""],["symbolize_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-symbolize_keys","()",""],["symbolize_keys","Hash","Hash.html#method-i-symbolize_keys","()","<p>Return a new hash with all keys converted to symbols, as long as they\nrespond to <code>to_sym</code>.\n"],["symbolize_keys!","Hash","Hash.html#method-i-symbolize_keys-21","()","<p>Destructively convert all keys to symbols, as long as they respond to\n<code>to_sym</code>.\n"],["symbolized_base_class","ActiveRecord::Base","ActiveRecord/Base.html#method-c-symbolized_base_class","()",""],["symbolized_sti_name","ActiveRecord::Base","ActiveRecord/Base.html#method-c-symbolized_sti_name","()",""],["synchronize","Module","Module.html#method-i-synchronize","(*methods)","<p>Synchronize access around a method, delegating synchronization to a\nparticular mutex. A mutex (either …\n"],["t","ActionView::Helpers::TranslationHelper","ActionView/Helpers/TranslationHelper.html#method-i-t","(key, options = {})",""],["table_alias_for","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_alias_for","(table_name)","<p>Truncates a table alias according to the limits of the current adapter.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_alias_length","()","<p>Returns the maximum length of a table alias.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-table_alias_length","()","<p>Returns the configured supported identifier length supported by PostgreSQL\n"],["table_exists?","ActiveRecord::Base","ActiveRecord/Base.html#method-c-table_exists-3F","()","<p>Indicates whether the table associated with this class exists\n"],["table_exists?","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-table_exists-3F","(name)","<p>A cached lookup for table existence.\n"],["table_exists?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-table_exists-3F","(name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-table_exists-3F","(name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-table_exists-3F","(name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_exists-3F","(table_name)","<p>Checks to see if the table <code>table_name</code> exists on the database.\n<p>Example\n\n<pre>table_exists?(:developers)</pre>\n"],["table_name","ActiveRecord::Base","ActiveRecord/Base.html#method-c-table_name","()","<p>Guesses the table name (in forced lower-case) based on the name of the\nclass in the inheritance hierarchy …\n"],["table_name","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-c-table_name","","<p>The table name defaults to ‘sessions’.\n"],["table_name=","ActiveRecord::Base","ActiveRecord/Base.html#method-c-table_name-3D","(value = nil, &block)",""],["table_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_name_length","()","<p>Returns the maximum length of a table name.\n"],["table_name_prefix","ActiveRecord::Base","ActiveRecord/Base.html#method-c-table_name_prefix","","<p>Accessor for the name of the prefix string to prepend to every table name.\nSo if set to “basecamp_”, …\n"],["table_name_suffix","ActiveRecord::Base","ActiveRecord/Base.html#method-c-table_name_suffix","","<p>Works like <code>table_name_prefix</code>, but appends instead of prepends\n(set to “_basecamp” gives “ …\n"],["table_rows","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-i-table_rows","()","<p>Return a hash of rows to be inserted.  The key is the table, the value is a\nlist of rows to insert to …\n"],["table_structure","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-table_structure","(table_name)",""],["tableize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-tableize","(class_name)","<p>Create the name of a table like Rails does for models to table names. This\nmethod uses the <code>pluralize</code> …\n"],["tableize","String","String.html#method-i-tableize","()","<p>Creates the name of a table like Rails does for models to table names. This\nmethod uses the <code>pluralize</code> …\n"],["tables","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-tables","(name = nil)","<p>Returns the list of all tables in the schema search path or a specified\nschema.\n"],["tag","ActionView::Helpers::ActiveModelInstanceTag","ActionView/Helpers/ActiveModelInstanceTag.html#method-i-tag","(type, options, *)",""],["tag","ActionView::Helpers::TagHelper","ActionView/Helpers/TagHelper.html#method-i-tag","(name, options = nil, open = false, escape = true)","<p>Returns an empty HTML tag of type <code>name</code> which by default is\nXHTML compliant. Set <code>open</code> to true to create …\n"],["teardown","ActiveSupport::LogSubscriber::TestHelper","ActiveSupport/LogSubscriber/TestHelper.html#method-i-teardown","()",""],["teardown","ActiveSupport::Testing::SetupAndTeardown::ClassMethods","ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html#method-i-teardown","(*args, &block)",""],["teardown_fixtures","ActiveRecord::TestFixtures","ActiveRecord/TestFixtures.html#method-i-teardown_fixtures","()",""],["teardown_subscriptions","ActionController::TemplateAssertions","ActionController/TemplateAssertions.html#method-i-teardown_subscriptions","()",""],["telephone_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-telephone_field","(object_name, method, options = {})","<p>Returns a text_field of type “tel”.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">telephone_field</span>(<span class=\"ruby-string\">&quot;user&quot;</span>, <span class=\"ruby-string\">&quot;phone&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &lt;input id=&quot;user_phone&quot; ...</span>\n</pre>\n"],["telephone_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-telephone_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “tel”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["template_exists?","ActionView::LookupContext::ViewPaths","ActionView/LookupContext/ViewPaths.html#method-i-template_exists-3F","(name, prefixes = [], partial = false, keys = [])",""],["terabyte","Numeric","Numeric.html#method-i-terabyte","()",""],["terabytes","Numeric","Numeric.html#method-i-terabytes","()",""],["test","ActiveSupport::Testing::Declarative","ActiveSupport/Testing/Declarative.html#method-i-test","(name, &block)","<p>test “verify something” do\n\n<pre>...</pre>\n<p>end\n"],["test_errors_aref","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_errors_aref","()","<p>Errors Testing\n<p>Returns an object that has :[] and :full_messages defined on it. See below\nfor more details. …\n"],["test_errors_full_messages","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_errors_full_messages","()","<p>Returns an Array of all error messages for the object. Each message should\ncontain information about …\n"],["test_model_naming","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_model_naming","()","<p>Naming\n<p>Model.model_name must return a string with some convenience methods as\n:human and :partial_path. …\n"],["test_persisted?","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_persisted-3F","()","<p>Responds to persisted?\n<p>Returns a boolean that specifies whether the object has been persisted yet.\nThis …\n"],["test_to_key","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_to_key","()","<p>Responds to to_key\n<p>Returns an Enumerable of all (primary) key attributes or nil if\nmodel.persisted? is …\n"],["test_to_param","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_to_param","()","<p>Responds to to_param\n<p>Returns a string representing the object’s key suitable for use in URLs or\nnil if …\n"],["test_valid?","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_valid-3F","()","<p>Responds to valid?\n<p>Returns a boolean that specifies whether the object is in a valid or\ninvalid state. …\n"],["tests","ActionController::TestCase::Behavior::ClassMethods","ActionController/TestCase/Behavior/ClassMethods.html#method-i-tests","(controller_class)","<p>Sets the controller class name. Useful if the name can’t be inferred from\ntest class. Expects <code>controller_class</code> …\n"],["tests","ActionView::TestCase::Behavior::ClassMethods","ActionView/TestCase/Behavior/ClassMethods.html#method-i-tests","(helper_class)",""],["text_area","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-text_area","(object_name, method, options = {})","<p>Returns a textarea opening and closing tag set tailored for accessing a\nspecified attribute (identified …\n"],["text_area_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-text_area_tag","(name, content = nil, options = {})","<p>Creates a text input area; use a textarea for longer text inputs such as\nblog posts or descriptions. …\n"],["text_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-text_field","(object_name, method, options = {})","<p>Returns an input tag of the “text” type tailored for accessing a specified\nattribute (identified …\n"],["text_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-text_field_tag","(name, value = nil, options = {})","<p>Creates a standard text field; use these text fields to input smaller\nchunks of text like a username …\n"],["third","Array","Array.html#method-i-third","()","<p>Equal to <code>self[2]</code>.\n"],["tidy_bytes","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-tidy_bytes","(force = false)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string. …\n"],["tidy_bytes","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-tidy_bytes","(string, force = false)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string. …\n"],["time","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-time","()","<p>Returns a Time or DateTime instance that represents the time in\n<code>time_zone</code>.\n"],["time_ago_in_words","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-time_ago_in_words","(from_time, include_seconds = false)","<p>Like <code>distance_of_time_in_words</code>, but where <code>to_time</code>\nis fixed to <code>Time.now</code>.\n<p>Examples\n\n<pre>time_ago_in_words(3.minutes.from_now) ...</pre>\n"],["time_select","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-time_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for hour, minute and optionally second)\npre-selected for accessing …\n"],["time_select","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-time_select","(method, options = {}, html_options = {})",""],["time_tag","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-time_tag","(date_or_time, *args)","<p>Returns an html time tag for the given date or time.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">time_tag</span> <span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">today</span>  <span class=\"ruby-comment\"># =&gt;</span>\n  <span class=\"ruby-operator\">&lt;</span><span class=\"ruby-identifier\">time</span> <span class=\"ruby-identifier\">datetime</span>=<span class=\"ruby-string\">&quot;2010-11-04&quot;</span><span class=\"ruby-operator\">&gt;</span><span class=\"ruby-constant\">November</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["time_with_block","ActiveSupport::Testing::Performance::Profiler","ActiveSupport/Testing/Performance/Profiler.html#method-i-time_with_block","()",""],["time_with_datetime_fallback","Time","Time.html#method-c-time_with_datetime_fallback","(utc_or_local, year, month=1, day=1, hour=0, min=0, sec=0, usec=0)","<p>Returns a new Time if requested year can be accommodated by Ruby’s Time\nclass (i.e., if year is within …\n"],["time_zone_options_for_select","ActionView::Helpers::FormOptionsHelper","ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_options_for_select","(selected = nil, priority_zones = nil, model = ::ActiveSupport::TimeZone)","<p>Returns a string of option tags for pretty much any time zone in the world.\nSupply a ActiveSupport::TimeZone …\n"],["time_zone_select","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-time_zone_select","(method, priority_zones = nil, options = {}, html_options = {})",""],["time_zone_select","ActionView::Helpers::FormOptionsHelper","ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_select","(object, method, priority_zones = nil, options = {}, html_options = {})","<p>Return select and option tags for the given object and method, using\n#time_zone_options_for_select to …\n"],["timeout","ActiveResource::Base","ActiveResource/Base.html#method-c-timeout","()","<p>Gets the number of seconds after which requests to the REST API should time\nout.\n"],["timeout=","ActiveResource::Base","ActiveResource/Base.html#method-c-timeout-3D","(timeout)","<p>Sets the number of seconds after which requests to the REST API should time\nout.\n"],["timeout=","ActiveResource::Connection","ActiveResource/Connection.html#method-i-timeout-3D","(timeout)","<p>Sets the number of seconds after which HTTP requests to the remote service\nshould time out.\n"],["timestamped_migrations","ActiveRecord::Base","ActiveRecord/Base.html#method-c-timestamped_migrations","","<p>Specify whether or not to use timestamps for migration versions\n"],["timestamps","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-timestamps","()","<p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>)\ncolumns to the table. See SchemaStatements#add_timestamps …\n"],["timestamps","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-timestamps","(*args)","<p>Appends <code>:datetime</code> columns <code>:created_at</code> and\n<code>:updated_at</code> to the table.\n"],["titlecase","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-titlecase","()",""],["titlecase","String","String.html#method-i-titlecase","()",""],["titleize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-titleize","(word)","<p>Capitalizes all the words and replaces some characters in the string to\ncreate a nicer looking title. …\n"],["titleize","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-titleize","()","<p>Capitalizes the first letter of every word, when possible.\n<p>Example:\n\n<pre>&quot;ÉL QUE SE ENTERÓ&quot;.mb_chars.titleize ...</pre>\n"],["titleize","String","String.html#method-i-titleize","()","<p>Capitalizes all the words and replaces some characters in the string to\ncreate a nicer looking title. …\n"],["to","Array","Array.html#method-i-to","(position)","<p>Returns the beginning of the array up to <code>position</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">to</span>(<span class=\"ruby-value\">0</span>)  <span class=\"ruby-comment\"># =&gt; %w( a )</span>\n<span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">to</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to","String","String.html#method-i-to","(position)","<p>Returns the beginning of the string up to the <code>position</code>\ntreating the string as an array (where 0 is the …\n"],["to_a","ActiveModel::Errors","ActiveModel/Errors.html#method-i-to_a","()","<p>Returns an array of error messages, with the attribute name included\n\n<pre>p.errors.add(:name, &quot;can't be blank&quot;) ...</pre>\n"],["to_a","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-to_a","()",""],["to_a","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_a","()",""],["to_boolean_select_tag","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-to_boolean_select_tag","(options = {})",""],["to_check_box_tag","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-to_check_box_tag","(options = {}, checked_value = \"1\", unchecked_value = \"0\")",""],["to_content_tag","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-to_content_tag","(tag_name, options = {})",""],["to_d","BigDecimal","BigDecimal.html#method-i-to_d","()",""],["to_date","Date","Date.html#method-i-to_date","()","<p>A method to keep Time, Date and DateTime instances interchangeable on\nconversions. In this case, it simply …\n"],["to_date","DateTime","DateTime.html#method-i-to_date","()","<p>Converts self to a Ruby Date object; time portion is discarded.\n"],["to_date","Mysql::Time","Mysql/Time.html#method-i-to_date","()","<p>This monkey patch is for test_additional_columns_from_join_table\n"],["to_date","String","String.html#method-i-to_date","()",""],["to_datetime","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_datetime","()",""],["to_datetime","Date","Date.html#method-i-to_datetime","()","<p>Converts a Date instance to a DateTime, where the time is set to the\nbeginning of the day and UTC offset …\n"],["to_datetime","DateTime","DateTime.html#method-i-to_datetime","()","<p>To be able to keep Times, Dates and DateTimes interchangeable on\nconversions.\n"],["to_datetime","String","String.html#method-i-to_datetime","()",""],["to_default_s","Array","Array.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Date","Date.html#method-i-to_default_s","(format = :default)",""],["to_default_s","DateTime","DateTime.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Range","Range.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Time","Time.html#method-i-to_default_s","(format = :default)",""],["to_f","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_f","()",""],["to_f","DateTime","DateTime.html#method-i-to_f","()","<p>Converts self to a floating-point number of seconds since the Unix epoch.\n"],["to_format","ActionController::Responder","ActionController/Responder.html#method-i-to_format","()","<p>All other formats follow the procedure below. First we try to render a\ntemplate, if the template is not …\n"],["to_formatted_s","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_formatted_s","(format = :default)",""],["to_formatted_s","Array","Array.html#method-i-to_formatted_s","(format = :default)","<p>Converts a collection of elements into a formatted string by calling\n<code>to_s</code> on all elements and joining …\n"],["to_formatted_s","BigDecimal","BigDecimal.html#method-i-to_formatted_s","(format = DEFAULT_STRING_FORMAT)",""],["to_formatted_s","Date","Date.html#method-i-to_formatted_s","(format = :default)","<p>Convert to a formatted string. See DATE_FORMATS for predefined formats.\n<p>This method is aliased to <code>to_s</code> …\n"],["to_formatted_s","DateTime","DateTime.html#method-i-to_formatted_s","(format = :default)","<p>Convert to a formatted string. See Time::DATE_FORMATS for predefined\nformats.\n<p>This method is aliased to …\n"],["to_formatted_s","Range","Range.html#method-i-to_formatted_s","(format = :default)","<p>Gives a human readable format of the range.\n<p>Example\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">100</span>].<span class=\"ruby-identifier\">to_formatted_s</span> <span class=\"ruby-comment\"># =&gt; &quot;1..100&quot;</span>\n</pre>\n"],["to_formatted_s","Time","Time.html#method-i-to_formatted_s","(format = :default)","<p>Converts to a formatted string. See DATE_FORMATS for builtin formats.\n<p>This method is aliased to <code>to_s</code>. …\n"],["to_hash","ActiveModel::Errors","ActiveModel/Errors.html#method-i-to_hash","()",""],["to_hash","ActiveRecord::Result","ActiveRecord/Result.html#method-i-to_hash","()",""],["to_hash","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-to_hash","()","<p>Convert to a Hash with String keys.\n"],["to_hash","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-to_hash","()","<p>Convert to a Hash with String keys.\n"],["to_html","ActionController::Responder","ActionController/Responder.html#method-i-to_html","()","<p>HTML format does not render the resource, it always attempt to render a\ntemplate.\n"],["to_i","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_i","()",""],["to_i","DateTime","DateTime.html#method-i-to_i","()","<p>Converts self to an integer number of seconds since the Unix epoch.\n"],["to_input_field_tag","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-to_input_field_tag","(field_type, options = {})",""],["to_js","ActionController::Responder","ActionController/Responder.html#method-i-to_js","()","<p>to_js simply tries to render a template. If no template is found, raises\nthe error.\n"],["to_json","ActiveResource::Base","ActiveResource/Base.html#method-i-to_json","(options={})",""],["to_key","ActiveModel::Conversion","ActiveModel/Conversion.html#method-i-to_key","()","<p>Returns an Enumerable of all key attributes if any is set, regardless if\nthe object is persisted or not. …\n"],["to_key","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-to_key","()","<p>Returns this record’s primary key value wrapped in an Array if one is\navailable\n"],["to_label_tag","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-to_label_tag","(text = nil, options = {}, &block)",""],["to_model","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-to_model","()",""],["to_model","ActiveModel::Conversion","ActiveModel/Conversion.html#method-i-to_model","()","<p>If your object is already designed to implement all of the Active Model you\ncan use the default <code>:to_model</code> …\n"],["to_number_field_tag","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-to_number_field_tag","(field_type, options = {})",""],["to_options","Hash","Hash.html#method-i-to_options","()",""],["to_options!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options-21","()",""],["to_options!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options-21","()",""],["to_options!","Hash","Hash.html#method-i-to_options-21","()",""],["to_param","ActiveModel::Conversion","ActiveModel/Conversion.html#method-i-to_param","()","<p>Returns a string representing the object’s key suitable for use in URLs, or\nnil if <code>persisted?</code> is false. …\n"],["to_param","ActiveRecord::Base","ActiveRecord/Base.html#method-i-to_param","()","<p>Returns a String, which Action Pack uses for constructing an URL to this\nobject. The default implementation …\n"],["to_param","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-to_param","()",""],["to_param","Array","Array.html#method-i-to_param","()","<p>Calls <code>to_param</code> on all its elements and joins the result with\nslashes. This is used by <code>url_for</code> in Action …\n"],["to_param","FalseClass","FalseClass.html#method-i-to_param","()",""],["to_param","Hash","Hash.html#method-i-to_param","(namespace = nil)","<p>Returns a string representation of the receiver suitable for use as a URL\nquery string:\n\n<pre class=\"ruby\">{:<span class=\"ruby-identifier\">name</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'David'</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_param","NilClass","NilClass.html#method-i-to_param","()",""],["to_param","Object","Object.html#method-i-to_param","()","<p>Alias of <code>to_s</code>.\n"],["to_param","TrueClass","TrueClass.html#method-i-to_param","()",""],["to_path","ActionView::FileSystemResolver","ActionView/FileSystemResolver.html#method-i-to_path","()",""],["to_query","Array","Array.html#method-i-to_query","(key)","<p>Converts an array into a string suitable for use as a URL query string,\nusing the given <code>key</code> as the param …\n"],["to_query","Hash","Hash.html#method-i-to_query","(namespace = nil)",""],["to_query","Object","Object.html#method-i-to_query","(key)","<p>Converts an object into a string suitable for use as a URL query string,\nusing the given <code>key</code> as the param …\n"],["to_radio_button_tag","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-to_radio_button_tag","(tag_value, options = {})",""],["to_s","ActionView::FileSystemResolver","ActionView/FileSystemResolver.html#method-i-to_s","()",""],["to_s","ActionView::FixtureResolver","ActionView/FixtureResolver.html#method-i-to_s","()",""],["to_s","ActiveResource::Request","ActiveResource/Request.html#method-i-to_s","()",""],["to_s","ActiveResource::SSLError","ActiveResource/SSLError.html#method-i-to_s","()",""],["to_s","ActiveResource::TimeoutError","ActiveResource/TimeoutError.html#method-i-to_s","()",""],["to_s","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-to_s","()",""],["to_s","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_s","(format = :default)","<p><code>:db</code> format outputs time in UTC; all others output time in\nlocal. Uses TimeWithZone's <code>strftime</code>, so <code>%Z</code> ...\n"],["to_s","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-to_s","()","<p>Returns a textual representation of this time zone.\n"],["to_s","Array","Array.html#method-i-to_s","(format = :default)",""],["to_s","BigDecimal","BigDecimal.html#method-i-to_s","(format = DEFAULT_STRING_FORMAT)",""],["to_s","Date","Date.html#method-i-to_s","(format = :default)",""],["to_s","DateTime","DateTime.html#method-i-to_s","(format = :default)",""],["to_s","Range","Range.html#method-i-to_s","(format = :default)",""],["to_s","Time","Time.html#method-i-to_s","(format = :default)",""],["to_sentence","Array","Array.html#method-i-to_sentence","(options = {})","<p>Converts the array to a comma-separated sentence where the last element is\njoined by the connector word. …\n"],["to_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-to_sql","(arel)","<p>Converts an arel AST to SQL\n"],["to_sql","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-to_sql","()","<p>Returns a String whose contents are the column definitions concatenated\ntogether. This string can then …\n"],["to_sql","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-to_sql","()",""],["to_tag","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-to_tag","(key, value, options)",""],["to_text_area_tag","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-to_text_area_tag","(options = {})",""],["to_time","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_time","()","<p>A TimeWithZone acts like a Time, so just return <code>self</code>.\n"],["to_time","Date","Date.html#method-i-to_time","(form = :local)","<p>Converts a Date instance to a Time, where the time is set to the beginning\nof the day. The timezone can …\n"],["to_time","DateTime","DateTime.html#method-i-to_time","()","<p>Attempts to convert self to a Ruby Time object; returns self if out of\nrange of Ruby Time class. If self …\n"],["to_time","String","String.html#method-i-to_time","(form = :utc)","<p>Form can be either :utc (default) or :local.\n"],["to_time","Time","Time.html#method-i-to_time","()","<p>A method to keep Time, Date and DateTime instances interchangeable on\nconversions. In this case, it simply …\n"],["to_time_in_current_zone","Date","Date.html#method-i-to_time_in_current_zone","()","<p>Converts Date to a TimeWithZone in the current zone if Time.zone or\nTime.zone_default is set, otherwise …\n"],["to_xml","ActiveModel::Errors","ActiveModel/Errors.html#method-i-to_xml","(options={})","<p>Returns an xml formatted representation of the Errors hash.\n\n<pre>p.errors.add(:name, &quot;can't be blank&quot;)\np.errors.add(:name, ...</pre>\n"],["to_xml","ActiveModel::Serializers::Xml","ActiveModel/Serializers/Xml.html#method-i-to_xml","(options = {}, &block)","<p>Returns XML representing the model. Configuration can be passed through\n<code>options</code>.\n<p>Without any <code>options</code>, …\n"],["to_xml","ActiveRecord::Serialization","ActiveRecord/Serialization.html#method-i-to_xml","(options = {}, &block)","<p>Builds an XML document to represent the model. Some configuration is\navailable through <code>options</code>. However …\n"],["to_xml","ActiveResource::Base","ActiveResource/Base.html#method-i-to_xml","(options={})",""],["to_xml","Array","Array.html#method-i-to_xml","(options = {})","<p>Returns a string that represents the array in XML by invoking\n<code>to_xml</code> on each element. Active Record collections …\n"],["to_xml","Hash","Hash.html#method-i-to_xml","(options = {})","<p>Returns a string containing an XML representation of its receiver:\n\n<pre class=\"ruby\">{<span class=\"ruby-string\">&quot;foo&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-string\">&quot;bar&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>}.<span class=\"ruby-identifier\">to_xml</span>\n<span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["to_yaml","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-to_yaml","(*args)",""],["to_yaml","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_yaml","(options = {})",""],["to_yaml","BigDecimal","BigDecimal.html#method-i-to_yaml","(opts = {})","<p>This emits the number without any scientific notation. This is better than\nself.to_f.to_s since it doesn’t …\n"],["today","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-today","()","<p>Return the current date in this time zone.\n"],["today?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-today-3F","()",""],["today?","Date","Date.html#method-i-today-3F","()","<p>Returns true if the Date object’s date is today.\n"],["today?","Time","Time.html#method-i-today-3F","()","<p>Tells whether the Time object’s time is today\n"],["toggle","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-toggle","(attribute)","<p>Assigns to <code>attribute</code> the boolean opposite of\n<code>attribute?</code>. So if the predicate returns <code>true</code> the\nattribute …\n"],["toggle!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-toggle-21","(attribute)","<p>Wrapper around <code>toggle</code> that saves the record. This method\ndiffers from its non-bang version in that it …\n"],["token_and_options","ActionController::HttpAuthentication::Token","ActionController/HttpAuthentication/Token.html#method-i-token_and_options","(request)","<p>Parses the token and options out of the token authorization header.  If the\nheader looks like this:\n\n<pre>Authorization: ...</pre>\n"],["tokenize","HTML::Sanitizer","HTML/Sanitizer.html#method-i-tokenize","(text, options)",""],["tokenize","HTML::WhiteListSanitizer","HTML/WhiteListSanitizer.html#method-i-tokenize","(text, options)",""],["tomorrow","Date","Date.html#method-i-tomorrow","()","<p>Convenience method which returns a new Date/DateTime representing the time\n1 day since the instance time …\n"],["tomorrow","Date","Date.html#method-c-tomorrow","()","<p>Returns a new Date representing the date 1 day after today (i.e. tomorrow’s\ndate).\n"],["tomorrow","Time","Time.html#method-i-tomorrow","()","<p>Convenience method which returns a new Time representing the time 1 day\nsince the instance time\n"],["touch","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-touch","(name = nil)","<p>Saves the record with the updated_at/on attributes set to the current time.\nPlease note that no validation …\n"],["transaction","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-transaction","()",""],["transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction","(options = {})","<p>Runs the given block in a database transaction, and returns the result of\nthe block.\n<p>Nested transactions …\n"],["transaction","ActiveRecord::Transactions","ActiveRecord/Transactions.html#method-i-transaction","(options = {}, &block)","<p>See ActiveRecord::Transactions::ClassMethods for detailed documentation.\n"],["transaction","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-transaction","(options = {}, &block)","<p>See ActiveRecord::Transactions::ClassMethods for detailed documentation.\n"],["transaction_include_action?","ActiveRecord::Transactions","ActiveRecord/Transactions.html#method-i-transaction_include_action-3F","(action)","<p>Determine if a transaction included an action for :create, :update, or\n:destroy. Used in filtering callbacks. …\n"],["transaction_joinable=","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-transaction_joinable-3D","(joinable)",""],["transaction_record_state","ActiveRecord::Transactions","ActiveRecord/Transactions.html#method-i-transaction_record_state","(state)","<p>Determine if a record was created or destroyed in a transaction. State\nshould be one of :new_record or …\n"],["translate","ActionView::Helpers::TranslationHelper","ActionView/Helpers/TranslationHelper.html#method-i-translate","(key, options = {})","<p>Delegates to <code>I18n#translate</code> but also performs three additional\nfunctions.\n<p>First, it’ll pass the <code>:rescue_format</code> …\n"],["translate_exception","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-translate_exception","(e, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-translate_exception","(exception, message)",""],["transliterate","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-transliterate","(string, replacement = \"?\")","<p>Replaces non-ASCII characters with an ASCII approximation, or if none\nexists, a replacement character …\n"],["trigger","ActiveSupport::FileWatcher","ActiveSupport/FileWatcher.html#method-i-trigger","(files)",""],["trigger","ActiveSupport::FileWatcher::Backend","ActiveSupport/FileWatcher/Backend.html#method-i-trigger","(files)",""],["truncate","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-truncate","(text, options = {})","<p>Truncates a given <code>text</code> after a given <code>:length</code> if\n<code>text</code> is longer than <code>:length</code> (defaults to 30). The\nlast …\n"],["truncate","String","String.html#method-i-truncate","(length, options = {})","<p>Truncates a given <code>text</code> after a given <code>length</code> if\n<code>text</code> is longer than <code>length</code>:\n\n<pre>&quot;Once upon a time in a world ...</pre>\n"],["try","NilClass","NilClass.html#method-i-try","(*args)","<p>Calling <code>try</code> on <code>nil</code> always returns\n<code>nil</code>. It becomes specially helpful when navigating through\nassociations …\n"],["try","Object","Object.html#method-i-try","(*a, &b)","<p>Invokes the method identified by the symbol <code>method</code>, passing it\nany arguments and/or the block specified, …\n"],["try_to_load_dependency","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-try_to_load_dependency","(file_name)",""],["tsvector","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html#method-i-tsvector","(*args)",""],["tv_sec","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-tv_sec","()",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-type_cast","(value, column)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-type_cast","(value, column)",""],["type_cast","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-type_cast","(value, column)","<p>Cast a <code>value</code> to a type that the database understands. For\nexample, SQLite does not understand dates, …\n"],["type_to_sql","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to MySQL-specific data types.\n"],["type_to_sql","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to MySQL-specific data types.\n"],["type_to_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to PostgreSQL-specific data types.\n"],["u_unpack","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-u_unpack","(string)","<p>Unpack the string at codepoints boundaries. Raises an EncodingError when\nthe encoding of the string isn’t …\n"],["uncached","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-uncached","()","<p>Disable the query cache within the block.\n"],["uncached","ActiveRecord::QueryCache::ClassMethods","ActiveRecord/QueryCache/ClassMethods.html#method-i-uncached","(&block)","<p>Disable the query cache within the block if Active Record is configured.\n"],["uncountable","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-uncountable","(*words)","<p>Add uncountable words that shouldn’t be attempted inflected.\n<p>Examples:\n\n<pre>uncountable &quot;money&quot;\nuncountable ...</pre>\n"],["uncountable?","ActiveModel::Naming","ActiveModel/Naming.html#method-c-uncountable-3F","(record_or_class)","<p>Identifies whether the class name of a record or class is uncountable.\nExamples:\n\n<pre>ActiveModel::Naming.uncountable?(Sheep) ...</pre>\n"],["undefine_attribute_methods","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-undefine_attribute_methods","()","<p>Removes all the previously dynamically defined methods from the class\n"],["undefine_attribute_methods","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-undefine_attribute_methods","(*args)",""],["underscore","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-underscore","(camel_cased_word)","<p>Makes an underscored, lowercase form from the expression in the string.\n<p>Changes ‘::’ to ‘/’ to convert …\n"],["underscore","String","String.html#method-i-underscore","()","<p>The reverse of <code>camelize</code>. Makes an underscored, lowercase form\nfrom the expression in the string.\n<p><code>underscore</code> ...\n"],["unescape","Object","Object.html#method-i-unescape","(str, escaped = /%[a-fA-F\\d]{2}/)",""],["unescape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-unescape_bytea","(value)","<p>Unescapes bytea output from a database to the binary string it represents.\nNOTE: This is NOT an inverse …\n"],["uniq_by","Array","Array.html#method-i-uniq_by","()","<p>Returns an unique array based on the criteria given as a <code>Proc</code>.\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>].<span class=\"ruby-identifier\">uniq_by</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">i</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">i</span>.<span class=\"ruby-identifier\">odd?</span> } <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["uniq_by!","Array","Array.html#method-i-uniq_by-21","()","<p>Same as uniq_by, but modifies self.\n"],["unmemoize_all","ActiveSupport::Memoizable::InstanceMethods","ActiveSupport/Memoizable/InstanceMethods.html#method-i-unmemoize_all","()",""],["unserializable_attribute?","ActiveRecord::AttributeMethods::Read","ActiveRecord/AttributeMethods/Read.html#method-i-unserializable_attribute-3F","(attr_name, column)","<p>Returns true if the attribute is of a text column and marked for\nserialization.\n"],["unserialize_attribute","ActiveRecord::AttributeMethods::Read","ActiveRecord/AttributeMethods/Read.html#method-i-unserialize_attribute","(attr_name)","<p>Returns the unserialized object of the attribute.\n"],["unsubscribe","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-c-unsubscribe","(args)",""],["unsubscribe","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-unsubscribe","(subscriber)",""],["until","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-until","(time = ::Time.current)",""],["until","Numeric","Numeric.html#method-i-until","(time = ::Time.current)","<p>Reads best with argument:  10.minutes.until(time)\n"],["up","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-up","()",""],["upcase","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-upcase","()","<p>Convert characters in the string to uppercase.\n<p>Example:\n\n<pre>'Laurent, où sont les tests ?'.mb_chars.upcase.to_s ...</pre>\n"],["update","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update","(arel, name = nil, binds = [])","<p>Executes the update statement and returns the number of rows affected.\n"],["update","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-update","(id, attributes)","<p>Updates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["update","ActiveResource::Base","ActiveResource/Base.html#method-i-update","()","<p>Update the resource on the remote service.\n"],["update","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-update","(other_hash)","<p>Updates the instantized hash with values from the second:\n\n<pre>hash_1 = HashWithIndifferentAccess.new\nhash_1[:key] ...</pre>\n"],["update","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-update","(other_hash)","<p>Updates the instantized hash with values from the second:\n\n<pre>hash_1 = HashWithIndifferentAccess.new\nhash_1[:key] ...</pre>\n"],["update_all","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-update_all","(updates, conditions = nil, options = {})","<p>Updates all records with details given if they match a set of conditions\nsupplied, limits and order can …\n"],["update_attribute","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update_attribute","(name, value)","<p>Updates a single attribute and saves the record. This is especially useful\nfor boolean flags on existing …\n"],["update_attribute","ActiveResource::Base","ActiveResource/Base.html#method-i-update_attribute","(name, value)","<p>Updates a single attribute and then saves the object.\n<p>Note: Unlike ActiveRecord::Base.update_attribute …\n"],["update_attributes","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update_attributes","(attributes, options = {})","<p>Updates the attributes of the model from the passed-in hash and saves the\nrecord, all wrapped in a transaction. …\n"],["update_attributes","ActiveResource::Base","ActiveResource/Base.html#method-i-update_attributes","(attributes)","<p>Updates this resource with all the attributes from the passed-in Hash and\nrequests that the record be …\n"],["update_attributes!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update_attributes-21","(attributes, options = {})","<p>Updates its receiver just like <code>update_attributes</code> but calls\n<code>save!</code> instead of <code>save</code>, so an exception is …\n"],["update_column","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update_column","(name, value)","<p>Updates a single attribute of an object, without calling save.\n<p>Validation is skipped.\n<p>Callbacks are skipped. …\n"],["update_counters","ActiveRecord::CounterCache","ActiveRecord/CounterCache.html#method-i-update_counters","(id, counters)","<p>A generic “counter updater” implementation, intended primarily to be used\nby increment_counter …\n"],["update_counters","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-update_counters","(id, counters)","<p>Make sure the lock version column gets updated when counters are updated.\n"],["update_details","ActionView::LookupContext::Details","ActionView/LookupContext/Details.html#method-i-update_details","(new_details)","<p>Update the details keys by merging the given hash into the current details\nhash. If a block is given, …\n"],["update_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update_sql","(sql, name = nil)","<p>Executes the update statement and returns the number of rows affected.\n"],["update_sql","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-update_sql","(sql, name = nil)",""],["update_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-update_sql","(sql, name = nil)","<p>Executes an UPDATE query and returns the number of affected tuples.\n"],["updated","ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html#method-i-updated","(date_or_time = nil)","<p>Accepts a Date or Time object and inserts it in the proper format. If nil\nis passed, current time in …\n"],["updated_at","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-updated_at","()",""],["url_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-url_field","(object_name, method, options = {})","<p>Returns a text_field of type “url”.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">url_field</span>(<span class=\"ruby-string\">&quot;user&quot;</span>, <span class=\"ruby-string\">&quot;homepage&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &lt;input id=&quot;user_homepage&quot; ...</span>\n</pre>\n"],["url_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-url_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “url”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["url_for","ActionController::Metal","ActionController/Metal.html#method-i-url_for","(string)","<p>basic url_for that can be overridden for more robust functionality\n"],["url_for","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-url_for","(options = {})","<p>Returns the URL for the set of <code>options</code> provided. This takes\nthe same options as <code>url_for</code> in Action Controller …\n"],["url_options","ActionController::UrlFor","ActionController/UrlFor.html#method-i-url_options","()",""],["url_options","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-url_options","()","<p>Need to map default url options to controller one. def\ndefault_url_options(*args) #:nodoc:\n\n<pre>controller.send(:default_url_options, ...</pre>\n"],["us_zones","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-us_zones","()","<p>A convenience method for returning a collection of TimeZone objects for\ntime zones in the USA.\n"],["use","ActionController::Metal","ActionController/Metal.html#method-c-use","(*args, &block)","<p>Adds given middleware class and its args to bottom of middleware_stack\n"],["use","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-use","()",""],["use_renderer","ActionController::Renderers::ClassMethods","ActionController/Renderers/ClassMethods.html#method-i-use_renderer","(*args)",""],["use_renderers","ActionController::Renderers::ClassMethods","ActionController/Renderers/ClassMethods.html#method-i-use_renderers","(*args)",""],["use_zone","Time","Time.html#method-c-use_zone","(time_zone)","<p>Allows override of <code>Time.zone</code> locally inside supplied block;\nresets <code>Time.zone</code> to existing value when done. …\n"],["usec","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-usec","()",""],["user","ActiveResource::Base","ActiveResource/Base.html#method-c-user","()","<p>Gets the user for REST HTTP authentication.\n"],["user=","ActiveResource::Base","ActiveResource/Base.html#method-c-user-3D","(user)","<p>Sets the user for REST HTTP authentication.\n"],["user=","ActiveResource::Connection","ActiveResource/Connection.html#method-i-user-3D","(user)","<p>Sets the user for remote service.\n"],["user_name_and_password","ActionController::HttpAuthentication::Basic","ActionController/HttpAuthentication/Basic.html#method-i-user_name_and_password","(request)",""],["uses_transaction","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction","(*methods)",""],["uses_transaction?","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction-3F","(method)",""],["using_limitable_reflections?","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-using_limitable_reflections-3F","(reflections)",""],["utc","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-utc","()","<p>Returns a Time or DateTime instance that represents the time in UTC.\n"],["utc","DateTime","DateTime.html#method-i-utc","()","<p>Adjusts DateTime to UTC by adding its offset value; offset is set to 0\n<p>Example:\n\n<pre>DateTime.civil(2005, 2, ...</pre>\n"],["utc?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-utc-3F","()",""],["utc?","DateTime","DateTime.html#method-i-utc-3F","()","<p>Returns true if offset == 0\n"],["utc_offset","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-utc_offset","()",""],["utc_offset","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-utc_offset","()",""],["utc_offset","DateTime","DateTime.html#method-i-utc_offset","()","<p>Returns the offset value in seconds\n"],["utc_time","Time","Time.html#method-c-utc_time","(*args)","<p>Wraps class method <code>time_with_datetime_fallback</code> with\n<code>utc_or_local</code> set to <code>:utc</code>.\n"],["utc_to_local","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-utc_to_local","(time)","<p>Adjust the given time to the simultaneous time in the time zone represented\nby <code>self</code>. Returns a Time.utc() …\n"],["valid?","ActiveModel::Validations","ActiveModel/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the specified validations and returns true if no errors were added\notherwise false. Context …\n"],["valid?","ActiveRecord::Validations","ActiveRecord/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the validations within the specified context. Returns true if no\nerrors are found, false otherwise. …\n"],["valid?","ActiveResource::Validations","ActiveResource/Validations.html#method-i-valid-3F","()","<p>Checks for errors on an object (i.e., is resource.errors empty?).\n<p>Runs all the specified local validations …\n"],["valid_alter_table_options","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-valid_alter_table_options","( type, options)","<p>See: www.sqlite.org/lang_altertable.html SQLite has an additional\nrestriction on the ALTER TABLE statement …\n"],["valid_scope_name?","ActiveRecord::NamedScope::ClassMethods","ActiveRecord/NamedScope/ClassMethods.html#method-i-valid_scope_name-3F","(name)",""],["validate","ActiveModel::EachValidator","ActiveModel/EachValidator.html#method-i-validate","(record)","<p>Performs validation on the supplied record. By default this will call\n<code>validates_each</code> to determine validity …\n"],["validate","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validate","(*args, &block)","<p>Adds a validation method or block to the class. This is useful when\noverriding the <code>validate</code> instance …\n"],["validate","ActiveModel::Validations::PresenceValidator","ActiveModel/Validations/PresenceValidator.html#method-i-validate","(record)",""],["validate","ActiveModel::Validator","ActiveModel/Validator.html#method-i-validate","(record)","<p>Override this method in subclasses with validation logic, adding errors to\nthe records <code>errors</code> array where …\n"],["validate_digest_response","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-validate_digest_response","(request, realm, &password_procedure)","<p>Returns false unless the request credentials response value matches the\nexpected value. First try the …\n"],["validate_each","ActiveModel::EachValidator","ActiveModel/EachValidator.html#method-i-validate_each","(record, attribute, value)","<p>Override this method in subclasses with the validation logic, adding errors\nto the records <code>errors</code> array …\n"],["validate_each","ActiveModel::Validations::AcceptanceValidator","ActiveModel/Validations/AcceptanceValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::ConfirmationValidator","ActiveModel/Validations/ConfirmationValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::ExclusionValidator","ActiveModel/Validations/ExclusionValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::FormatValidator","ActiveModel/Validations/FormatValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::InclusionValidator","ActiveModel/Validations/InclusionValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::LengthValidator","ActiveModel/Validations/LengthValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::NumericalityValidator","ActiveModel/Validations/NumericalityValidator.html#method-i-validate_each","(record, attr_name, value)",""],["validate_each","ActiveModel::Validations::WithValidator","ActiveModel/Validations/WithValidator.html#method-i-validate_each","(record, attr, val)",""],["validate_each","ActiveRecord::Validations::AssociatedValidator","ActiveRecord/Validations/AssociatedValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveRecord::Validations::UniquenessValidator","ActiveRecord/Validations/UniquenessValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_fallbacks","I18n::Railtie","I18n/Railtie.html#method-c-validate_fallbacks","(fallbacks)",""],["validate_nonce","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-validate_nonce","(secret_key, request, value, seconds_to_timeout=5*60)","<p>Might want a shorter timeout depending on whether the request is a PUT or\nPOST, and if client is browser …\n"],["validates","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validates","(*attributes)","<p>This method is a shortcut to all default validators and any custom\nvalidator classes ending in ‘Validator’. …\n"],["validates_acceptance_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_acceptance_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate the acceptance of a terms\nof service check box (or similar …\n"],["validates_associated","ActiveRecord::Validations::ClassMethods","ActiveRecord/Validations/ClassMethods.html#method-i-validates_associated","(*attr_names)","<p>Validates whether the associated object or objects are all valid\nthemselves. Works with any kind of association. …\n"],["validates_confirmation_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_confirmation_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate a password or email address\nfield with a confirmation. …\n"],["validates_each","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validates_each","(*attr_names, &block)","<p>Validates each attribute against a block.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Validations</span>\n\n  <span class=\"ruby-identifier\">attr_accessor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["validates_exclusion_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_exclusion_of","(*attr_names)","<p>Validates that the value of the specified attribute is not in a particular\nenumerable object.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["validates_format_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_format_of","(*attr_names)","<p>Validates whether the value of the specified attribute is of the correct\nform, going by the regular expression …\n"],["validates_inclusion_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_inclusion_of","(*attr_names)","<p>Validates whether the value of the specified attribute is available in a\nparticular enumerable object. …\n"],["validates_length_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_length_of","(*attr_names)","<p>Validates that the specified attribute matches the length restrictions\nsupplied. Only one option can …\n"],["validates_numericality_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_numericality_of","(*attr_names)","<p>Validates whether the value of the specified attribute is numeric by trying\nto convert it to a float …\n"],["validates_presence_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_presence_of","(*attr_names)","<p>Validates that the specified attributes are not blank (as defined by\nObject#blank?). Happens by default …\n"],["validates_size_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_size_of","(*attr_names)",""],["validates_uniqueness_of","ActiveRecord::Validations::ClassMethods","ActiveRecord/Validations/ClassMethods.html#method-i-validates_uniqueness_of","(*attr_names)","<p>Validates whether the value of the specified attributes are unique across\nthe system. Useful for making …\n"],["validates_with","ActiveModel::Validations","ActiveModel/Validations.html#method-i-validates_with","(*args, &block)","<p>Passes the record off to the class or classes specified and allows them to\nadd errors based on more complex …\n"],["validates_with","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validates_with","(*args, &block)","<p>Passes the record off to the class or classes specified and allows them to\nadd errors based on more complex …\n"],["validators","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validators","()","<p>List all validators that are being used to validate the model using\n<code>validates_with</code> method.\n"],["validators_on","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validators_on","(*attributes)","<p>List all validators that being used to validate a specific attribute.\n"],["value","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-c-value","(object, method_name)",""],["value","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-value","(object)",""],["value","ActiveSupport::Cache::Entry","ActiveSupport/Cache/Entry.html#method-i-value","()","<p>Get the value stored in the cache.\n"],["value_before_type_cast","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-c-value_before_type_cast","(object, method_name)",""],["value_before_type_cast","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-value_before_type_cast","(object)",""],["values","ActiveModel::Errors","ActiveModel/Errors.html#method-i-values","()","<p>Returns all message values\n"],["values_at","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-values_at","(*indices)","<p>Returns an array of the values at the specified indices:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[:a] ...</pre>\n"],["values_at","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-values_at","(*indices)","<p>Returns an array of the values at the specified indices:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[:a] ...</pre>\n"],["verified_request?","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-verified_request-3F","()","<p>Returns true or false if a request is verified. Checks:\n<p>is it a GET request?  Gets should be safe and …\n"],["verify","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-i-verify","(signed_message)",""],["verify!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-verify-21","(*ignored)","<p>Checks whether the connection to the database is still active (i.e. not\nstale). This is done under the …\n"],["verify_authenticity_token","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-verify_authenticity_token","()","<p>The actual before_filter that is used. Modify this to change how you handle\nunverified requests.\n"],["version","Rails","Rails.html#method-c-version","()",""],["video_path","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-video_path","(source)","<p>Computes the path to a video asset in the public videos directory. Full\npaths from the document root …\n"],["video_tag","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-video_tag","(sources, options = {})","<p>Returns an html video tag for the <code>sources</code>. If\n<code>sources</code> is a string, a single video tag will be returned. …\n"],["view_paths=","ActionView::LookupContext::ViewPaths","ActionView/LookupContext/ViewPaths.html#method-i-view_paths-3D","(paths)","<p>Whenever setting view paths, makes a copy so we can manipulate then in\ninstance objects as we wish.\n"],["visible_action?","ActionController::HideActions::ClassMethods","ActionController/HideActions/ClassMethods.html#method-i-visible_action-3F","(action_name)",""],["wait","ActiveSupport::LogSubscriber::TestHelper","ActiveSupport/LogSubscriber/TestHelper.html#method-i-wait","()","<p>Wait notifications to be published.\n"],["wait","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-wait","()","<p>This is a sync queue, so there is no waiting.\n"],["wants?","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-c-wants-3F","(string)","<p>Returns <code>true</code> if the Chars class can and should act as a proxy\nfor the string <em>string</em>. Returns <code>false</code> otherwise. …\n"],["warn","ActiveSupport::Deprecation","ActiveSupport/Deprecation.html#method-c-warn","(message = nil, callstack = caller)","<p>Outputs a deprecation warning to the output configured by\n<code>ActiveSupport::Deprecation.behavior</code>\n\n<pre>ActiveSupport::Deprecation.warn(&quot;something ...</pre>\n"],["warn!","ActiveModel::MassAssignmentSecurity::Sanitizer","ActiveModel/MassAssignmentSecurity/Sanitizer.html#method-i-warn-21","(attrs)",""],["watch","ActiveSupport::FileWatcher","ActiveSupport/FileWatcher.html#method-i-watch","(pattern, &block)",""],["watch_namespaces","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-i-watch_namespaces","(namespaces)","<p>Add a set of modules to the watch stack, remembering the initial constants\n"],["week","Numeric","Numeric.html#method-i-week","()",""],["weeks","Numeric","Numeric.html#method-i-weeks","()",""],["weeks_ago","Date","Date.html#method-i-weeks_ago","(weeks)","<p>Returns a new Date/DateTime representing the time a number of specified\nweeks ago.\n"],["weeks_ago","Time","Time.html#method-i-weeks_ago","(weeks)","<p>Returns a new Time representing the time a number of specified weeks ago.\n"],["where","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-where","(opts, *rest)",""],["where_values_hash","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-where_values_hash","()",""],["with","ActionController::Railties::Paths","ActionController/Railties/Paths.html#method-c-with","(app)",""],["with_backend","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-with_backend","(name)",""],["with_backend","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-with_backend","(name)",""],["with_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-with_connection","()","<p>If a connection already exists yield it to the block.  If no connection\nexists checkout a connection, …\n"],["with_exclusive_scope","ActiveRecord::Base","ActiveRecord/Base.html#method-c-with_exclusive_scope","(method_scoping = {}, &block)","<p>Works like with_scope, but discards any nested properties.\n"],["with_fallbacks","ActionView::LookupContext::ViewPaths","ActionView/LookupContext/ViewPaths.html#method-i-with_fallbacks","()","<p>Add fallbacks to the view paths. Useful in cases you are rendering a :file.\n"],["with_gc_stats","ActiveSupport::Testing::Performance::Metrics::Base","ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-with_gc_stats","()","<p>overridden by each implementation\n"],["with_indifferent_access","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-with_indifferent_access","()",""],["with_indifferent_access","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-with_indifferent_access","()",""],["with_indifferent_access","Hash","Hash.html#method-i-with_indifferent_access","()","<p>Returns an +ActiveSupport::HashWithIndifferentAccess+ out of its receiver:\n\n<pre class=\"ruby\">{:<span class=\"ruby-identifier\">a</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>}.<span class=\"ruby-identifier\">with_indifferent_access</span>[<span class=\"ruby-string\">&quot;a&quot;</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["with_layout_format","ActionView::LookupContext::Details","ActionView/LookupContext/Details.html#method-i-with_layout_format","()","<p>A method which only uses the first format in the formats array for layout\nlookup. This method plays straight …\n"],["with_local_cache","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-with_local_cache","()","<p>Use a local cache for the duration of block.\n"],["with_options","Object","Object.html#method-i-with_options","(options)","<p>An elegant way to factor duplication out of options passed to a series of\nmethod calls. Each method called …\n"],["with_output_file","ActiveSupport::Testing::Performance::Benchmarker","ActiveSupport/Testing/Performance/Benchmarker.html#method-i-with_output_file","()",""],["with_scope","ActiveRecord::Base","ActiveRecord/Base.html#method-c-with_scope","(scope = {}, action = :merge, &block)","<p>with_scope lets you apply options to inner block incrementally. It takes a\nhash and the keys must be …\n"],["with_transaction_returning_status","ActiveRecord::Transactions","ActiveRecord/Transactions.html#method-i-with_transaction_returning_status","()","<p>Executes <code>method</code> within a transaction and captures its return\nvalue as a status flag. If the status is …\n"],["with_warnings","Kernel","Kernel.html#method-i-with_warnings","(flag)","<p>Sets $VERBOSE for the duration of the block and back to its original value\nafterwards.\n"],["without","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-without","()",""],["without_modules","ActionController::Base","ActionController/Base.html#method-c-without_modules","(*modules)",""],["word_wrap","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-word_wrap","(text, *args)","<p>Wraps the <code>text</code> into lines no longer than\n<code>line_width</code> width. This method breaks on the first whitespace …\n"],["wrap","Array","Array.html#method-c-wrap","(object)","<p>Wraps its argument in an array unless it is already an array (or\narray-like).\n<p>Specifically:\n<p>If the argument …\n"],["wrap_parameters","ActionController::ParamsWrapper::ClassMethods","ActionController/ParamsWrapper/ClassMethods.html#method-i-wrap_parameters","(name_or_model_or_options, options = {})","<p>Sets the name of the wrapper key, or the model which\n<code>ParamsWrapper</code> would use to determine the attribute …\n"],["write","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-write","(text=\"\")",""],["write","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-write","(name, value, options = nil)","<p>Writes the value to the cache, with the key.\n<p>Options are passed to the underlying cache implementation. …\n"],["write_attribute","ActiveRecord::AttributeMethods::Write","ActiveRecord/AttributeMethods/Write.html#method-i-write_attribute","(attr_name, value)","<p>Updates the attribute identified by <code>attr_name</code> with the\nspecified <code>value</code>. Empty strings for fixnum and …\n"],["write_entry","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-write_entry","(key, entry, options)",""],["write_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-write_entry","(key, value, options)",""],["write_fragment","ActionController::Caching::Fragments","ActionController/Caching/Fragments.html#method-i-write_fragment","(key, content, options = nil)","<p>Writes <code>content</code> to the location signified by  <code>key</code>\n(see <code>expire_fragment</code> for acceptable formats).\n"],["xhr","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-xhr","(request_method, action, parameters = nil, session = nil, flash = nil)",""],["xml","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html#method-i-xml","(*args)",""],["xml","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-xml","(*args)",""],["xml_http_request","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-xml_http_request","(request_method, action, parameters = nil, session = nil, flash = nil)",""],["xmlschema","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-xmlschema","(fraction_digits = 0)",""],["xmlschema","Date","Date.html#method-i-xmlschema","()",""],["xmlschema","DateTime","DateTime.html#method-i-xmlschema","()","<p>Converts datetime to an appropriate format for use in XML.\n"],["year","Integer","Integer.html#method-i-year","()",""],["years","Integer","Integer.html#method-i-years","()",""],["years_ago","Date","Date.html#method-i-years_ago","(years)","<p>Returns a new Date/DateTime representing the time a number of specified\nyears ago.\n"],["years_ago","Time","Time.html#method-i-years_ago","(years)","<p>Returns a new Time representing the time a number of specified years ago\n"],["years_since","Date","Date.html#method-i-years_since","(years)","<p>Returns a new Date/DateTime representing the time a number of specified\nyears in the future.\n"],["years_since","Time","Time.html#method-i-years_since","(years)","<p>Returns a new Time representing the time a number of specified years in the\nfuture\n"],["yesterday","Date","Date.html#method-c-yesterday","()","<p>Returns a new Date representing the date 1 day ago (i.e. yesterday’s date).\n"],["yesterday","Date","Date.html#method-i-yesterday","()","<p>Convenience method which returns a new Date/DateTime representing the time\n1 day ago\n"],["yesterday","Time","Time.html#method-i-yesterday","()","<p>Convenience method which returns a new Time representing the time 1 day ago\n"],["zone","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-zone","()","<p>Time uses <code>zone</code> to display the time zone abbreviation, so we’re\nduck-typing it.\n"],["zone","Time","Time.html#method-c-zone","()","<p>Returns the TimeZone for the current request, if this has been set (via\nTime.zone=). If <code>Time.zone</code> has …\n"],["zone=","Time","Time.html#method-c-zone-3D","(time_zone)","<p>Sets <code>Time.zone</code> to a TimeZone object for the current\nrequest/thread.\n<p>This method accepts any of the following: …\n"],["zones_map","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-zones_map","()",""],["CHANGELOG","","/home/thomas/_rvm/gems/ruby-1_9_2-head/gems/actionmailer-3_1_0/CHANGELOG.html","","<p>*Rails 3.1.0 (unreleased)*\n<p>No changes\n\n<p>*Rails 3.0.7 (April 18, 2011)*\n"],["MIT-LICENSE","","/home/thomas/_rvm/gems/ruby-1_9_2-head/gems/actionmailer-3_1_0/MIT-LICENSE.html","","<p>Copyright © 2004-2011 David Heinemeier Hansson\n<p>Permission is hereby granted, free of charge, to any …\n"],["README","","/home/thomas/_rvm/gems/ruby-1_9_2-head/gems/actionmailer-3_1_0/README_rdoc.html","","<p>Action Mailer – Easy email delivery and testing\n<p>Action Mailer is a framework for designing email-service …\n"],["CHANGELOG","","/home/thomas/_rvm/gems/ruby-1_9_2-head/gems/actionpack-3_1_0/CHANGELOG.html","","\n<pre>Rails 3.1.0 (unreleased)*\n\n Param values are `paramified` in controller tests. [David Chelimsky]\n\n x_sendfile_header ...</pre>\n"],["MIT-LICENSE","","/home/thomas/_rvm/gems/ruby-1_9_2-head/gems/actionpack-3_1_0/MIT-LICENSE.html","","<p>Copyright © 2004-2011 David Heinemeier Hansson\n<p>Permission is hereby granted, free of charge, to any …\n"],["README","","/home/thomas/_rvm/gems/ruby-1_9_2-head/gems/actionpack-3_1_0/README_rdoc.html","","<p>Action Pack – From request to response\n<p>Action Pack is a framework for handling and responding to web …\n"],["CHANGELOG","","/home/thomas/_rvm/gems/ruby-1_9_2-head/gems/activemodel-3_1_0/CHANGELOG.html","","<p>*Rails 3.1.0 (unreleased)*\n<p>Alternate I18n namespace lookup is no longer supported. Instead of\n“activerecord.models.admins.post …\n"],["MIT-LICENSE","","/home/thomas/_rvm/gems/ruby-1_9_2-head/gems/activemodel-3_1_0/MIT-LICENSE.html","","<p>Copyright © 2004-2011 David Heinemeier Hansson\n<p>Permission is hereby granted, free of charge, to any …\n"],["README","","/home/thomas/_rvm/gems/ruby-1_9_2-head/gems/activemodel-3_1_0/README_rdoc.html","","<p>Active Model – model interfaces for Rails\n<p>Active Model provides a known set of interfaces for usage in …\n"],["CHANGELOG","","/home/thomas/_rvm/gems/ruby-1_9_2-head/gems/activerecord-3_1_0/CHANGELOG.html","","<p>*Rails 3.1.0 (unreleased)*\n<p>Add a proxy_association method to association proxies, which can be called\n…\n"],["README","","/home/thomas/_rvm/gems/ruby-1_9_2-head/gems/activerecord-3_1_0/README_rdoc.html","","<p>Active Record – Object-relational mapping put on rails\n<p>Active Record connects classes to relational database …\n"],["CHANGELOG","","/home/thomas/_rvm/gems/ruby-1_9_2-head/gems/activeresource-3_1_0/CHANGELOG.html","","<p>*Rails 3.1.0 (unreleased)*\n<p>The default format has been changed to JSON for all requests. If you want\nto …\n\n"],["README","","/home/thomas/_rvm/gems/ruby-1_9_2-head/gems/activeresource-3_1_0/README_rdoc.html","","<p>Active Resource\n<p>Active Resource (ARes) connects business objects and Representational State\nTransfer ( …\n"],["CHANGELOG","","/home/thomas/_rvm/gems/ruby-1_9_2-head/gems/activesupport-3_1_0/CHANGELOG.html","","<p>*Rails 3.1.0 (unreleased)*\n<p>ActiveSupport::Dependencies#load and ActiveSupport::Dependencies#require\nnow …\n\n"],["README","","/home/thomas/_rvm/gems/ruby-1_9_2-head/gems/activesupport-3_1_0/README_rdoc.html","","<p>Active Support – Utility classes and Ruby extensions from Rails\n<p>Active Support is a collection of utility …\n"],["CHANGELOG","","/home/thomas/_rvm/gems/ruby-1_9_2-head/gems/railties-3_1_0/CHANGELOG.html","","\n<pre>Rails 3.1.0 (unreleased)*\n\n The default database schema file is written as UTF-8. [Aaron Patterson]\n ...</pre>\n"],["README","","/home/thomas/_rvm/gems/ruby-1_9_2-head/gems/railties-3_1_0/README_rdoc.html","","<p>Railties – Gluing the Engine to the Rails\n<p>Railties is responsible for gluing all frameworks together. …\n"],["README","","README.html","","<p>VIEW STRUCTURE FOR PROBLEMS:\n\n<pre>The goal of this swection is to explain how we convert a QuestionBase into ...</pre>\n"]]}}